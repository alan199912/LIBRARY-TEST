{"version":3,"file":"914.fba653c94fa4a25f.js","mappings":"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","names":["OAccessModule","CommonModule","RouterModule","i0","OAccessComponent","constructor","renderer","this","ngAfterViewInit","indexArr","s","accessList","_a","map","_","i","access","forEach","e","index","nativeElement","href","includes","setAttribute","link","selectors","OTableComponent","EventEmitter","ngOnInit","componentValidations","checkbox","inputCheckArr","push","isValidateComponent","displayedColumns","length","dataSource","Error","key","value","trim","charAt","toUpperCase","slice","toLowerCase","match","allSelected","$event","checked","setProperty","DataSelectedArr","dataSelected","emit","selectedRow","indexOf","filter","i1","BadPracticesComponent","BestPracticesComponent","ViewerComponent","linkCode","isOpenCode","ClipboardDirective","host","navigator","clipboard","button","closest","querySelector","listen","event","target","pre","l","parentElement","code","p","writeText","g","innerText","setTimeout"],"sourceRoot":"webpack:///","sources":["./projects/ngx-obelisco/access/o-access.module.ts","./projects/ngx-obelisco/access/o-access/o-access.component.html","./projects/ngx-obelisco/access/o-access/o-access.component.ts","./projects/ngx-obelisco/table/o-table.component.html","./projects/ngx-obelisco/table/o-table.component.ts","./src/app/components/bad-practices/bad-practices.component.html","./src/app/components/bad-practices/bad-practices.component.ts","./src/app/components/best-practices/best-practices.component.html","./src/app/components/best-practices/best-practices.component.ts","./src/app/components/viewer/viewer.component.html","./src/app/components/viewer/viewer.component.ts","./src/app/shared/directives/copy/clipboard.directive.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { OAccessComponent } from './o-access/o-access.component';\nimport { RouterModule } from '@angular/router';\nimport { OAccessGroupComponent } from './o-access-group/o-access-group.component';\nimport { OAccessListComponent } from './o-access-list/o-access-list.component';\n\n@NgModule({\n  declarations: [OAccessComponent, OAccessGroupComponent, OAccessListComponent],\n  imports: [CommonModule, RouterModule],\n  exports: [OAccessComponent, OAccessGroupComponent, OAccessListComponent]\n})\nexport class OAccessModule {}\n","<div class=\"list-group\" [class.list-group-row]=\"isHorizontal\">\n  <a\n    *ngFor=\"let access of accessList\"\n    #access\n    [routerLink]=\"access.route\"\n    class=\"list-group-item\"\n    [ngClass]=\"{\n      'item-sm': !isBig,\n      'list-group-item-logout': isLogOut,\n      'card-item': isCard,\n      'descriptive-item': isDescriptive\n    }\"\n  >\n    <div *ngIf=\"access.description; else accessTitle\" class=\"access-content\">\n      <span class=\"access-title\">{{ access.title }}</span>\n      <p class=\"access-text\">{{ access.description }}</p>\n    </div>\n\n    <ng-template #accessTitle>\n      <span class=\"access-title\">{{ access.title }}</span>\n    </ng-template>\n  </a>\n</div>\n","import { AfterViewInit, Component, ElementRef, Input, ViewChildren, QueryList, Renderer2 } from '@angular/core';\nimport { Access } from 'ngx-obelisco/core/models';\n\n@Component({\n  selector: 'o-access',\n  templateUrl: './o-access.component.html',\n  styleUrls: ['./o-access.component.scss']\n})\nexport class OAccessComponent implements AfterViewInit {\n  @Input() public accessList!: Access[];\n  @Input() public isLogOut: boolean = false;\n  @Input() public isBig: boolean = false;\n  @Input() public isCard: boolean = false;\n  @Input() public isDescriptive?: boolean = false;\n  @Input() public isHorizontal?: boolean = false;\n\n  @ViewChildren('access') public access!: QueryList<ElementRef>;\n\n  constructor(private readonly renderer: Renderer2) {}\n\n  public ngAfterViewInit(): void {\n    const indexArr = this.accessList?.map((_, i) => i);\n\n    this.access.forEach((e, index) => {\n      if ((e.nativeElement.href === '' || !e.nativeElement.href) && indexArr.includes(index)) {\n        this.renderer.setAttribute(e.nativeElement, 'href', this.accessList[index].link!);\n      }\n    });\n  }\n}\n","<table\n  *ngIf=\"isValidateComponent\"\n  class=\"table\"\n  [ngClass]=\"{ 'table-bordered': isBordered, 'table-striped': isStriped, 'table-hover': isHover }\"\n>\n  <thead>\n    <tr>\n      <th scope=\"col\" *ngIf=\"isSelectable\">\n        <input type=\"checkbox\" aria-label=\"checkbox\" (change)=\"allSelected($event.target)\" />\n      </th>\n      <th scope=\"col\" *ngFor=\"let column of displayedColumns\">{{ column.value }}</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr *ngFor=\"let data of dataSource\">\n      <td *ngIf=\"isSelectable\">\n        <input #checkbox type=\"checkbox\" aria-label=\"checkbox\" (change)=\"selectedRow($event.target)\" />\n      </td>\n      <td *ngFor=\"let column of displayedColumns\" [innerHTML]=\"data[column.key]\"></td>\n    </tr>\n  </tbody>\n</table>\n","import { CommonModule } from '@angular/common';\nimport {\n  OnInit,\n  AfterViewInit,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  QueryList,\n  ViewChildren,\n  Renderer2\n} from '@angular/core';\nimport { Column } from 'ngx-obelisco/core/models';\n\n@Component({\n  selector: 'o-table',\n  templateUrl: './o-table.component.html',\n  styleUrls: ['./o-table.component.scss'],\n  standalone: true,\n  imports: [CommonModule]\n})\nexport class OTableComponent implements OnInit, AfterViewInit {\n  public isValidateComponent: boolean = false;\n\n  @Input() public displayedColumns: Column[] = [];\n  @Input() public dataSource: any[] = [];\n  @Input() public isBordered: boolean = false;\n  @Input() public isStriped: boolean = false;\n  @Input() public isHover: boolean = false;\n  @Input() public isSelectable: boolean = false;\n  @Output() public dataSelected = new EventEmitter<any>();\n\n  private inputCheckArr: ElementRef[] = [];\n  private DataSelectedArr: any[] = [];\n\n  @ViewChildren('checkbox') public checkbox!: QueryList<ElementRef>;\n\n  constructor(private readonly renderer: Renderer2) {}\n\n  public ngOnInit(): void {\n    this.componentValidations();\n  }\n\n  public ngAfterViewInit(): void {\n    this.checkbox.map((e) => {\n      this.inputCheckArr.push(e.nativeElement);\n    });\n  }\n\n  /**\n   * @description\n   * This method is used to validate the component\n   * For this component to work, the following conditions must be met:\n   * 1. The displayedColumns and displayedColumns property must be filled\n   * 2. The displayedColumns property must be has \"values\" and \"keys\" not null\n   * 3. The displayedColumns is trimmed for spaces\n   * 4. The displayedColumns is converted to capitalization\n   * 5. The displayedColumns is validated if \"value\" contains numbers or special characters and \"key\" contains numbers, special characters or accents\n   * @returns void\n   */\n  private componentValidations(): void {\n    this.isValidateComponent = this.displayedColumns.length > 0 && this.dataSource.length > 0;\n\n    if (!this.isValidateComponent) {\n      throw new Error('The displayedColumns and dataSource must not be empty');\n    }\n\n    this.displayedColumns.map((e) => {\n      if (e.key === '' || e.value === '') {\n        this.isValidateComponent = false;\n        throw new Error('The displayedColumns must not have null values');\n      }\n    });\n\n    this.displayedColumns.map((e) => (e.value = e.value.trim()));\n\n    this.displayedColumns = this.displayedColumns.map((e) => {\n      e.value = e.value.charAt(0).toUpperCase() + e.value.slice(1).toLowerCase();\n      return e;\n    });\n\n    this.displayedColumns.map((e) => {\n      if (e.value.match(/^[a-zA-ZáéíóúÁÉÍÓÚñÑ ]*$/) && e.key.match(/^[a-zA-Z ]*$/)) {\n        this.isValidateComponent = true;\n        return e;\n      } else {\n        this.isValidateComponent = false;\n        throw new Error(\n          'The displayedColumns value must not contain numbers or symbols and the key must not contain numbers, symbols or accents'\n        );\n      }\n    });\n  }\n\n  public allSelected($event: any): void {\n    if (!$event.checked) {\n      this.checkbox.map((e) => this.renderer.setProperty(e.nativeElement, 'checked', false));\n      this.DataSelectedArr = [];\n    } else {\n      this.checkbox.map((e) => this.renderer.setProperty(e.nativeElement, 'checked', true));\n      this.DataSelectedArr = this.dataSource;\n    }\n\n    this.dataSelected.emit(this.DataSelectedArr);\n  }\n\n  public selectedRow($event: any): void {\n    const index = this.inputCheckArr.indexOf($event);\n\n    if ($event.checked) {\n      this.DataSelectedArr.push(this.dataSource[index]);\n    } else {\n      this.DataSelectedArr = this.DataSelectedArr.filter((_, i) => i !== index);\n    }\n\n    this.dataSelected.emit(this.DataSelectedArr);\n  }\n}\n","<div class=\"section-bad-practices\">\n  <h3>Malas prácticas</h3>\n\n  <ul class=\"usability\">\n    <li class=\"dont\" *ngFor=\"let practice of practices\">\n      <p [innerHTML]=\"practice\"></p>\n    </li>\n  </ul>\n</div>\n","import { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-bad-practices',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './bad-practices.component.html',\n  styleUrls: ['./bad-practices.component.scss']\n})\nexport class BadPracticesComponent {\n  @Input() public practices: string[] = [];\n}\n","<div class=\"section-best-practices\">\n  <h3>Buenas prácticas</h3>\n\n  <ul class=\"usability\">\n    <li class=\"do\" *ngFor=\"let practice of practices\">\n      <p [innerHTML]=\"practice\"></p>\n    </li>\n  </ul>\n</div>\n","import { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-best-practices',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './best-practices.component.html',\n  styleUrls: ['./best-practices.component.scss']\n})\nexport class BestPracticesComponent {\n  @Input() public practices: string[] = [];\n}\n","<div class=\"example-wrapper\">\n  <div class=\"example-viewer\">\n    <p>{{ title }}</p>\n    <nav>\n      <ul class=\"nav flex-row nav-pills\">\n        <li class=\"nav-item d-flex\">\n          <a class=\"nav-link\" [class.active]=\"isOpenCode\" (click)=\"isOpenCode = !isOpenCode\">\n            <span>{{ linkCode }}</span>\n          </a>\n        </li>\n      </ul>\n    </nav>\n  </div>\n  <div class=\"wrapper\">\n    <nav *ngIf=\"isOpenCode && isNavCode\">\n      <ul class=\"nav flex-row nav-pills\">\n        <li class=\"nav-item d-flex\">\n          <a class=\"nav-link\" [class.active]=\"isWindowHTML\" (click)=\"isWindowHTML = true\">\n            <span>HTML</span>\n          </a>\n          <a class=\"nav-link\" [class.active]=\"!isWindowHTML\" (click)=\"isWindowHTML = false\">\n            <span>TS</span>\n          </a>\n        </li>\n      </ul>\n    </nav>\n    <ng-container *ngIf=\"!isOpenCode; else codeTemplate\">\n      <ng-content select=\"[component]\"></ng-content>\n    </ng-container>\n\n    <ng-template #codeTemplate>\n      <ng-container *ngIf=\"isWindowHTML; else windowTs\">\n        <ng-content select=\"[component-html]\"></ng-content>\n      </ng-container>\n    </ng-template>\n\n    <ng-template #windowTs>\n      <ng-content select=\"[component-ts]\"></ng-content>\n    </ng-template>\n  </div>\n</div>\n","import { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-viewer',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './viewer.component.html',\n  styleUrls: ['./viewer.component.scss']\n})\nexport class ViewerComponent {\n  @Input() public title!: string;\n  @Input() public isNavCode: boolean = false;\n\n  public isOpenCode: boolean = false;\n  public isWindowHTML: boolean = true;\n\n  get linkCode(): string {\n    return this.isOpenCode ? 'Esconder codigo' : 'Mostrar codigo';\n  }\n}\n","import { AfterViewInit, Directive, ElementRef, Renderer2 } from '@angular/core';\n\n@Directive({\n  selector: '[appClipboard]',\n  standalone: true\n})\nexport class ClipboardDirective implements AfterViewInit {\n  constructor(private readonly host: ElementRef, private readonly renderer: Renderer2) {}\n\n  ngAfterViewInit(): void {\n    if (navigator.clipboard) {\n      const button = this.host.nativeElement.closest('pre').querySelector('button');\n      this.renderer.listen(button, 'click', this.clipboard);\n    }\n  }\n\n  public clipboard(event: PointerEvent): void {\n    const button = event.target as HTMLButtonElement;\n    const pre = button?.parentElement;\n    const code = pre?.querySelector('code');\n    const text = code?.innerText;\n    navigator.clipboard.writeText(text!);\n    button.innerText = 'Codigo copiado!';\n\n    setTimeout(() => {\n      button.innerText = 'Copiar';\n    }, 1000);\n  }\n}\n"],"x_google_ignoreList":[]}