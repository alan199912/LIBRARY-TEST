{"version":3,"file":"471.ad094e997af6d007.js","mappings":"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","names":["i0","OTableComponent","constructor","renderer","this","EventEmitter","ngOnInit","componentValidations","ngAfterViewInit","checkbox","map","e","inputCheckArr","push","nativeElement","isValidateComponent","displayedColumns","length","dataSource","Error","key","value","trim","charAt","toUpperCase","slice","toLowerCase","match","allSelected","$event","checked","setProperty","DataSelectedArr","dataSelected","emit","selectedRow","index","indexOf","filter","_","i","selectors","CommonModule","i1","BestPracticesComponent","ViewerComponent","linkCode","isOpenCode","BreadcrumbService","BehaviorSubject","actualRoute","name","routes","url","factory","OBreadcrumbComponent","router","breadcrumbService","Subject","breadcrumb$","pipe","takeUntil","onDestroy$","subscribe","breadcrumb","Object","entries","getReversedRoutes","getPaths","events","event","NavigationEnd","startWith","next","split","forEach","item","isNaN","formatedName","formatedUrl","path","join","route","pop","reverse","o","id","ngOnDestroy","complete","i3","BreadcrumbApiComponent","BREADCRUMB_INTERFACE1","BREADCRUMB_INTERFACE2","DATA_SOURCE_BREADCRUMB","COLUMNS","component","BreadcrumbOverviewComponent","BREADCRUMB_BEST_PRACTICES","BreadcrumbExamplesComponent","BREADCRUMB_EXAMPLE_TS","pathMatch","redirectTo","BreadcrumbRoutingModule","RouterModule","BreadcrumbModule","ONavModule","ClipboardDirective","host","navigator","clipboard","button","closest","querySelector","listen","target","pre","g","parentElement","code","h","writeText","innerText","setTimeout"],"sourceRoot":"webpack:///","sources":["./projects/ngx-obelisco/src/lib/components/o-table/o-table.component.html","./projects/ngx-obelisco/src/lib/components/o-table/o-table.component.ts","./src/app/components/best-practices/best-practices.component.html","./src/app/components/best-practices/best-practices.component.ts","./src/app/components/viewer/viewer.component.html","./src/app/components/viewer/viewer.component.ts","./projects/ngx-obelisco/src/lib/core/services/breadcrumb/breadcrumb.service.ts","./projects/ngx-obelisco/src/lib/components/o-breadcrumb/o-breadcrumb.component.html","./projects/ngx-obelisco/src/lib/components/o-breadcrumb/o-breadcrumb.component.ts","./src/app/modules/section-components/breadcrumb/pages/breadcrumb-api/breadcrumb-api.component.ts","./src/app/modules/section-components/breadcrumb/pages/breadcrumb-api/breadcrumb-api.component.html","./src/app/modules/section-components/breadcrumb/breadcrumb-routing.module.ts","./src/app/modules/section-components/breadcrumb/pages/breadcrumb-overview/breadcrumb-overview.component.ts","./src/app/modules/section-components/breadcrumb/pages/breadcrumb-overview/breadcrumb-overview.component.html","./src/app/modules/section-components/breadcrumb/pages/breadcrumb-examples/breadcrumb-examples.component.ts","./src/app/modules/section-components/breadcrumb/pages/breadcrumb-examples/breadcrumb-examples.component.html","./src/app/modules/section-components/breadcrumb/breadcrumb.module.ts","./src/app/shared/directives/copy/clipboard.directive.ts"],"sourcesContent":["<table\n  *ngIf=\"isValidateComponent\"\n  class=\"table\"\n  [ngClass]=\"{ 'table-bordered': isBordered, 'table-striped': isStriped, 'table-hover': isHover }\"\n>\n  <thead>\n    <tr>\n      <th scope=\"col\" *ngIf=\"isSelectable\">\n        <input type=\"checkbox\" aria-label=\"checkbox\" (change)=\"allSelected($event.target)\" />\n      </th>\n      <th scope=\"col\" *ngFor=\"let column of displayedColumns\">{{ column.value }}</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr *ngFor=\"let data of dataSource\">\n      <td *ngIf=\"isSelectable\">\n        <input #checkbox type=\"checkbox\" aria-label=\"checkbox\" (change)=\"selectedRow($event.target)\" />\n      </td>\n      <td *ngFor=\"let column of displayedColumns\" [innerHTML]=\"data[column.key]\"></td>\n    </tr>\n  </tbody>\n</table>\n","import { CommonModule } from '@angular/common';\nimport {\n  OnInit,\n  AfterViewInit,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  QueryList,\n  ViewChildren,\n  Renderer2\n} from '@angular/core';\nimport { Column } from '../../core/models/table.models';\n\n@Component({\n  selector: 'o-table',\n  templateUrl: './o-table.component.html',\n  styleUrls: ['./o-table.component.scss'],\n  standalone: true,\n  imports: [CommonModule]\n})\nexport class OTableComponent implements OnInit, AfterViewInit {\n  public isValidateComponent: boolean = false;\n\n  @Input() public displayedColumns: Column[] = [];\n  @Input() public dataSource: any[] = [];\n  @Input() public isBordered: boolean = false;\n  @Input() public isStriped: boolean = false;\n  @Input() public isHover: boolean = false;\n  @Input() public isSelectable: boolean = false;\n  @Output() public dataSelected = new EventEmitter<any>();\n\n  private inputCheckArr: ElementRef[] = [];\n  private DataSelectedArr: any[] = [];\n\n  @ViewChildren('checkbox') public checkbox!: QueryList<ElementRef>;\n\n  constructor(private readonly renderer: Renderer2) {}\n\n  public ngOnInit(): void {\n    this.componentValidations();\n  }\n\n  public ngAfterViewInit(): void {\n    this.checkbox.map((e) => {\n      this.inputCheckArr.push(e.nativeElement);\n    });\n  }\n\n  /**\n   * @description\n   * This method is used to validate the component\n   * For this component to work, the following conditions must be met:\n   * 1. The displayedColumns and displayedColumns property must be filled\n   * 2. The displayedColumns property must be has \"values\" and \"keys\" not null\n   * 3. The displayedColumns is trimmed for spaces\n   * 4. The displayedColumns is converted to capitalization\n   * 5. The displayedColumns is validated if \"value\" contains numbers or special characters and \"key\" contains numbers, special characters or accents\n   * @returns void\n   */\n  private componentValidations(): void {\n    this.isValidateComponent = this.displayedColumns.length > 0 && this.dataSource.length > 0;\n\n    if (!this.isValidateComponent) {\n      throw new Error('The displayedColumns and dataSource must not be empty');\n    }\n\n    this.displayedColumns.map((e) => {\n      if (e.key === '' || e.value === '') {\n        this.isValidateComponent = false;\n        throw new Error('The displayedColumns must not have null values');\n      }\n    });\n\n    this.displayedColumns.map((e) => (e.value = e.value.trim()));\n\n    this.displayedColumns = this.displayedColumns.map((e) => {\n      e.value = e.value.charAt(0).toUpperCase() + e.value.slice(1).toLowerCase();\n      return e;\n    });\n\n    this.displayedColumns.map((e) => {\n      if (e.value.match(/^[a-zA-ZáéíóúÁÉÍÓÚñÑ ]*$/) && e.key.match(/^[a-zA-Z ]*$/)) {\n        this.isValidateComponent = true;\n        return e;\n      } else {\n        this.isValidateComponent = false;\n        throw new Error(\n          'The displayedColumns value must not contain numbers or symbols and the key must not contain numbers, symbols or accents'\n        );\n      }\n    });\n  }\n\n  public allSelected($event: any): void {\n    if (!$event.checked) {\n      this.checkbox.map((e) => this.renderer.setProperty(e.nativeElement, 'checked', false));\n      this.DataSelectedArr = [];\n    } else {\n      this.checkbox.map((e) => this.renderer.setProperty(e.nativeElement, 'checked', true));\n      this.DataSelectedArr = this.dataSource;\n    }\n\n    this.dataSelected.emit(this.DataSelectedArr);\n  }\n\n  public selectedRow($event: any): void {\n    const index = this.inputCheckArr.indexOf($event);\n\n    if ($event.checked) {\n      this.DataSelectedArr.push(this.dataSource[index]);\n    } else {\n      this.DataSelectedArr = this.DataSelectedArr.filter((_, i) => i !== index);\n    }\n\n    this.dataSelected.emit(this.DataSelectedArr);\n  }\n}\n","<div class=\"section-best-practices\">\n  <h3>Buenas prácticas</h3>\n\n  <ul class=\"usability\">\n    <li class=\"do\" *ngFor=\"let practice of practices\">\n      <p [innerHTML]=\"practice\"></p>\n    </li>\n  </ul>\n</div>\n","import { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-best-practices',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './best-practices.component.html',\n  styleUrls: ['./best-practices.component.scss']\n})\nexport class BestPracticesComponent {\n  @Input() public practices: string[] = [];\n}\n","<div class=\"example-wrapper\">\n  <div class=\"example-viewer\">\n    <p>{{ title }}</p>\n    <nav>\n      <ul class=\"nav flex-row nav-pills\">\n        <li class=\"nav-item d-flex\">\n          <a class=\"nav-link\" [class.active]=\"isOpenCode\" (click)=\"isOpenCode = !isOpenCode\">\n            <span>{{ linkCode }}</span>\n          </a>\n        </li>\n      </ul>\n    </nav>\n  </div>\n  <div class=\"wrapper\">\n    <nav *ngIf=\"isOpenCode && isNavCode\">\n      <ul class=\"nav flex-row nav-pills\">\n        <li class=\"nav-item d-flex\">\n          <a class=\"nav-link\" [class.active]=\"isWindowHTML\" (click)=\"isWindowHTML = true\">\n            <span>HTML</span>\n          </a>\n          <a class=\"nav-link\" [class.active]=\"!isWindowHTML\" (click)=\"isWindowHTML = false\">\n            <span>TS</span>\n          </a>\n        </li>\n      </ul>\n    </nav>\n    <ng-container *ngIf=\"!isOpenCode; else codeTemplate\">\n      <ng-content select=\"[component]\"></ng-content>\n    </ng-container>\n\n    <ng-template #codeTemplate>\n      <ng-container *ngIf=\"isWindowHTML; else windowTs\">\n        <ng-content select=\"[component-html]\"></ng-content>\n      </ng-container>\n    </ng-template>\n\n    <ng-template #windowTs>\n      <ng-content select=\"[component-ts]\"></ng-content>\n    </ng-template>\n  </div>\n</div>\n","import { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-viewer',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './viewer.component.html',\n  styleUrls: ['./viewer.component.scss']\n})\nexport class ViewerComponent {\n  @Input() public title!: string;\n  @Input() public isNavCode: boolean = false;\n\n  public isOpenCode: boolean = false;\n  public isWindowHTML: boolean = true;\n\n  get linkCode(): string {\n    return this.isOpenCode ? 'Esconder codigo' : 'Mostrar codigo';\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { Breadcrumb } from '../../models/breadcrumb.models';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BreadcrumbService {\n  public breadcrumb$ = new BehaviorSubject<Breadcrumb>({\n    actualRoute: { name: '' },\n    routes: [],\n    url: ''\n  });\n}\n","<nav aria-label=\"breadcrumb\">\n  <ol class=\"breadcrumb\">\n    <li class=\"breadcrumb-item\"><a [routerLink]=\"['/']\">Inicio</a></li>\n    <li class=\"breadcrumb-item\" *ngFor=\"let route of routes; index as i\">\n      <a *ngIf=\"i !== routes.length - 1; else nameDefault\" [routerLink]=\"[route.url]\">\n        {{ route.name }}\n      </a>\n      <ng-template #nameDefault>{{ route?.name }}</ng-template>\n    </li>\n  </ol>\n</nav>\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Event, NavigationEnd, Router, RouterEvent, RouterModule } from '@angular/router';\nimport { filter, startWith, Subject, takeUntil } from 'rxjs';\nimport { BreadcrumbService } from '../../core/services/breadcrumb/breadcrumb.service';\nimport { BreadcrumbRoute } from '../../core/models/breadcrumb.models';\n\n@Component({\n  selector: 'o-breadcrumb',\n  standalone: true,\n  imports: [CommonModule, RouterModule],\n  templateUrl: './o-breadcrumb.component.html',\n  styleUrls: ['./o-breadcrumb.component.scss']\n})\nexport class OBreadcrumbComponent implements OnInit, OnDestroy {\n  public routes: BreadcrumbRoute[] = [];\n  public actualRoute!: BreadcrumbRoute;\n\n  private url!: string;\n  private onDestroy$ = new Subject<void>();\n\n  constructor(private readonly router: Router, private readonly breadcrumbService: BreadcrumbService) {}\n\n  ngOnInit(): void {\n    this.breadcrumbService.breadcrumb$.pipe(takeUntil(this.onDestroy$)).subscribe((breadcrumb) => {\n      if (\n        Object.entries(breadcrumb).length !== 0 &&\n        breadcrumb.routes.length !== 0 &&\n        breadcrumb.actualRoute.name !== '' &&\n        breadcrumb.url !== ''\n      ) {\n        this.routes = breadcrumb.routes;\n        this.actualRoute = breadcrumb.actualRoute;\n        this.url = breadcrumb.url;\n        this.getReversedRoutes();\n      }\n    });\n    if (this.routes.length === 0 && !this.actualRoute) {\n      this.getPaths();\n      return;\n    }\n  }\n\n  private getPaths(): void {\n    this.router.events\n      .pipe(\n        takeUntil(this.onDestroy$),\n        filter((event) => event instanceof NavigationEnd),\n        startWith(this.router)\n      )\n      .subscribe({\n        next: (event: any) => {\n          event = event as RouterEvent;\n          this.routes = [];\n          event.url\n            .split('/')\n            .forEach(\n              (item: string, index: number) =>\n                (item !== '' || isNaN(+item) || item.length > 2) &&\n                this.routes.push({ name: this.formatedName(item), url: this.formatedUrl(item, event.url) })\n            );\n        }\n      });\n  }\n\n  private formatedName(path: string): string {\n    return (path && path[0].toUpperCase() + path.split('-').join(' ').slice(1)) || '';\n  }\n\n  private formatedUrl(url: string, route: string): string {\n    return route.split(url)[0] + url;\n  }\n\n  private getReversedRoutes(): void {\n    if (!this.actualRoute) {\n      this.actualRoute = this.routes[this.routes.length - 1];\n      this.routes.pop();\n    }\n\n    this.routes = [...this.routes].reverse();\n    this.routes = [...this.routes, this.actualRoute];\n    this.routes = this.routes.map((route) => (!route.url ? { ...route, url: `/${this.url}/${route.id}` } : route));\n  }\n\n  ngOnDestroy(): void {\n    this.onDestroy$.next();\n    this.onDestroy$.complete();\n  }\n}\n","import { Component } from '@angular/core';\nimport {\n  BREADCRUMB_INTERFACE1,\n  BREADCRUMB_INTERFACE2,\n  DATA_SOURCE_BREADCRUMB\n} from 'src/app/constants/breadcrumb.constants';\nimport { COLUMNS } from 'src/app/constants/components.constants';\n\n@Component({\n  selector: 'app-breadcrumb-api',\n  templateUrl: './breadcrumb-api.component.html',\n  styleUrls: ['./breadcrumb-api.component.scss']\n})\nexport class BreadcrumbApiComponent {\n  public exampleInterface1 = BREADCRUMB_INTERFACE1;\n  public exampleInterface2 = BREADCRUMB_INTERFACE2;\n  public dataSource = DATA_SOURCE_BREADCRUMB;\n  public columns = COLUMNS;\n}\n","<section class=\"section-api\">\n  <div class=\"section-title\">\n    <h2>Referencia de API para el componente Pan de miga de Obelisco</h2>\n    <pre class=\"code import\">\n      <code appPrism language=\"javascript\" code=\"import { OBreadcrumbComponent } from 'ngx-obelisco';\"></code>\n    </pre>\n  </div>\n\n  <h3>Etiqueta</h3>\n  <hr />\n\n  <div class=\"section-selector\">\n    <h4>OBreadcrumb</h4>\n    <p>Selector: <strong>o-breadcrumb</strong></p>\n\n    <div class=\"section-properties\">\n      <h5>Como se usa</h5>\n\n      <p>\n        Se puede usar agregando su etiqueta en el html para detectar desde la url que parámetros agregar al breadcrumb.\n      </p>\n\n      <pre class=\"code import\">\n        <code appPrism language=\"javascript\" code=\"import { BreadCrumbService } from 'ngx-obelisco';\"></code>\n      </pre>\n\n      <p>\n        Ver\n        <a [routerLink]=\"['/components/breadcrumb/examples']\" fragment=\"simple\">ejemplo simple</a>\n      </p>\n\n      <p class=\"mb-5\">\n        De otra forma se tiene que importar el servicio <strong>BreadCrumbService</strong> desde el componente a quien\n        le queremos cambiar o personalizar el breadcrumb y agregar el valor al BehaviorSubject\n        <strong>breadcrumb$</strong> la ruta actual, las rutas y la url de la siguiente manera:\n      </p>\n\n      <o-table [dataSource]=\"dataSource\" [displayedColumns]=\"columns\" [isBordered]=\"true\"></o-table>\n\n      <p>\n        Ver\n        <a [routerLink]=\"['/components/breadcrumb/examples']\" fragment=\"customRoutes\">ejemplo rutas personalizadas</a>\n      </p>\n    </div>\n\n    <div class=\"section-type mt-5\">\n      <h4>Breadcrumb</h4>\n      <p>Permite establecer los valores de la propiedad <strong>breadcrumb$</strong>.</p>\n\n      <div class=\"section-interface\">\n        <pre class=\"code import\">\n          <code appPrism language=\"javascript\">{{ exampleInterface1 }}</code>\n        </pre>\n      </div>\n\n      <div class=\"section-interface\">\n        <pre class=\"code import\">\n          <code appPrism language=\"javascript\">{{ exampleInterface2 }}</code>\n        </pre>\n      </div>\n    </div>\n  </div>\n</section>\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { BreadcrumbApiComponent } from './pages/breadcrumb-api/breadcrumb-api.component';\nimport { BreadcrumbExamplesComponent } from './pages/breadcrumb-examples/breadcrumb-examples.component';\nimport { BreadcrumbOverviewComponent } from './pages/breadcrumb-overview/breadcrumb-overview.component';\n\nconst routes: Routes = [\n  { path: 'overview', component: BreadcrumbOverviewComponent },\n  { path: 'api', component: BreadcrumbApiComponent },\n  { path: 'examples', component: BreadcrumbExamplesComponent },\n  { path: '**', pathMatch: 'full', redirectTo: 'overview' }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class BreadcrumbRoutingModule {}\n","import { Component } from '@angular/core';\nimport { BREADCRUMB_BEST_PRACTICES } from 'src/app/constants/breadcrumb.constants';\n\n@Component({\n  selector: 'app-breadcrumb-overview',\n  templateUrl: './breadcrumb-overview.component.html',\n  styleUrls: ['./breadcrumb-overview.component.scss']\n})\nexport class BreadcrumbOverviewComponent {\n  public bestPractices = BREADCRUMB_BEST_PRACTICES;\n}\n","<section class=\"section-overview\">\n  <p class=\"lead\">\n    Las migas de pan brindan un sistema de navegación secundaria y muestran el contexto para ayudar a los usuarios a\n    comprender dónde se encuentran.\n  </p>\n\n  <h2>Tipos de migas de pan</h2>\n\n  <h3>Desktop</h3>\n  <p>\n    Las rutas de navegación muestran dónde se encuentra la página actual en la jerarquía del sitio web. Utilizar migas\n    de pan refuerza la estructura del sitio. En desktop, se ve completo.\n  </p>\n\n  <h3>Mobile</h3>\n\n  <p>Mientras que en dispositivos móviles, se ve de manera reducida, solo para permitir un regreso.</p>\n\n  <div class=\"section-design\">\n    <h2>Diseño y estructura (Contexto de uso)</h2>\n\n    <h3>Desktop</h3>\n\n    <p>\n      Se ubican sobre el título de la página y muestran el progreso jerárquico desde el nivel de elemento más alto hasta\n      el más bajo. Los niveles que posean más de 30 caracteres se truncarán y agregarán tres puntos (…) al final para\n      visualizar que hay más texto en dicho nivel.\n    </p>\n  </div>\n\n  <img\n    class=\"card-img-top\"\n    src=\"https://gcba.github.io/estandares/componentes/breadcrumb/breadcrumb.png\"\n    alt=\"imagen sobre carteles de alerta\"\n  />\n\n  <div class=\"section-usability\">\n    <h2>Usabilidad</h2>\n\n    <app-best-practices [practices]=\"bestPractices\"></app-best-practices>\n  </div>\n</section>\n","import { Component, OnInit } from '@angular/core';\nimport { BreadcrumbService } from 'projects/ngx-obelisco/src/public-api';\nimport { BREADCRUMB_EXAMPLE_TS } from 'src/app/constants/breadcrumb.constants';\n\n@Component({\n  selector: 'app-breadcrumb-examples',\n  templateUrl: './breadcrumb-examples.component.html',\n  styleUrls: ['./breadcrumb-examples.component.scss']\n})\nexport class BreadcrumbExamplesComponent implements OnInit {\n  public exampleTS = BREADCRUMB_EXAMPLE_TS;\n  constructor(private readonly breadcrumb: BreadcrumbService) {}\n\n  ngOnInit(): void {\n    this.breadcrumb.breadcrumb$.next({\n      actualRoute: { name: 'ruta actual' },\n      routes: [\n        { name: 'ruta 1', id: '1' },\n        { name: 'ruta 2', id: '5', url: '/routes-2/5' }\n      ],\n      url: 'url-ruta'\n    });\n  }\n}\n","<section class=\"section-example\">\n  <app-viewer title=\"Simple\" id=\"simple\">\n    <nav aria-label=\"breadcrumb\" component>\n      <ol class=\"breadcrumb\">\n        <li class=\"breadcrumb-item\">\n          <a [routerLink]=\"['/']\">Inicio</a>\n        </li>\n        <li class=\"breadcrumb-item\">\n          <a [routerLink]=\"['/components']\">Components</a>\n        </li>\n        <li class=\"breadcrumb-item\">\n          <a [routerLink]=\"['/components/breadcrumb']\">Breadcrumb</a>\n        </li>\n        <li class=\"breadcrumb-item\">Examples</li>\n      </ol>\n    </nav>\n\n    <pre appClipboard component-html class=\"code\">\n      <button class=\"btn btn-clipboard\">Copiar</button>\n      <code appPrism language=\"html\" code=\"<o-breadcrumb></o-breadcrumb>\"></code>\n    </pre>\n  </app-viewer>\n\n  <app-viewer title=\"Rutas personalizadas\" [isNavCode]=\"true\" id=\"customRoutes\">\n    <o-breadcrumb component></o-breadcrumb>\n\n    <pre appClipboard component-html class=\"code\">\n      <button class=\"btn btn-clipboard\">Copiar</button>\n      <code appPrism language=\"html\" code=\"<o-breadcrumb></o-breadcrumb>\"></code>\n    </pre>\n\n    <pre appClipboard component-ts class=\"code\">\n      <button class=\"btn btn-clipboard\">Copiar</button>\n      <code appPrism language=\"javascript\">{{ exampleTS }}</code>\n    </pre>\n  </app-viewer>\n</section>\n","import { BestPracticesComponent } from './../../../components/best-practices/best-practices.component';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OBreadcrumbComponent, ONavModule, OTableComponent } from 'projects/ngx-obelisco/src/public-api';\n\nimport { BreadcrumbRoutingModule } from './breadcrumb-routing.module';\nimport { BreadcrumbComponent } from './breadcrumb.component';\nimport { BreadcrumbApiComponent } from './pages/breadcrumb-api/breadcrumb-api.component';\nimport { BreadcrumbExamplesComponent } from './pages/breadcrumb-examples/breadcrumb-examples.component';\nimport { BreadcrumbOverviewComponent } from './pages/breadcrumb-overview/breadcrumb-overview.component';\nimport { ViewerComponent } from 'src/app/components/viewer/viewer.component';\nimport { ClipboardDirective } from 'src/app/shared/directives/copy/clipboard.directive';\nimport { PrismDirective } from 'src/app/shared/directives/prism/prism.directive';\n\n@NgModule({\n  declarations: [BreadcrumbComponent, BreadcrumbApiComponent, BreadcrumbExamplesComponent, BreadcrumbOverviewComponent],\n  imports: [\n    CommonModule,\n    BreadcrumbRoutingModule,\n    ONavModule,\n    BestPracticesComponent,\n    ViewerComponent,\n    OBreadcrumbComponent,\n    ClipboardDirective,\n    PrismDirective,\n    OTableComponent\n  ]\n})\nexport class BreadcrumbModule {}\n","import { AfterViewInit, Directive, ElementRef, Renderer2 } from '@angular/core';\n\n@Directive({\n  selector: '[appClipboard]',\n  standalone: true\n})\nexport class ClipboardDirective implements AfterViewInit {\n  constructor(private readonly host: ElementRef, private readonly renderer: Renderer2) {}\n\n  ngAfterViewInit(): void {\n    if (navigator.clipboard) {\n      const button = this.host.nativeElement.closest('pre').querySelector('button');\n      this.renderer.listen(button, 'click', this.clipboard);\n    }\n  }\n\n  public clipboard(event: PointerEvent): void {\n    const button = event.target as HTMLButtonElement;\n    const pre = button?.parentElement;\n    const code = pre?.querySelector('code');\n    const text = code?.innerText;\n    navigator.clipboard.writeText(text!);\n    button.innerText = 'Codigo copiado!';\n\n    setTimeout(() => {\n      button.innerText = 'Copiar';\n    }, 1000);\n  }\n}\n"],"x_google_ignoreList":[]}