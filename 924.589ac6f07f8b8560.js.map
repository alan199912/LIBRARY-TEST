{"version":3,"file":"924.589ac6f07f8b8560.js","mappings":"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","names":["i0","OTableComponent","constructor","renderer","this","EventEmitter","ngOnInit","componentValidations","ngAfterViewInit","checkbox","map","e","inputCheckArr","push","nativeElement","isValidateComponent","displayedColumns","length","dataSource","Error","key","value","trim","charAt","toUpperCase","slice","toLowerCase","match","allSelected","$event","checked","setAttribute","DataSelectedArr","dataSelected","emit","selectedRow","index","indexOf","filter","_","i","selectors","CommonModule","i1","BadPracticesComponent","BestPracticesComponent","ViewerComponent","linkCode","isOpenCode","OStatusBarComponent","AbstractStep","statusBarService","super","Subject","getNext","pipe","takeUntil","onDestroy$","subscribe","nextStep","getPrevious","previousStep","steps","step","active","completed","setpsService","isFirstStep","indexActive","findIndex","stopSteps","stopEmmiter","ngOnDestroy","next","complete","i2","StatusBarApiComponent","COLUMNS","STATUS_BAR_DATA_SOURCE_PROPERTIES","STATUS_BAR_DATA_SOURCE_METHODS","STATUS_BAR_INTERFACE","StepNextDirective","stepService","element","initialize","stop","onClick","ctx","StepPreviousDirective","event","previous","StatusBarDemoComponent","STATUS_BAR_STEPS","isDisabledPrevious","routes","path","component","StatusBarExampleComponent","STATUS_BAR_EXAMPLE_DIRECTIVE","STATUS_BAR_EXMAPLE_DIRECTIVE_TS","STATUS_BAR_EXAMPLE_FUNCTIONALITY_HTML","STATUS_BAR_EXMAPLE_FUNCTIONALITY_TS","pathMatch","redirectTo","StatusBarRoutingModule","RouterModule","StatusBarModule","ONavModule","ClipboardDirective","host","navigator","clipboard","button","closest","querySelector","listen","target","pre","l","parentElement","code","m","writeText","f","innerText","setTimeout"],"sourceRoot":"webpack:///","sources":["./projects/ngx-obelisco/src/lib/components/o-table/o-table.component.html","./projects/ngx-obelisco/src/lib/components/o-table/o-table.component.ts","./src/app/components/bad-practices/bad-practices.component.html","./src/app/components/bad-practices/bad-practices.component.ts","./src/app/components/best-practices/best-practices.component.html","./src/app/components/best-practices/best-practices.component.ts","./src/app/components/viewer/viewer.component.html","./src/app/components/viewer/viewer.component.ts","./projects/ngx-obelisco/src/lib/components/o-status-bar/o-status-bar.component.html","./projects/ngx-obelisco/src/lib/components/o-status-bar/o-status-bar.component.ts","./src/app/modules/section-components/status-bar/pages/status-bar-api/status-bar-api.component.ts","./src/app/modules/section-components/status-bar/pages/status-bar-api/status-bar-api.component.html","./projects/ngx-obelisco/src/lib/shared/directives/step-next/step-next.directive.ts","./projects/ngx-obelisco/src/lib/shared/directives/step-previous/step-previous.directive.ts","./src/app/modules/section-components/status-bar/pages/status-bar-example/status-bar-demo/status-bar-demo.component.html","./src/app/modules/section-components/status-bar/pages/status-bar-example/status-bar-demo/status-bar-demo.component.ts","./src/app/modules/section-components/status-bar/status-bar-routing.module.ts","./src/app/modules/section-components/status-bar/pages/status-bar-example/status-bar-example.component.ts","./src/app/modules/section-components/status-bar/pages/status-bar-example/status-bar-example.component.html","./src/app/modules/section-components/status-bar/status-bar.module.ts","./src/app/shared/directives/copy/clipboard.directive.ts"],"sourcesContent":["<table\n  *ngIf=\"isValidateComponent\"\n  class=\"table\"\n  [ngClass]=\"{ 'table-bordered': isBordered, 'table-striped': isStriped, 'table-hover': isHover }\"\n>\n  <thead>\n    <tr>\n      <th scope=\"col\" *ngIf=\"isSelectable\">\n        <input type=\"checkbox\" aria-label=\"checkbox\" (change)=\"allSelected($event.target)\" />\n      </th>\n      <th scope=\"col\" *ngFor=\"let column of displayedColumns\">{{ column.value }}</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr *ngFor=\"let data of dataSource\">\n      <td *ngIf=\"isSelectable\">\n        <input #checkbox type=\"checkbox\" aria-label=\"checkbox\" (change)=\"selectedRow($event.target)\" />\n      </td>\n      <td *ngFor=\"let column of displayedColumns\" [innerHTML]=\"data[column.key]\"></td>\n    </tr>\n  </tbody>\n</table>\n","import { CommonModule } from '@angular/common';\nimport {\n  OnInit,\n  AfterViewInit,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  QueryList,\n  ViewChildren,\n  Renderer2\n} from '@angular/core';\nimport { Column } from '../../core/models/table.models';\n\n@Component({\n  selector: 'o-table',\n  templateUrl: './o-table.component.html',\n  styleUrls: ['./o-table.component.scss'],\n  standalone: true,\n  imports: [CommonModule]\n})\nexport class OTableComponent implements OnInit, AfterViewInit {\n  public isValidateComponent: boolean = false;\n\n  @Input() public displayedColumns: Column[] = [];\n  @Input() public dataSource: any[] = [];\n  @Input() public isBordered: boolean = false;\n  @Input() public isStriped: boolean = false;\n  @Input() public isHover: boolean = false;\n  @Input() public isSelectable: boolean = false;\n  @Output() public dataSelected = new EventEmitter<any>();\n\n  private inputCheckArr: ElementRef[] = [];\n  private DataSelectedArr: any[] = [];\n\n  @ViewChildren('checkbox') public checkbox!: QueryList<ElementRef>;\n\n  constructor(private readonly renderer: Renderer2) {}\n\n  public ngOnInit(): void {\n    this.componentValidations();\n  }\n\n  public ngAfterViewInit(): void {\n    this.checkbox.map((e) => {\n      this.inputCheckArr.push(e.nativeElement);\n    });\n  }\n\n  /**\n   * @description\n   * This method is used to validate the component\n   * For this component to work, the following conditions must be met:\n   * 1. The displayedColumns and displayedColumns property must be filled\n   * 2. The displayedColumns property must be has \"values\" and \"keys\" not null\n   * 3. The displayedColumns is trimmed for spaces\n   * 4. The displayedColumns is converted to capitalization\n   * 5. The displayedColumns is validated if \"value\" contains numbers or special characters and \"key\" contains numbers, special characters or accents\n   * @returns void\n   */\n  private componentValidations(): void {\n    this.isValidateComponent = this.displayedColumns.length > 0 && this.dataSource.length > 0;\n\n    if (!this.isValidateComponent) {\n      throw new Error('The displayedColumns and dataSource must not be empty');\n    }\n\n    this.displayedColumns.map((e) => {\n      if (e.key === '' || e.value === '') {\n        this.isValidateComponent = false;\n        throw new Error('The displayedColumns must not have null values');\n      }\n    });\n\n    this.displayedColumns.map((e) => (e.value = e.value.trim()));\n\n    this.displayedColumns = this.displayedColumns.map((e) => {\n      e.value = e.value.charAt(0).toUpperCase() + e.value.slice(1).toLowerCase();\n      return e;\n    });\n\n    this.displayedColumns.map((e) => {\n      if (e.value.match(/^[a-zA-ZáéíóúÁÉÍÓÚñÑ ]*$/) && e.key.match(/^[a-zA-Z ]*$/)) {\n        this.isValidateComponent = true;\n        return e;\n      } else {\n        this.isValidateComponent = false;\n        throw new Error(\n          'The displayedColumns value must not contain numbers or symbols and the key must not contain numbers, symbols or accents'\n        );\n      }\n    });\n  }\n\n  public allSelected($event: any): void {\n    if (!$event.checked) {\n      this.checkbox.map((e) => this.renderer.setAttribute(e.nativeElement, 'checked', 'false'));\n      this.DataSelectedArr = [];\n    } else {\n      this.checkbox.map((e) => this.renderer.setAttribute(e.nativeElement, 'checked', 'true'));\n      this.DataSelectedArr = this.dataSource;\n    }\n\n    this.dataSelected.emit(this.DataSelectedArr);\n  }\n\n  public selectedRow($event: any): void {\n    const index = this.inputCheckArr.indexOf($event);\n\n    if ($event.checked) {\n      this.DataSelectedArr.push(this.dataSource[index]);\n    } else {\n      this.DataSelectedArr = this.DataSelectedArr.filter((_, i) => i !== index);\n    }\n\n    this.dataSelected.emit(this.DataSelectedArr);\n  }\n}\n","<div class=\"section-bad-practices\">\n  <h3>Malas prácticas</h3>\n\n  <ul class=\"usability\">\n    <li class=\"dont\" *ngFor=\"let practice of practices\">\n      <p [innerHTML]=\"practice\"></p>\n    </li>\n  </ul>\n</div>\n","import { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-bad-practices',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './bad-practices.component.html',\n  styleUrls: ['./bad-practices.component.scss']\n})\nexport class BadPracticesComponent {\n  @Input() public practices: string[] = [];\n}\n","<div class=\"section-best-practices\">\n  <h3>Buenas prácticas</h3>\n\n  <ul class=\"usability\">\n    <li class=\"do\" *ngFor=\"let practice of practices\">\n      <p [innerHTML]=\"practice\"></p>\n    </li>\n  </ul>\n</div>\n","import { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-best-practices',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './best-practices.component.html',\n  styleUrls: ['./best-practices.component.scss']\n})\nexport class BestPracticesComponent {\n  @Input() public practices: string[] = [];\n}\n","<div class=\"example-wrapper\">\n  <div class=\"example-viewer\">\n    <p>{{ title }}</p>\n    <nav>\n      <ul class=\"nav flex-row nav-pills\">\n        <li class=\"nav-item d-flex\">\n          <a class=\"nav-link\" [class.active]=\"isOpenCode\" (click)=\"isOpenCode = !isOpenCode\">\n            <span>{{ linkCode }}</span>\n          </a>\n        </li>\n      </ul>\n    </nav>\n  </div>\n  <div class=\"wrapper\">\n    <nav *ngIf=\"isOpenCode && isNavCode\">\n      <ul class=\"nav flex-row nav-pills\">\n        <li class=\"nav-item d-flex\">\n          <a class=\"nav-link\" [class.active]=\"isWindowHTML\" (click)=\"isWindowHTML = true\">\n            <span>HTML</span>\n          </a>\n          <a class=\"nav-link\" [class.active]=\"!isWindowHTML\" (click)=\"isWindowHTML = false\">\n            <span>TS</span>\n          </a>\n        </li>\n      </ul>\n    </nav>\n    <ng-container *ngIf=\"!isOpenCode; else codeTemplate\">\n      <ng-content select=\"[component]\"></ng-content>\n    </ng-container>\n\n    <ng-template #codeTemplate>\n      <ng-container *ngIf=\"isWindowHTML; else windowTs\">\n        <ng-content select=\"[component-html]\"></ng-content>\n      </ng-container>\n    </ng-template>\n\n    <ng-template #windowTs>\n      <ng-content select=\"[component-ts]\"></ng-content>\n    </ng-template>\n  </div>\n</div>\n","import { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-viewer',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './viewer.component.html',\n  styleUrls: ['./viewer.component.scss']\n})\nexport class ViewerComponent {\n  @Input() public title!: string;\n  @Input() public isNavCode: boolean = false;\n\n  public isOpenCode: boolean = false;\n  public isWindowHTML: boolean = true;\n\n  get linkCode(): string {\n    return this.isOpenCode ? 'Esconder codigo' : 'Mostrar codigo';\n  }\n}\n","<div class=\"progression-container\">\n  <ul class=\"progression\" [class.expanded]=\"isExpanded\">\n    <li\n      class=\"progression-item\"\n      [class.completed]=\"step.completed\"\n      [class.active]=\"step.active\"\n      aria-expanded=\"true\"\n      *ngFor=\"let step of steps\"\n    >\n      <p class=\"progression-title\">{{ step.title }}</p>\n      <p class=\"progression-subtitle\">\n        {{ step.description }}\n      </p>\n    </li>\n  </ul>\n  <button type=\"button\" class=\"progression-link\" (click)=\"isExpanded = !isExpanded\">Menos detalles</button>\n</div>\n","import { CommonModule } from '@angular/common';\nimport { Component, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { Subject, takeUntil } from 'rxjs';\nimport { AbstractStep } from '../../core/abstracts/step.abstracts';\nimport { Steps } from '../../core/models/statusBar.models';\nimport { StepService } from '../../core/services/step/step.service';\n\n@Component({\n  selector: 'o-status-bar',\n  templateUrl: './o-status-bar.component.html',\n  styleUrls: ['./o-status-bar.component.scss'],\n  standalone: true,\n  imports: [CommonModule]\n})\nexport class OStatusBarComponent extends AbstractStep implements OnInit, OnDestroy {\n  @Input() public steps: Steps[] = [];\n  @Input() public isExpanded = false;\n\n  @Output() public override stopSteps = new EventEmitter<boolean>(false);\n\n  private readonly onDestroy$ = new Subject<void>();\n\n  constructor(private readonly statusBarService: StepService) {\n    super(statusBarService);\n  }\n\n  public ngOnInit(): void {\n    this.statusBarService.getNext.pipe(takeUntil(this.onDestroy$)).subscribe(() => {\n      this.nextStep();\n    });\n\n    this.statusBarService.getPrevious.pipe(takeUntil(this.onDestroy$)).subscribe(() => {\n      this.previousStep();\n    });\n\n    this.steps = this.steps.map((step, index) => {\n      step.active = false;\n      step.completed = false;\n\n      if (index === 0) {\n        step.active = true;\n        step.completed = true;\n      }\n\n      return step;\n    });\n  }\n\n  public previousStep(): void {\n    this.setpsService.isFirstStep.emit(false);\n    const indexActive = this.steps.findIndex((step) => step.active);\n\n    if (indexActive === 0) {\n      this.setpsService.isFirstStep.emit(true);\n      return;\n    }\n\n    this.steps = this.steps.map((step, index) => {\n      if (index === indexActive) {\n        step.completed = false;\n        step.active = false;\n      } else if (index === indexActive - 1) {\n        step.active = true;\n      }\n\n      return step;\n    });\n  }\n\n  public nextStep(): void {\n    this.setpsService.isFirstStep.emit(false);\n    const indexActive = this.steps.findIndex((step) => step.active);\n    const lastStep = this.steps.length - 1;\n\n    if (indexActive === lastStep) {\n      this.stopSteps.emit(true);\n      this.setpsService.stopEmmiter.emit(true);\n      return;\n    }\n\n    this.steps = this.steps.map((step, index) => {\n      if (index === indexActive) {\n        step.completed = true;\n        step.active = false;\n      } else if (index === indexActive + 1) {\n        step.active = true;\n      }\n\n      return step;\n    });\n  }\n\n  public ngOnDestroy(): void {\n    this.onDestroy$.next();\n    this.onDestroy$.complete();\n  }\n}\n","import { Component } from '@angular/core';\nimport { COLUMNS } from 'src/app/constants/components.constants';\nimport {\n  STATUS_BAR_DATA_SOURCE_METHODS,\n  STATUS_BAR_DATA_SOURCE_PROPERTIES,\n  STATUS_BAR_INTERFACE\n} from 'src/app/constants/status-bar.constants';\n\n@Component({\n  selector: 'app-status-bar-api',\n  templateUrl: './status-bar-api.component.html',\n  styleUrls: ['./status-bar-api.component.scss']\n})\nexport class StatusBarApiComponent {\n  public columns = COLUMNS;\n  public dataSourceProperties = STATUS_BAR_DATA_SOURCE_PROPERTIES;\n  public dataSourceMethods = STATUS_BAR_DATA_SOURCE_METHODS;\n  public interface = STATUS_BAR_INTERFACE;\n}\n","<section class=\"section-api\">\n  <div class=\"section-title\">\n    <h2>Referencia de API para el componente Barra de estado de Obelisco</h2>\n    <pre class=\"code import\">\n      <code appPrism code=\"import { OStatusBarComponent } from 'ngx-obelisco';\"></code>\n    </pre>\n  </div>\n\n  <h3>Etiqueta</h3>\n  <hr />\n\n  <div class=\"section-selector\">\n    <h4>OStatusBar</h4>\n    <p>Selector: <strong>o-status-bar</strong></p>\n\n    <div class=\"section-properties\">\n      <h5>Como se usa</h5>\n\n      <p>\n        Se puede usar las directivas <strong>StepNextDirective</strong> y\n        <strong>StepPreviousDirective</strong> importado en el modulo donde se va a usar y agregarlo en botones\n      </p>\n      <pre class=\"code import\">\n        <code appPrism code=\"import { StepNextDirective } from 'ngx-obelisco';\"></code>\n      </pre>\n      <pre class=\"code import\">\n        <code appPrism code=\"import { StepPreviousDirective } from 'ngx-obelisco';\"></code>\n      </pre>\n\n      <p>\n        O de otra manera, se puede usar inyectando su servicio para inicializar los <strong>steps</strong> y luego darle\n        funcionalidad.\n      </p>\n\n      <pre class=\"code import\">\n        <code appPrism code=\"import { StepService } from 'ngx-obelisco';\"></code>\n      </pre>\n\n      <h5>Propiedades</h5>\n\n      <o-table\n        [displayedColumns]=\"columns\"\n        [dataSource]=\"dataSourceProperties\"\n        [isStriped]=\"true\"\n        [isBordered]=\"true\"\n      ></o-table>\n      <br />\n\n      <h5>Metodos</h5>\n      <o-table\n        [displayedColumns]=\"columns\"\n        [dataSource]=\"dataSourceMethods\"\n        [isStriped]=\"true\"\n        [isBordered]=\"true\"\n      ></o-table>\n    </div>\n\n    <br />\n\n    <div class=\"section-type\">\n      <h4>Steps</h4>\n      <p>Permite establecer los valores en la propiedad <strong>steps</strong>.</p>\n\n      <pre class=\"code import\">\n        <code appPrism>{{ interface }}</code>\n      </pre>\n    </div>\n  </div>\n</section>\n","import { Directive, ElementRef, HostListener, OnDestroy, OnInit, Renderer2 } from '@angular/core';\nimport { Subject, takeUntil } from 'rxjs';\nimport { StepService } from '../../../core/services/step/step.service';\n\n@Directive({\n  selector: '[oStepNext]',\n  standalone: true\n})\nexport class StepNextDirective implements OnInit, OnDestroy {\n  private onDestroy$ = new Subject<void>();\n\n  constructor(\n    private readonly stepService: StepService,\n    private readonly element: ElementRef,\n    private readonly renderer: Renderer2\n  ) {\n    this.stepService.initialize();\n  }\n\n  public ngOnInit(): void {\n    this.stepService.stopEmmiter.pipe(takeUntil(this.onDestroy$)).subscribe(() => {\n      this.stepService.stop();\n\n      this.renderer.setAttribute(this.element.nativeElement, 'disabled', 'true');\n    });\n  }\n\n  @HostListener('click') public onClick(): void {\n    this.stepService.next();\n  }\n\n  public ngOnDestroy(): void {\n    this.onDestroy$.next();\n    this.onDestroy$.complete();\n  }\n}\n","import { Directive, ElementRef, HostListener, OnDestroy, OnInit, Renderer2 } from '@angular/core';\nimport { Subject, takeUntil } from 'rxjs';\nimport { StepService } from '../../../core/services/step/step.service';\n\n@Directive({\n  selector: '[oStepPrevious]',\n  standalone: true\n})\nexport class StepPreviousDirective implements OnInit, OnDestroy {\n  private onDestroy$ = new Subject<void>();\n\n  constructor(\n    private readonly stepService: StepService,\n    private readonly element: ElementRef,\n    private readonly renderer: Renderer2\n  ) {\n    this.stepService.initialize();\n  }\n\n  public ngOnInit(): void {\n    this.renderer.setAttribute(this.element.nativeElement, 'disabled', 'true');\n\n    this.stepService.isFirstStep.pipe(takeUntil(this.onDestroy$)).subscribe((event) => {\n      this.renderer.setAttribute(this.element.nativeElement, 'disabled', `${event}`);\n    });\n\n    this.stepService.stopEmmiter.pipe(takeUntil(this.onDestroy$)).subscribe(() => {\n      this.stepService.stop();\n    });\n  }\n\n  @HostListener('click') public onClick(): void {\n    this.stepService.previous();\n  }\n\n  public ngOnDestroy(): void {\n    this.onDestroy$.next();\n    this.onDestroy$.complete();\n  }\n}\n","<div class=\"progression-container\">\n  <ul class=\"progression\" [class.expanded]=\"isExpanded\">\n    <li\n      class=\"progression-item\"\n      [class.completed]=\"step.completed\"\n      [class.active]=\"step.active\"\n      aria-expanded=\"true\"\n      *ngFor=\"let step of steps\"\n    >\n      <p class=\"progression-title\">{{ step.title }}</p>\n      <p class=\"progression-subtitle\">\n        {{ step.description }}\n      </p>\n    </li>\n  </ul>\n  <button type=\"button\" class=\"progression-link\" (click)=\"isExpanded = !isExpanded\">Menos detalles</button>\n</div>\n\n<br />\n\n<button class=\"btn btn-sm btn-link mr-2\" [disabled]=\"isDisabledPrevious\" (click)=\"previousStep()\">Anterior</button>\n<button class=\"btn btn-sm btn-link\" (click)=\"nextStep()\">Siguiente</button>\n","import { Component, OnInit } from '@angular/core';\nimport { STATUS_BAR_STEPS } from 'src/app/constants/status-bar.constants';\n\n@Component({\n  selector: 'app-status-bar-demo',\n  templateUrl: './status-bar-demo.component.html',\n  styleUrls: ['./status-bar-demo.component.scss']\n})\nexport class StatusBarDemoComponent implements OnInit {\n  public steps: any = STATUS_BAR_STEPS;\n  public isExpanded = true;\n  public isDisabledPrevious = false;\n\n  public ngOnInit() {\n    this.isDisabledPrevious = true;\n    this.steps = this.steps.map((step: any, index: number) => {\n      step.active = false;\n      step.completed = false;\n\n      if (index === 0) {\n        step.active = true;\n        step.completed = true;\n      }\n\n      return step;\n    });\n  }\n\n  public previousStep() {\n    const indexActive = this.steps.findIndex((step: any) => step.active);\n\n    this.steps = this.steps.map((step: any, index: any) => {\n      if (index === indexActive) {\n        step.completed = false;\n        step.active = false;\n      } else if (index === indexActive - 1) {\n        step.active = true;\n      }\n\n      return step;\n    });\n\n    if (indexActive === 1) {\n      this.isDisabledPrevious = true;\n      return;\n    }\n  }\n\n  public nextStep() {\n    this.isDisabledPrevious = false;\n    const indexActive = this.steps.findIndex((step: any) => step.active);\n    const lastStep = this.steps.length - 1;\n\n    if (indexActive === lastStep) {\n      return;\n    }\n\n    this.steps = this.steps.map((step: any, index: any) => {\n      if (index === indexActive) {\n        step.completed = true;\n        step.active = false;\n      } else if (index === indexActive + 1) {\n        step.active = true;\n      }\n\n      return step;\n    });\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { StatusBarApiComponent } from './pages/status-bar-api/status-bar-api.component';\nimport { StatusBarExampleComponent } from './pages/status-bar-example/status-bar-example.component';\n\nconst routes: Routes = [\n  { path: 'api', component: StatusBarApiComponent },\n  { path: 'examples', component: StatusBarExampleComponent },\n  { path: '**', pathMatch: 'full', redirectTo: 'api' }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class StatusBarRoutingModule {}\n","import { Component } from '@angular/core';\nimport {\n  STATUS_BAR_EXAMPLE_DIRECTIVE,\n  STATUS_BAR_EXMAPLE_DIRECTIVE_TS,\n  STATUS_BAR_EXAMPLE_FUNCTIONALITY_HTML,\n  STATUS_BAR_EXMAPLE_FUNCTIONALITY_TS,\n  STATUS_BAR_STEPS\n} from 'src/app/constants/status-bar.constants';\n\n@Component({\n  selector: 'app-status-bar-example',\n  templateUrl: './status-bar-example.component.html',\n  styleUrls: ['./status-bar-example.component.scss']\n})\nexport class StatusBarExampleComponent {\n  public steps = STATUS_BAR_STEPS;\n  public exampleDirectiveHTML = STATUS_BAR_EXAMPLE_DIRECTIVE;\n  public exampleDirectiveTS = STATUS_BAR_EXMAPLE_DIRECTIVE_TS;\n  public exampleFuncionalityHTML = STATUS_BAR_EXAMPLE_FUNCTIONALITY_HTML;\n  public exampleFuncionalityTS = STATUS_BAR_EXMAPLE_FUNCTIONALITY_TS;\n}\n","<section class=\"section-example\">\n  <app-viewer title=\"Con botones y directiva\" [isNavCode]=\"true\">\n    <div component>\n      <o-status-bar [steps]=\"steps\"></o-status-bar>\n      <br />\n      <button oStepPrevious class=\"btn btn-link btn-sm\">Anterior</button>\n      <button oStepNext class=\"btn btn-link btn-sm\">Siguiente</button>\n    </div>\n    <pre appClipboard component-html class=\"code\">\n      <button class=\"btn btn-clipboard\">Copiar</button>\n      <code appPrism language=\"html\">\n        {{ exampleDirectiveHTML }}\n      </code>\n    </pre>\n    <pre appClipboard component-ts class=\"code\">\n      <button class=\"btn btn-clipboard\">Copiar</button>\n      <code appPrism >\n        {{ exampleDirectiveTS }}\n      </code>\n    </pre>\n  </app-viewer>\n\n  <app-viewer title=\"Con botones y funcionalidad\" [isNavCode]=\"true\">\n    <app-status-bar-demo component></app-status-bar-demo>\n    <pre appClipboard component-html class=\"code\">\n      <button class=\"btn btn-clipboard\">Copiar</button>\n      <code appPrism language=\"html\">\n        {{ exampleFuncionalityHTML }}\n      </code>\n    </pre>\n\n    <pre appClipboard component-ts class=\"code\">\n      <button class=\"btn btn-clipboard\">Copiar</button>\n      <code appPrism>\n        {{ exampleFuncionalityTS }}\n      </code>\n    </pre>\n  </app-viewer>\n</section>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  ONavModule,\n  OProgressBarComponent,\n  OStatusBarComponent,\n  OTableComponent,\n  StepNextDirective,\n  StepPreviousDirective\n} from 'projects/ngx-obelisco/src/public-api';\n\nimport { StatusBarRoutingModule } from './status-bar-routing.module';\nimport { StatusBarComponent } from './status-bar.component';\nimport { StatusBarApiComponent } from './pages/status-bar-api/status-bar-api.component';\nimport { StatusBarExampleComponent } from './pages/status-bar-example/status-bar-example.component';\nimport { BestPracticesComponent } from 'src/app/components/best-practices/best-practices.component';\nimport { BadPracticesComponent } from 'src/app/components/bad-practices/bad-practices.component';\nimport { ViewerComponent } from 'src/app/components/viewer/viewer.component';\nimport { ClipboardDirective } from 'src/app/shared/directives/copy/clipboard.directive';\nimport { PrismDirective } from 'src/app/shared/directives/prism/prism.directive';\nimport { StatusBarDemoComponent } from './pages/status-bar-example/status-bar-demo/status-bar-demo.component';\n\n@NgModule({\n  declarations: [StatusBarComponent, StatusBarApiComponent, StatusBarExampleComponent, StatusBarDemoComponent],\n  imports: [\n    CommonModule,\n    StatusBarRoutingModule,\n    ONavModule,\n    OStatusBarComponent,\n    OTableComponent,\n    BestPracticesComponent,\n    BadPracticesComponent,\n    ViewerComponent,\n    ClipboardDirective,\n    PrismDirective,\n    StepNextDirective,\n    StepPreviousDirective\n  ]\n})\nexport class StatusBarModule {}\n","import { AfterViewInit, Directive, ElementRef, Renderer2 } from '@angular/core';\n\n@Directive({\n  selector: '[appClipboard]',\n  standalone: true\n})\nexport class ClipboardDirective implements AfterViewInit {\n  constructor(private readonly host: ElementRef, private readonly renderer: Renderer2) {}\n\n  ngAfterViewInit(): void {\n    if (navigator.clipboard) {\n      const button = this.host.nativeElement.closest('pre').querySelector('button');\n      this.renderer.listen(button, 'click', this.clipboard);\n    }\n  }\n\n  public clipboard(event: PointerEvent): void {\n    const button = event.target as HTMLButtonElement;\n    const pre = button?.parentElement;\n    const code = pre?.querySelector('code');\n    const text = code?.innerText;\n    navigator.clipboard.writeText(text!);\n    button.innerText = 'Codigo copiado!';\n\n    setTimeout(() => {\n      button.innerText = 'Copiar';\n    }, 1000);\n  }\n}\n"],"x_google_ignoreList":[]}