{"version":3,"file":"392.f42e4d92dc682fd3.js","mappings":"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","names":["i0","OTableComponent","constructor","renderer","this","EventEmitter","ngOnInit","componentValidations","ngAfterViewInit","checkbox","map","e","inputCheckArr","push","nativeElement","isValidateComponent","displayedColumns","length","dataSource","Error","key","value","trim","charAt","toUpperCase","slice","toLowerCase","match","allSelected","$event","checked","setAttribute","DataSelectedArr","dataSelected","emit","selectedRow","index","indexOf","filter","_","i","selectors","CommonModule","i1","BadPracticesComponent","BestPracticesComponent","ViewerComponent","linkCode","isOpenCode","OOptionComponent","firstActive","option","items","find","active","selectedOption","item","optionSelected","text","OptionApiComponent","OPTION_DATA_SOURCE","OPTION_DATA_SOURCE_METHODS","COLUMNS","OPTION_INTERFACE","OPTION_ITEM_INTERFACE","SIZES","routes","path","component","OptionOverviewComponent","OPTION_BEST_PRACTICES","OPTION_BAD_PRACTICES","OptionExamplesComponent","title","OPTION_EXAMPLE_HTML","OPTION_EXAMPLE_TS","OPTION_EXAMPLE_MULTIPLE_HTML","OPTION_EXAMPLE_MULTIPLE_TS","OPTION_EXAMPLE_SIZES_HTML","OPTION_EXAMPLE_SIZES_TS","selectedItem","event","console","log","ctx","pathMatch","redirectTo","OptionRoutingModule","RouterModule","OptionModule","ONavModule","ClipboardDirective","host","navigator","clipboard","button","closest","querySelector","listen","target","pre","d","parentElement","code","l","writeText","h","innerText","setTimeout"],"sourceRoot":"webpack:///","sources":["./projects/ngx-obelisco/src/lib/components/o-table/o-table.component.html","./projects/ngx-obelisco/src/lib/components/o-table/o-table.component.ts","./src/app/components/bad-practices/bad-practices.component.html","./src/app/components/bad-practices/bad-practices.component.ts","./src/app/components/best-practices/best-practices.component.html","./src/app/components/best-practices/best-practices.component.ts","./src/app/components/viewer/viewer.component.html","./src/app/components/viewer/viewer.component.ts","./projects/ngx-obelisco/src/lib/components/o-option/o-option.component.html","./projects/ngx-obelisco/src/lib/components/o-option/o-option.component.ts","./src/app/modules/section-components/option/pages/option-api/option-api.component.ts","./src/app/modules/section-components/option/pages/option-api/option-api.component.html","./src/app/modules/section-components/option/pages/option-examples/option-examples.component.html","./src/app/modules/section-components/option/option-routing.module.ts","./src/app/modules/section-components/option/pages/option-overview/option-overview.component.ts","./src/app/modules/section-components/option/pages/option-overview/option-overview.component.html","./src/app/modules/section-components/option/pages/option-examples/option-examples.component.ts","./src/app/modules/section-components/option/option.module.ts","./src/app/shared/directives/copy/clipboard.directive.ts"],"sourcesContent":["<table\n  *ngIf=\"isValidateComponent\"\n  class=\"table\"\n  [ngClass]=\"{ 'table-bordered': isBordered, 'table-striped': isStriped, 'table-hover': isHover }\"\n>\n  <thead>\n    <tr>\n      <th scope=\"col\" *ngIf=\"isSelectable\">\n        <input type=\"checkbox\" aria-label=\"checkbox\" (change)=\"allSelected($event.target)\" />\n      </th>\n      <th scope=\"col\" *ngFor=\"let column of displayedColumns\">{{ column.value }}</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr *ngFor=\"let data of dataSource\">\n      <td *ngIf=\"isSelectable\">\n        <input #checkbox type=\"checkbox\" aria-label=\"checkbox\" (change)=\"selectedRow($event.target)\" />\n      </td>\n      <td *ngFor=\"let column of displayedColumns\" [innerHTML]=\"data[column.key]\"></td>\n    </tr>\n  </tbody>\n</table>\n","import { CommonModule } from '@angular/common';\nimport {\n  OnInit,\n  AfterViewInit,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  QueryList,\n  ViewChildren,\n  Renderer2\n} from '@angular/core';\nimport { Column } from '../../core/models/table.models';\n\n@Component({\n  selector: 'o-table',\n  templateUrl: './o-table.component.html',\n  styleUrls: ['./o-table.component.scss'],\n  standalone: true,\n  imports: [CommonModule]\n})\nexport class OTableComponent implements OnInit, AfterViewInit {\n  public isValidateComponent: boolean = false;\n\n  @Input() public displayedColumns: Column[] = [];\n  @Input() public dataSource: any[] = [];\n  @Input() public isBordered: boolean = false;\n  @Input() public isStriped: boolean = false;\n  @Input() public isHover: boolean = false;\n  @Input() public isSelectable: boolean = false;\n  @Output() public dataSelected = new EventEmitter<any>();\n\n  private inputCheckArr: ElementRef[] = [];\n  private DataSelectedArr: any[] = [];\n\n  @ViewChildren('checkbox') public checkbox!: QueryList<ElementRef>;\n\n  constructor(private readonly renderer: Renderer2) {}\n\n  public ngOnInit(): void {\n    this.componentValidations();\n  }\n\n  public ngAfterViewInit(): void {\n    this.checkbox.map((e) => {\n      this.inputCheckArr.push(e.nativeElement);\n    });\n  }\n\n  /**\n   * @description\n   * This method is used to validate the component\n   * For this component to work, the following conditions must be met:\n   * 1. The displayedColumns and displayedColumns property must be filled\n   * 2. The displayedColumns property must be has \"values\" and \"keys\" not null\n   * 3. The displayedColumns is trimmed for spaces\n   * 4. The displayedColumns is converted to capitalization\n   * 5. The displayedColumns is validated if \"value\" contains numbers or special characters and \"key\" contains numbers, special characters or accents\n   * @returns void\n   */\n  private componentValidations(): void {\n    this.isValidateComponent = this.displayedColumns.length > 0 && this.dataSource.length > 0;\n\n    if (!this.isValidateComponent) {\n      throw new Error('The displayedColumns and dataSource must not be empty');\n    }\n\n    this.displayedColumns.map((e) => {\n      if (e.key === '' || e.value === '') {\n        this.isValidateComponent = false;\n        throw new Error('The displayedColumns must not have null values');\n      }\n    });\n\n    this.displayedColumns.map((e) => (e.value = e.value.trim()));\n\n    this.displayedColumns = this.displayedColumns.map((e) => {\n      e.value = e.value.charAt(0).toUpperCase() + e.value.slice(1).toLowerCase();\n      return e;\n    });\n\n    this.displayedColumns.map((e) => {\n      if (e.value.match(/^[a-zA-ZáéíóúÁÉÍÓÚñÑ ]*$/) && e.key.match(/^[a-zA-Z ]*$/)) {\n        this.isValidateComponent = true;\n        return e;\n      } else {\n        this.isValidateComponent = false;\n        throw new Error(\n          'The displayedColumns value must not contain numbers or symbols and the key must not contain numbers, symbols or accents'\n        );\n      }\n    });\n  }\n\n  public allSelected($event: any): void {\n    if (!$event.checked) {\n      this.checkbox.map((e) => this.renderer.setAttribute(e.nativeElement, 'checked', 'false'));\n      this.DataSelectedArr = [];\n    } else {\n      this.checkbox.map((e) => this.renderer.setAttribute(e.nativeElement, 'checked', 'true'));\n      this.DataSelectedArr = this.dataSource;\n    }\n\n    this.dataSelected.emit(this.DataSelectedArr);\n  }\n\n  public selectedRow($event: any): void {\n    const index = this.inputCheckArr.indexOf($event);\n\n    if ($event.checked) {\n      this.DataSelectedArr.push(this.dataSource[index]);\n    } else {\n      this.DataSelectedArr = this.DataSelectedArr.filter((_, i) => i !== index);\n    }\n\n    this.dataSelected.emit(this.DataSelectedArr);\n  }\n}\n","<div class=\"section-bad-practices\">\n  <h3>Malas prácticas</h3>\n\n  <ul class=\"usability\">\n    <li class=\"dont\" *ngFor=\"let practice of practices\">\n      <p [innerHTML]=\"practice\"></p>\n    </li>\n  </ul>\n</div>\n","import { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-bad-practices',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './bad-practices.component.html',\n  styleUrls: ['./bad-practices.component.scss']\n})\nexport class BadPracticesComponent {\n  @Input() public practices: string[] = [];\n}\n","<div class=\"section-best-practices\">\n  <h3>Buenas prácticas</h3>\n\n  <ul class=\"usability\">\n    <li class=\"do\" *ngFor=\"let practice of practices\">\n      <p [innerHTML]=\"practice\"></p>\n    </li>\n  </ul>\n</div>\n","import { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-best-practices',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './best-practices.component.html',\n  styleUrls: ['./best-practices.component.scss']\n})\nexport class BestPracticesComponent {\n  @Input() public practices: string[] = [];\n}\n","<div class=\"example-wrapper\">\n  <div class=\"example-viewer\">\n    <p>{{ title }}</p>\n    <nav>\n      <ul class=\"nav flex-row nav-pills\">\n        <li class=\"nav-item d-flex\">\n          <a class=\"nav-link\" [class.active]=\"isOpenCode\" (click)=\"isOpenCode = !isOpenCode\">\n            <span>{{ linkCode }}</span>\n          </a>\n        </li>\n      </ul>\n    </nav>\n  </div>\n  <div class=\"wrapper\">\n    <nav *ngIf=\"isOpenCode && isNavCode\">\n      <ul class=\"nav flex-row nav-pills\">\n        <li class=\"nav-item d-flex\">\n          <a class=\"nav-link\" [class.active]=\"isWindowHTML\" (click)=\"isWindowHTML = true\">\n            <span>HTML</span>\n          </a>\n          <a class=\"nav-link\" [class.active]=\"!isWindowHTML\" (click)=\"isWindowHTML = false\">\n            <span>TS</span>\n          </a>\n        </li>\n      </ul>\n    </nav>\n    <ng-container *ngIf=\"!isOpenCode; else codeTemplate\">\n      <ng-content select=\"[component]\"></ng-content>\n    </ng-container>\n\n    <ng-template #codeTemplate>\n      <ng-container *ngIf=\"isWindowHTML; else windowTs\">\n        <ng-content select=\"[component-html]\"></ng-content>\n      </ng-container>\n    </ng-template>\n\n    <ng-template #windowTs>\n      <ng-content select=\"[component-ts]\"></ng-content>\n    </ng-template>\n  </div>\n</div>\n","import { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-viewer',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './viewer.component.html',\n  styleUrls: ['./viewer.component.scss']\n})\nexport class ViewerComponent {\n  @Input() public title!: string;\n  @Input() public isNavCode: boolean = false;\n\n  public isOpenCode: boolean = false;\n  public isWindowHTML: boolean = true;\n\n  get linkCode(): string {\n    return this.isOpenCode ? 'Esconder codigo' : 'Mostrar codigo';\n  }\n}\n","<form class=\"options-container\">\n  <fieldset class=\"dropdown\">\n    <button\n      type=\"button\"\n      class=\"btn btn-dropdown dropdown-toggle\"\n      data-toggle=\"dropdown\"\n      aria-haspopup=\"true\"\n      aria-expanded=\"true\"\n      [ngClass]=\"[size !== 'md' ? 'btn-dropdown-' + size : 'btn-dropdown']\"\n    >\n      {{ option.title }}\n    </button>\n    <div class=\"dropdown-menu\">\n      <div *ngFor=\"let item of option.items; index as i\">\n        <input type=\"radio\" [id]=\"'item-' + i\" [name]=\"item.text\" class=\"sr-only\" />\n        <label (click)=\"selectedOption(item)\" [for]=\"'item-' + i\" class=\"dropdown-item\" [class.active]=\"item.active\">\n          {{ item.text }}\n        </label>\n      </div>\n    </div>\n  </fieldset>\n</form>\n","import { CommonModule } from '@angular/common';\nimport { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { Option, OptionItem } from '../../core/models/option.models';\nimport { Sizes } from '../../core/models/sizes.models';\n\n@Component({\n  selector: 'o-option',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './o-option.component.html',\n  styleUrls: ['./o-option.component.scss']\n})\nexport class OOptionComponent implements OnInit {\n  @Input() public option!: Option;\n  @Input() public size: Sizes = 'md';\n\n  @Output() optionSelected = new EventEmitter<string>();\n\n  private firstActive!: OptionItem;\n\n  public ngOnInit(): void {\n    this.firstActive = this.option.items.find((e) => e.active === true)!;\n    this.option.items.map((e) => e !== this.firstActive && (e.active = false));\n  }\n\n  public selectedOption(item: OptionItem): void {\n    if (item !== this.firstActive) {\n      this.firstActive = item;\n      this.optionSelected.emit(item.text);\n    }\n\n    this.option.items.map((e) => e !== item && (e.active = false));\n    item.active = !item.active;\n  }\n}\n","import { Component } from '@angular/core';\nimport { COLUMNS, SIZES } from 'src/app/constants/components.constants';\nimport {\n  OPTION_DATA_SOURCE,\n  OPTION_DATA_SOURCE_METHODS,\n  OPTION_INTERFACE,\n  OPTION_ITEM_INTERFACE\n} from 'src/app/constants/option.constants';\n\n@Component({\n  selector: 'app-option-api',\n  templateUrl: './option-api.component.html',\n  styleUrls: ['./option-api.component.scss']\n})\nexport class OptionApiComponent {\n  public dataSourceOption = OPTION_DATA_SOURCE;\n  public dataSourceMethodsOption = OPTION_DATA_SOURCE_METHODS;\n  public columnsOption = COLUMNS;\n  public optionInterface = OPTION_INTERFACE;\n  public optionInterfaceItem = OPTION_ITEM_INTERFACE;\n  public sizes = SIZES;\n}\n","<section class=\"section-api\">\n  <div class=\"section-title\">\n    <h2>Referencia de API para el componente Opción de Obelisco</h2>\n    <pre class=\"code import\">\n      <code appPrism language=\"javascript\" code=\"import { OOptionComponent } from '@ngx-obelisco';\"></code>\n    </pre>\n  </div>\n\n  <h3>Etiqueta</h3>\n  <hr />\n\n  <div class=\"section-selector\">\n    <h4>OOption</h4>\n    <p>Selector: <strong>o-option</strong></p>\n\n    <div class=\"section-properties\">\n      <h5>Propiedades</h5>\n\n      <o-table\n        [displayedColumns]=\"columnsOption\"\n        [dataSource]=\"dataSourceOption\"\n        [isStriped]=\"true\"\n        [isBordered]=\"true\"\n      ></o-table>\n    </div>\n\n    <div class=\"section-properties\">\n      <h5>Métodos</h5>\n\n      <o-table\n        [displayedColumns]=\"columnsOption\"\n        [dataSource]=\"dataSourceMethodsOption\"\n        [isStriped]=\"true\"\n        [isBordered]=\"true\"\n      ></o-table>\n    </div>\n  </div>\n\n  <h3>Tipos de datos</h3>\n  <hr />\n\n  <div class=\"section-type\">\n    <h4>Option</h4>\n    <p>Permite establecer los valores de la propiedad <strong>option</strong>.</p>\n\n    <div class=\"section-interface\">\n      <pre class=\"code import\">\n        <code appPrism language=\"javascript\">{{ optionInterface }}</code>\n      </pre>\n    </div>\n  </div>\n\n  <br />\n\n  <div class=\"section-type\">\n    <h4>OptionItem</h4>\n    <p>Permite establecer los valores de los items del array de <strong>items</strong>.</p>\n\n    <div class=\"section-interface\">\n      <pre class=\"code import\">\n        <code appPrism language=\"javascript\">{{ optionInterfaceItem }}</code>\n      </pre>\n    </div>\n  </div>\n\n  <br />\n\n  <div class=\"section-type\">\n    <h4>Sizes</h4>\n    <p>Permite establecer el tamaño del componente <strong>OOptionComponent</strong>.</p>\n\n    <div class=\"section-interface\">\n      <pre class=\"code import\">\n        <code appPrism language=\"javascript\">{{ sizes }}</code>\n      </pre>\n    </div>\n  </div>\n</section>\n","<section class=\"section-example\">\n  <app-viewer title=\"Opción\" [isNavCode]=\"true\">\n    <div component class=\"option-container\">\n      <o-option component [option]=\"option\" (optionSelected)=\"selectedItem($event)\"></o-option>\n    </div>\n    <pre appClipboard component-html class=\"code\">\n      <button class=\"btn btn-clipboard\">Copiar</button>\n      <code appPrism language=\"html\">\n        {{ optionExampleHTML }}\n      </code>\n    </pre>\n\n    <pre appClipboard component-ts class=\"code\">\n      <button class=\"btn btn-clipboard\">Copiar</button>\n      <code appPrism>\n        {{ optionExampleTS }}\n      </code>\n    </pre>\n  </app-viewer>\n\n  <app-viewer title=\"Opciónes multiples\" [isNavCode]=\"true\">\n    <div component class=\"form-container\">\n      <form component class=\"d-flex flex-row justify-content-start options-container\">\n        <o-option *ngFor=\"let option of optionList\" [option]=\"option\"></o-option>\n      </form>\n    </div>\n    <pre appClipboard component-html class=\"code\">\n      <button class=\"btn btn-clipboard\">Copiar</button>\n      <code appPrism language=\"html\">\n        {{ optionMultipleHTML }}\n      </code>\n    </pre>\n\n    <pre appClipboard component-ts class=\"code\">\n      <button class=\"btn btn-clipboard\">Copiar</button>\n      <code appPrism>\n        {{ optionMultipleTS }}\n      </code>\n    </pre>\n  </app-viewer>\n\n  <app-viewer title=\"Opciónes - Tamaños\" [isNavCode]=\"true\">\n    <div component class=\"option-container\">\n      <form component class=\"d-flex flex-row justify-content-start align-items-center options-container\">\n        <o-option [option]=\"optionSm\" size=\"sm\"></o-option>\n        <o-option [option]=\"option\"></o-option>\n        <o-option [option]=\"optionLg\" size=\"lg\"></o-option>\n      </form>\n    </div>\n    <pre appClipboard component-html class=\"code\">\n      <button class=\"btn btn-clipboard\">Copiar</button>\n      <code appPrism language=\"html\">\n        {{ optionSizesHTML }}\n      </code>\n    </pre>\n\n    <pre appClipboard component-ts class=\"code\">\n      <button class=\"btn btn-clipboard\">Copiar</button>\n      <code appPrism>\n        {{ optionSizesTS }}\n      </code>\n    </pre>\n  </app-viewer>\n</section>\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { OptionApiComponent } from './pages/option-api/option-api.component';\nimport { OptionExamplesComponent } from './pages/option-examples/option-examples.component';\nimport { OptionOverviewComponent } from './pages/option-overview/option-overview.component';\n\nconst routes: Routes = [\n  { path: 'overview', component: OptionOverviewComponent },\n  { path: 'api', component: OptionApiComponent },\n  { path: 'examples', component: OptionExamplesComponent },\n  { path: '**', pathMatch: 'full', redirectTo: 'overview' }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class OptionRoutingModule {}\n","import { Component } from '@angular/core';\nimport { OPTION_BAD_PRACTICES, OPTION_BEST_PRACTICES } from 'src/app/constants/option.constants';\n\n@Component({\n  selector: 'app-option-overview',\n  templateUrl: './option-overview.component.html',\n  styleUrls: ['./option-overview.component.scss']\n})\nexport class OptionOverviewComponent {\n  public bestPractices = OPTION_BEST_PRACTICES;\n\n  public badPractices = OPTION_BAD_PRACTICES;\n}\n","<section class=\"section-overview\">\n  <p class=\"lead\">\n    Las opciones aparecen al interactuar con un elemento como un botón o un icono o un selector de formulario. Es una\n    forma simple y compacta de mostrar múltiples opciones.\n  </p>\n\n  <h2>Tipos de Opciones</h2>\n  <p>\n    Cuando el sistema ya posee los datos que se precisan seleccionar y la persona solo debe optar por uno o varios de\n    ellos. Se muestran al accionar un Desplegable.\n  </p>\n\n  <div class=\"section-design\">\n    <h2>Diseño y estructura (Contexto de uso)</h2>\n\n    <p>Opciones alineadas a la izquierda, se muestran al accionar un Desplegable.</p>\n\n    <img\n      class=\"card-img-top\"\n      src=\"https://gcba.github.io/estandares/componentes/opciones/izquierda.png\"\n      alt=\"imagen sobre opción a la izquierda\"\n    />\n\n    <p class=\"section-design-text\">Opciones alineadas al centro, se muestran al accionar un Desplegable.</p>\n\n    <img\n      class=\"card-img-top\"\n      src=\"https://gcba.github.io/estandares/componentes/opciones/centro.png\"\n      alt=\"imagen sobre opción al centro\"\n    />\n\n    <p class=\"section-design-text\">Opciones alineadas al centro, se muestran al accionar un Desplegable.</p>\n\n    <img\n      class=\"card-img-top\"\n      src=\"https://gcba.github.io/estandares/componentes/opciones/derecha.png\"\n      alt=\"imagen sobre opción a la derecha\"\n    />\n  </div>\n\n  <div class=\"section-usability\">\n    <h2>Usabilidad</h2>\n\n    <app-best-practices [practices]=\"bestPractices\"></app-best-practices>\n\n    <app-bad-practices [practices]=\"badPractices\"></app-bad-practices>\n  </div>\n</section>\n","import { Component } from '@angular/core';\nimport {\n  OPTION_EXAMPLE_HTML,\n  OPTION_EXAMPLE_MULTIPLE_HTML,\n  OPTION_EXAMPLE_MULTIPLE_TS,\n  OPTION_EXAMPLE_SIZES_HTML,\n  OPTION_EXAMPLE_SIZES_TS,\n  OPTION_EXAMPLE_TS\n} from 'src/app/constants/option.constants';\n\n@Component({\n  selector: 'app-option-examples',\n  templateUrl: './option-examples.component.html',\n  styleUrls: ['./option-examples.component.scss']\n})\nexport class OptionExamplesComponent {\n  public option = {\n    title: 'Desplegable',\n    items: [{ text: 'Item 1' }, { text: 'Item 2', active: true }, { text: 'Item 3' }]\n  };\n\n  public optionList = [\n    {\n      title: 'Desplegable 1',\n      items: [{ text: 'Item 1' }, { text: 'Item 2' }, { text: 'Item 3' }, { text: 'Item 4' }]\n    },\n    {\n      title: 'Desplegable 2',\n      items: [{ text: 'Item 1' }, { text: 'Item 2' }]\n    },\n    {\n      title: 'Desplegable 3',\n      items: [{ text: 'Item 1' }, { text: 'Item 2' }, { text: 'Item 3' }]\n    }\n  ];\n\n  public optionSm = {\n    title: 'Desplegable',\n    items: [{ text: 'Item 1' }, { text: 'Item 2' }, { text: 'Item 3' }]\n  };\n\n  public optionLg = {\n    title: 'Desplegable',\n    items: [{ text: 'Item 1' }, { text: 'Item 2' }, { text: 'Item 3' }]\n  };\n\n  public selectedItem(event: string): void {\n    console.log(event);\n  }\n\n  public optionExampleHTML = OPTION_EXAMPLE_HTML;\n  public optionExampleTS = OPTION_EXAMPLE_TS;\n  public optionMultipleHTML = OPTION_EXAMPLE_MULTIPLE_HTML;\n  public optionMultipleTS = OPTION_EXAMPLE_MULTIPLE_TS;\n  public optionSizesHTML = OPTION_EXAMPLE_SIZES_HTML;\n  public optionSizesTS = OPTION_EXAMPLE_SIZES_TS;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ONavModule, OOptionComponent, OTableComponent } from 'projects/ngx-obelisco/src/public-api';\nimport { BadPracticesComponent } from 'src/app/components/bad-practices/bad-practices.component';\nimport { BestPracticesComponent } from 'src/app/components/best-practices/best-practices.component';\nimport { ViewerComponent } from 'src/app/components/viewer/viewer.component';\nimport { ClipboardDirective } from 'src/app/shared/directives/copy/clipboard.directive';\nimport { PrismDirective } from 'src/app/shared/directives/prism/prism.directive';\n\nimport { OptionRoutingModule } from './option-routing.module';\nimport { OptionComponent } from './option.component';\nimport { OptionApiComponent } from './pages/option-api/option-api.component';\nimport { OptionExamplesComponent } from './pages/option-examples/option-examples.component';\nimport { OptionOverviewComponent } from './pages/option-overview/option-overview.component';\n\n@NgModule({\n  declarations: [OptionComponent, OptionApiComponent, OptionOverviewComponent, OptionExamplesComponent],\n  imports: [\n    CommonModule,\n    OptionRoutingModule,\n    ONavModule,\n    OTableComponent,\n    OOptionComponent,\n    ViewerComponent,\n    ClipboardDirective,\n    BestPracticesComponent,\n    BadPracticesComponent,\n    PrismDirective\n  ]\n})\nexport class OptionModule {}\n","import { AfterViewInit, Directive, ElementRef, Renderer2 } from '@angular/core';\n\n@Directive({\n  selector: '[appClipboard]',\n  standalone: true\n})\nexport class ClipboardDirective implements AfterViewInit {\n  constructor(private readonly host: ElementRef, private readonly renderer: Renderer2) {}\n\n  ngAfterViewInit(): void {\n    if (navigator.clipboard) {\n      const button = this.host.nativeElement.closest('pre').querySelector('button');\n      this.renderer.listen(button, 'click', this.clipboard);\n    }\n  }\n\n  public clipboard(event: PointerEvent): void {\n    const button = event.target as HTMLButtonElement;\n    const pre = button?.parentElement;\n    const code = pre?.querySelector('code');\n    const text = code?.innerText;\n    navigator.clipboard.writeText(text!);\n    button.innerText = 'Codigo copiado!';\n\n    setTimeout(() => {\n      button.innerText = 'Copiar';\n    }, 1000);\n  }\n}\n"],"x_google_ignoreList":[]}