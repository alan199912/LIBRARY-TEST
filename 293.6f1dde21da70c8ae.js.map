{"version":3,"file":"293.6f1dde21da70c8ae.js","mappings":"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","names":["i0","OTableComponent","constructor","renderer","this","EventEmitter","ngOnInit","componentValidations","ngAfterViewInit","checkbox","map","e","inputCheckArr","push","nativeElement","isValidateComponent","displayedColumns","length","dataSource","Error","key","value","trim","charAt","toUpperCase","slice","toLowerCase","match","allSelected","$event","checked","setAttribute","DataSelectedArr","dataSelected","emit","selectedRow","index","indexOf","filter","_","i","selectors","CommonModule","i1","BadPracticesComponent","BestPracticesComponent","ViewerComponent","linkCode","isOpenCode","AlertApiComponent","ALERT_DATA_SOURCE","COLUMNS","COLORS","AlertExamplesComponent","ALERT_EXAMPLE_TEXT","ALERT_EXAMPLE_HIGHLIGHT","ALERT_EXAMPLE_COLORS","ALERT_EXAMPLE_LISTS","routes","path","component","AlertOverviewComponent","ALERT_BEST_PRACTICES","ALERT_BAD_PRACTICES","pathMatch","redirectTo","AlertRoutingModule","RouterModule","AlertModule","ONavModule","ClipboardDirective","host","navigator","clipboard","button","closest","querySelector","listen","event","target","pre","l","parentElement","code","writeText","innerText","setTimeout"],"sourceRoot":"webpack:///","sources":["./projects/ngx-obelisco/src/lib/components/o-table/o-table.component.html","./projects/ngx-obelisco/src/lib/components/o-table/o-table.component.ts","./src/app/components/bad-practices/bad-practices.component.html","./src/app/components/bad-practices/bad-practices.component.ts","./src/app/components/best-practices/best-practices.component.html","./src/app/components/best-practices/best-practices.component.ts","./src/app/components/viewer/viewer.component.html","./src/app/components/viewer/viewer.component.ts","./src/app/modules/section-components/alert/pages/alert-api/alert-api.component.ts","./src/app/modules/section-components/alert/pages/alert-api/alert-api.component.html","./src/app/modules/section-components/alert/pages/alert-examples/alert-examples.component.ts","./src/app/modules/section-components/alert/pages/alert-examples/alert-examples.component.html","./src/app/modules/section-components/alert/alert-routing.module.ts","./src/app/modules/section-components/alert/pages/alert-overview/alert-overview.component.ts","./src/app/modules/section-components/alert/pages/alert-overview/alert-overview.component.html","./src/app/modules/section-components/alert/alert.module.ts","./src/app/shared/directives/copy/clipboard.directive.ts"],"sourcesContent":["<table\n  *ngIf=\"isValidateComponent\"\n  class=\"table\"\n  [ngClass]=\"{ 'table-bordered': isBordered, 'table-striped': isStriped, 'table-hover': isHover }\"\n>\n  <thead>\n    <tr>\n      <th scope=\"col\" *ngIf=\"isSelectable\">\n        <input type=\"checkbox\" aria-label=\"checkbox\" (change)=\"allSelected($event.target)\" />\n      </th>\n      <th scope=\"col\" *ngFor=\"let column of displayedColumns\">{{ column.value }}</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr *ngFor=\"let data of dataSource\">\n      <td *ngIf=\"isSelectable\">\n        <input #checkbox type=\"checkbox\" aria-label=\"checkbox\" (change)=\"selectedRow($event.target)\" />\n      </td>\n      <td *ngFor=\"let column of displayedColumns\" [innerHTML]=\"data[column.key]\"></td>\n    </tr>\n  </tbody>\n</table>\n","import { CommonModule } from '@angular/common';\nimport {\n  OnInit,\n  AfterViewInit,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  QueryList,\n  ViewChildren,\n  Renderer2\n} from '@angular/core';\nimport { Column } from '../../core/models/table.models';\n\n@Component({\n  selector: 'o-table',\n  templateUrl: './o-table.component.html',\n  styleUrls: ['./o-table.component.scss'],\n  standalone: true,\n  imports: [CommonModule]\n})\nexport class OTableComponent implements OnInit, AfterViewInit {\n  public isValidateComponent: boolean = false;\n\n  @Input() public displayedColumns: Column[] = [];\n  @Input() public dataSource: any[] = [];\n  @Input() public isBordered: boolean = false;\n  @Input() public isStriped: boolean = false;\n  @Input() public isHover: boolean = false;\n  @Input() public isSelectable: boolean = false;\n  @Output() public dataSelected = new EventEmitter<any>();\n\n  private inputCheckArr: ElementRef[] = [];\n  private DataSelectedArr: any[] = [];\n\n  @ViewChildren('checkbox') public checkbox!: QueryList<ElementRef>;\n\n  constructor(private readonly renderer: Renderer2) {}\n\n  public ngOnInit(): void {\n    this.componentValidations();\n  }\n\n  public ngAfterViewInit(): void {\n    this.checkbox.map((e) => {\n      this.inputCheckArr.push(e.nativeElement);\n    });\n  }\n\n  /**\n   * @description\n   * This method is used to validate the component\n   * For this component to work, the following conditions must be met:\n   * 1. The displayedColumns and displayedColumns property must be filled\n   * 2. The displayedColumns property must be has \"values\" and \"keys\" not null\n   * 3. The displayedColumns is trimmed for spaces\n   * 4. The displayedColumns is converted to capitalization\n   * 5. The displayedColumns is validated if \"value\" contains numbers or special characters and \"key\" contains numbers, special characters or accents\n   * @returns void\n   */\n  private componentValidations(): void {\n    this.isValidateComponent = this.displayedColumns.length > 0 && this.dataSource.length > 0;\n\n    if (!this.isValidateComponent) {\n      throw new Error('The displayedColumns and dataSource must not be empty');\n    }\n\n    this.displayedColumns.map((e) => {\n      if (e.key === '' || e.value === '') {\n        this.isValidateComponent = false;\n        throw new Error('The displayedColumns must not have null values');\n      }\n    });\n\n    this.displayedColumns.map((e) => (e.value = e.value.trim()));\n\n    this.displayedColumns = this.displayedColumns.map((e) => {\n      e.value = e.value.charAt(0).toUpperCase() + e.value.slice(1).toLowerCase();\n      return e;\n    });\n\n    this.displayedColumns.map((e) => {\n      if (e.value.match(/^[a-zA-ZáéíóúÁÉÍÓÚñÑ ]*$/) && e.key.match(/^[a-zA-Z ]*$/)) {\n        this.isValidateComponent = true;\n        return e;\n      } else {\n        this.isValidateComponent = false;\n        throw new Error(\n          'The displayedColumns value must not contain numbers or symbols and the key must not contain numbers, symbols or accents'\n        );\n      }\n    });\n  }\n\n  public allSelected($event: any): void {\n    if (!$event.checked) {\n      this.checkbox.map((e) => this.renderer.setAttribute(e.nativeElement, 'checked', 'false'));\n      this.DataSelectedArr = [];\n    } else {\n      this.checkbox.map((e) => this.renderer.setAttribute(e.nativeElement, 'checked', 'true'));\n      this.DataSelectedArr = this.dataSource;\n    }\n\n    this.dataSelected.emit(this.DataSelectedArr);\n  }\n\n  public selectedRow($event: any): void {\n    const index = this.inputCheckArr.indexOf($event);\n\n    if ($event.checked) {\n      this.DataSelectedArr.push(this.dataSource[index]);\n    } else {\n      this.DataSelectedArr = this.DataSelectedArr.filter((_, i) => i !== index);\n    }\n\n    this.dataSelected.emit(this.DataSelectedArr);\n  }\n}\n","<div class=\"section-bad-practices\">\n  <h3>Malas prácticas</h3>\n\n  <ul class=\"usability\">\n    <li class=\"dont\" *ngFor=\"let practice of practices\">\n      <p [innerHTML]=\"practice\"></p>\n    </li>\n  </ul>\n</div>\n","import { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-bad-practices',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './bad-practices.component.html',\n  styleUrls: ['./bad-practices.component.scss']\n})\nexport class BadPracticesComponent {\n  @Input() public practices: string[] = [];\n}\n","<div class=\"section-best-practices\">\n  <h3>Buenas prácticas</h3>\n\n  <ul class=\"usability\">\n    <li class=\"do\" *ngFor=\"let practice of practices\">\n      <p [innerHTML]=\"practice\"></p>\n    </li>\n  </ul>\n</div>\n","import { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-best-practices',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './best-practices.component.html',\n  styleUrls: ['./best-practices.component.scss']\n})\nexport class BestPracticesComponent {\n  @Input() public practices: string[] = [];\n}\n","<div class=\"example-wrapper\">\n  <div class=\"example-viewer\">\n    <p>{{ title }}</p>\n    <nav>\n      <ul class=\"nav flex-row nav-pills\">\n        <li class=\"nav-item d-flex\">\n          <a class=\"nav-link\" [class.active]=\"isOpenCode\" (click)=\"isOpenCode = !isOpenCode\">\n            <span>{{ linkCode }}</span>\n          </a>\n        </li>\n      </ul>\n    </nav>\n  </div>\n  <div class=\"wrapper\">\n    <nav *ngIf=\"isOpenCode && isNavCode\">\n      <ul class=\"nav flex-row nav-pills\">\n        <li class=\"nav-item d-flex\">\n          <a class=\"nav-link\" [class.active]=\"isWindowHTML\" (click)=\"isWindowHTML = true\">\n            <span>HTML</span>\n          </a>\n          <a class=\"nav-link\" [class.active]=\"!isWindowHTML\" (click)=\"isWindowHTML = false\">\n            <span>TS</span>\n          </a>\n        </li>\n      </ul>\n    </nav>\n    <ng-container *ngIf=\"!isOpenCode; else codeTemplate\">\n      <ng-content select=\"[component]\"></ng-content>\n    </ng-container>\n\n    <ng-template #codeTemplate>\n      <ng-container *ngIf=\"isWindowHTML; else windowTs\">\n        <ng-content select=\"[component-html]\"></ng-content>\n      </ng-container>\n    </ng-template>\n\n    <ng-template #windowTs>\n      <ng-content select=\"[component-ts]\"></ng-content>\n    </ng-template>\n  </div>\n</div>\n","import { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-viewer',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './viewer.component.html',\n  styleUrls: ['./viewer.component.scss']\n})\nexport class ViewerComponent {\n  @Input() public title!: string;\n  @Input() public isNavCode: boolean = false;\n\n  public isOpenCode: boolean = false;\n  public isWindowHTML: boolean = true;\n\n  get linkCode(): string {\n    return this.isOpenCode ? 'Esconder codigo' : 'Mostrar codigo';\n  }\n}\n","import { Component } from '@angular/core';\nimport { ALERT_DATA_SOURCE, COLORS } from 'src/app/constants/alert.constants';\nimport { COLUMNS } from 'src/app/constants/components.constants';\n\n@Component({\n  selector: 'app-alert-api',\n  templateUrl: './alert-api.component.html',\n  styleUrls: ['./alert-api.component.scss']\n})\nexport class AlertApiComponent {\n  public dataSource = ALERT_DATA_SOURCE;\n  public columns = COLUMNS;\n  public colors = COLORS;\n}\n","<section class=\"section-api\">\n  <div class=\"section-title\">\n    <h2>Referencia de API para el componente Alerta de Obelisco</h2>\n    <pre class=\"code import\">\n      <code appPrism language=\"javascript\" code=\"import { OAlertDirective } from 'ngx-obelisco';\"></code>\n    </pre>\n  </div>\n\n  <h3>Etiqueta</h3>\n  <hr />\n\n  <div class=\"section-selector\">\n    <h4>OAlert</h4>\n    <p>Selector: <strong>oAlert</strong></p>\n\n    <div class=\"section-properties\">\n      <h5>Propiedades</h5>\n\n      <o-table [displayedColumns]=\"columns\" [dataSource]=\"dataSource\" [isStriped]=\"true\" [isBordered]=\"true\"></o-table>\n    </div>\n  </div>\n\n  <br />\n\n  <div class=\"section-type\">\n    <h4>Colors</h4>\n    <p>Permite establecer los valores de la propiedad <strong>color</strong>.</p>\n\n    <div class=\"section-interface\">\n      <pre class=\"code import\">\n        <code appPrism>{{ colors }}</code>\n      </pre>\n    </div>\n  </div>\n</section>\n","import { Component } from '@angular/core';\nimport {\n  ALERT_EXAMPLE_COLORS,\n  ALERT_EXAMPLE_HIGHLIGHT,\n  ALERT_EXAMPLE_LISTS,\n  ALERT_EXAMPLE_TEXT\n} from 'src/app/constants/alert.constants';\n\n@Component({\n  selector: 'app-alert-examples',\n  templateUrl: './alert-examples.component.html',\n  styleUrls: ['./alert-examples.component.scss']\n})\nexport class AlertExamplesComponent {\n  public exampleText = ALERT_EXAMPLE_TEXT;\n  public exampleHighlight = ALERT_EXAMPLE_HIGHLIGHT;\n  public exampleColors = ALERT_EXAMPLE_COLORS;\n  public exampleLists = ALERT_EXAMPLE_LISTS;\n}\n","<section class=\"section-example\">\n  <app-viewer title=\"Alerta tipo texto\">\n    <div oAlert component>\n      <p>Un texto simple para una alerta simple, incluso <a [routerLink]=\"['/']\">con hipervínculos</a></p>\n    </div>\n    <pre appClipboard component-html class=\"code\">\n      <button class=\"btn btn-clipboard\">Copiar</button>\n      <code appPrism language=\"html\">\n        {{ exampleText }}\n      </code>\n    </pre>\n  </app-viewer>\n\n  <app-viewer title=\"Destacado y texto\">\n    <div oAlert component>\n      <p>\n        <strong>Este es un destacado de una alerta (opcional).</strong>\n        Un texto simple para una alerta simple, incluso <a [routerLink]=\"['/']\">con hipervínculos</a>\n      </p>\n    </div>\n    <pre appClipboard component-html class=\"code\">\n      <button class=\"btn btn-clipboard\">Copiar</button>\n      <code appPrism language=\"html\">\n        {{ exampleHighlight }}\n      </code>\n    </pre>\n  </app-viewer>\n\n  <app-viewer title=\"Colores\">\n    <div oAlert component color=\"primary\">\n      <p>Un texto simple para una alerta simple</p>\n    </div>\n    <div oAlert component color=\"success\">\n      <p>Un texto simple para una alerta simple</p>\n    </div>\n    <div oAlert component color=\"info\">\n      <p>Un texto simple para una alerta simple</p>\n    </div>\n    <div oAlert component>\n      <p>Un texto simple para una alerta simple</p>\n    </div>\n    <pre appClipboard component-html class=\"code\">\n      <button class=\"btn btn-clipboard\">Copiar</button>\n      <code appPrism language=\"html\">\n        {{ exampleColors }}\n      </code>\n    </pre>\n  </app-viewer>\n\n  <app-viewer title=\"Listas\">\n    <div oAlert component>\n      <strong>Este es un destacado de una alerta (opcional).</strong>\n      <ol class=\"list-links\">\n        <li><a href=\"#\">Ancla al error 1</a></li>\n        <li><a href=\"#\">Ancla al error 2</a></li>\n        <li><a href=\"#\">Ancla al error 3</a></li>\n      </ol>\n    </div>\n\n    <div oAlert component>\n      <strong>Este es un destacado de una alerta (opcional).</strong>\n      <ol>\n        <li>Ancla al error 1</li>\n        <li>Ancla al error 2</li>\n        <li>Ancla al error 3</li>\n      </ol>\n    </div>\n    <pre appClipboard component-html class=\"code\">\n      <button class=\"btn btn-clipboard\">Copiar</button>\n      <code appPrism language=\"html\">\n        {{ exampleLists }}\n      </code>\n    </pre>\n  </app-viewer>\n</section>\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { AlertApiComponent } from './pages/alert-api/alert-api.component';\nimport { AlertExamplesComponent } from './pages/alert-examples/alert-examples.component';\nimport { AlertOverviewComponent } from './pages/alert-overview/alert-overview.component';\n\nconst routes: Routes = [\n  { path: 'overview', component: AlertOverviewComponent },\n  { path: 'api', component: AlertApiComponent },\n  { path: 'examples', component: AlertExamplesComponent },\n  { path: '**', pathMatch: 'full', redirectTo: 'overview' }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class AlertRoutingModule {}\n","import { Component } from '@angular/core';\nimport { ALERT_BAD_PRACTICES, ALERT_BEST_PRACTICES } from 'src/app/constants/alert.constants';\n\n@Component({\n  selector: 'app-alert-overview',\n  templateUrl: './alert-overview.component.html',\n  styleUrls: ['./alert-overview.component.scss']\n})\nexport class AlertOverviewComponent {\n  public bestPractices = ALERT_BEST_PRACTICES;\n  public badPractices = ALERT_BAD_PRACTICES;\n}\n","<section class=\"section-overview\">\n  <p class=\"lead\">\n    Las alertas mantienen a los usuarios informados sobre el estado del sistema y puede requerir o no que realicen una\n    acción.\n  </p>\n\n  <h2>Tipos de alertas</h2>\n  <p>\n    Las opciones de alerta muestran su color semántico e ícono correspondiente para ayudar a las personas con\n    deficiencia de visión del color a discernir el tono del mensaje.\n  </p>\n\n  <h3>Alertas de error</h3>\n  <p>\n    Se usan para mostrar un error de validación, falla del sistema, o para transmitir algo que debe reconocerse o\n    abordarse de inmediato para continuar con su navegación.\n  </p>\n\n  <h3>Alertas de éxito</h3>\n\n  <p>Se usan para informar al usuario sobre una tarea que se realizó con éxito.</p>\n\n  <h3>Alertas de información</h3>\n  <p>\n    Notifican al usuario sobre un cambio, para darles consejos o brindar información específica sobre la sección en la\n    que se encuentran.\n  </p>\n\n  <h3>Alertas de advertencia</h3>\n  <p>Esta variante se utiliza para informar sobre una situación que debe abordarse pronto.</p>\n\n  <div class=\"section-design\">\n    <h2>Diseño y estructura (Contexto de uso)</h2>\n\n    <h3>En cuerpo de página</h3>\n\n    <p>\n      Los carteles de alerta están destinados a llamar la atención y pedir a los usuarios que tomen medidas necesarias\n      en el contexto de una página. Se colocan al principio de aquello que se quiera advertir, alineados al margen\n      izquierdo.\n    </p>\n  </div>\n\n  <img\n    class=\"card-img-top\"\n    src=\"https://gcba.github.io/estandares/componentes/alerta/dise%C3%B1o_estructura.svg\"\n    alt=\"imagen sobre carteles de alerta\"\n  />\n\n  <div class=\"section-usability\">\n    <h2>Usabilidad</h2>\n\n    <app-best-practices [practices]=\"bestPractices\"></app-best-practices>\n\n    <app-bad-practices [practices]=\"badPractices\"></app-bad-practices>\n  </div>\n</section>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OAlertDirective, ONavModule, OTableComponent } from 'projects/ngx-obelisco/src/public-api';\nimport { AlertRoutingModule } from './alert-routing.module';\n\nimport { BadPracticesComponent } from 'src/app/components/bad-practices/bad-practices.component';\nimport { BestPracticesComponent } from 'src/app/components/best-practices/best-practices.component';\nimport { ViewerComponent } from 'src/app/components/viewer/viewer.component';\nimport { ClipboardDirective } from 'src/app/shared/directives/copy/clipboard.directive';\nimport { PrismDirective } from 'src/app/shared/directives/prism/prism.directive';\nimport { AlertComponent } from './alert.component';\nimport { AlertApiComponent } from './pages/alert-api/alert-api.component';\nimport { AlertExamplesComponent } from './pages/alert-examples/alert-examples.component';\nimport { AlertOverviewComponent } from './pages/alert-overview/alert-overview.component';\n\n@NgModule({\n  declarations: [AlertComponent, AlertOverviewComponent, AlertApiComponent, AlertExamplesComponent],\n  imports: [\n    CommonModule,\n    AlertRoutingModule,\n    ONavModule,\n    OTableComponent,\n    ViewerComponent,\n    ClipboardDirective,\n    BestPracticesComponent,\n    BadPracticesComponent,\n    PrismDirective,\n    OAlertDirective\n  ]\n})\nexport class AlertModule {}\n","import { AfterViewInit, Directive, ElementRef, Renderer2 } from '@angular/core';\n\n@Directive({\n  selector: '[appClipboard]',\n  standalone: true\n})\nexport class ClipboardDirective implements AfterViewInit {\n  constructor(private readonly host: ElementRef, private readonly renderer: Renderer2) {}\n\n  ngAfterViewInit(): void {\n    if (navigator.clipboard) {\n      const button = this.host.nativeElement.closest('pre').querySelector('button');\n      this.renderer.listen(button, 'click', this.clipboard);\n    }\n  }\n\n  public clipboard(event: PointerEvent): void {\n    const button = event.target as HTMLButtonElement;\n    const pre = button?.parentElement;\n    const code = pre?.querySelector('code');\n    const text = code?.innerText;\n    navigator.clipboard.writeText(text!);\n    button.innerText = 'Codigo copiado!';\n\n    setTimeout(() => {\n      button.innerText = 'Copiar';\n    }, 1000);\n  }\n}\n"],"x_google_ignoreList":[]}