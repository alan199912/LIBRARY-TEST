{"version":3,"file":"719.e6e62e80b1e92fd2.js","mappings":"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","names":["i0","OTableComponent","constructor","renderer","this","EventEmitter","ngOnInit","componentValidations","ngAfterViewInit","checkbox","map","e","inputCheckArr","push","nativeElement","isValidateComponent","displayedColumns","length","dataSource","Error","key","value","trim","charAt","toUpperCase","slice","toLowerCase","match","allSelected","$event","checked","setProperty","DataSelectedArr","dataSelected","emit","selectedRow","index","indexOf","filter","_","i","selectors","CommonModule","i1","BadPracticesComponent","BestPracticesComponent","ViewerComponent","linkCode","isOpenCode","StepsFormApiComponent","COLUMNS","DATA_SOURCE_STEPS_FORM_INPUT","DATA_SOURCE_STEPS_FORM_OUTPUT","STEPS_FORM_INTERFACE","OStepsFormComponent","AbstractStep","setpsService","super","Subject","isLastStep","stepsForm","actualStep","nextStepName","name","currentStepNumber","getNext","pipe","takeUntil","onDestroy$","subscribe","nextStep","getPrevious","previousStep","steps","step","active","isFirstStep","stopEmmiter","stopSteps","stop","ngOnDestroy","next","complete","i2","StepsFormExamplesComponent","stepsFormService","STEPS_FORM_EXAMPLE_DIRECTIVE_HTML","STEPS_FORM_EXAMPLE_DIRECTIVE_TS","STEPS_FORM_EXAMPLE_FUNCTIONALITY_HTML","STEPS_FORM_EXAMPLE_FUNCTIONALITY_TS","initialize","previous","previousStepExample","nextStepExample","stopProgress","event","console","log","ctx","routes","path","component","StepsFormOverviewComponent","STEPS_FORM_BEST_PRACTICES","STEPS_FORM_BAD_PRACTICES","pathMatch","redirectTo","StepsFormRoutingModule","RouterModule","StepsFormModule","ONavModule","ClipboardDirective","host","navigator","clipboard","button","closest","querySelector","listen","target","pre","l","parentElement","code","u","writeText","f","innerText","setTimeout"],"sourceRoot":"webpack:///","sources":["./projects/ngx-obelisco/src/lib/components/o-table/o-table.component.html","./projects/ngx-obelisco/src/lib/components/o-table/o-table.component.ts","./src/app/components/bad-practices/bad-practices.component.html","./src/app/components/bad-practices/bad-practices.component.ts","./src/app/components/best-practices/best-practices.component.html","./src/app/components/best-practices/best-practices.component.ts","./src/app/components/viewer/viewer.component.html","./src/app/components/viewer/viewer.component.ts","./src/app/modules/section-components/steps-form/pages/steps-form-api/steps-form-api.component.ts","./src/app/modules/section-components/steps-form/pages/steps-form-api/steps-form-api.component.html","./projects/ngx-obelisco/src/lib/components/o-steps-form/o-steps-form.component.html","./projects/ngx-obelisco/src/lib/components/o-steps-form/o-steps-form.component.ts","./src/app/modules/section-components/steps-form/pages/steps-form-examples/steps-form-examples.component.html","./src/app/modules/section-components/steps-form/pages/steps-form-examples/steps-form-examples.component.ts","./src/app/modules/section-components/steps-form/steps-form-routing.module.ts","./src/app/modules/section-components/steps-form/pages/steps-form-overview/steps-form-overview.component.ts","./src/app/modules/section-components/steps-form/pages/steps-form-overview/steps-form-overview.component.html","./src/app/modules/section-components/steps-form/steps-form.module.ts","./src/app/shared/directives/copy/clipboard.directive.ts"],"sourcesContent":["<table\n  *ngIf=\"isValidateComponent\"\n  class=\"table\"\n  [ngClass]=\"{ 'table-bordered': isBordered, 'table-striped': isStriped, 'table-hover': isHover }\"\n>\n  <thead>\n    <tr>\n      <th scope=\"col\" *ngIf=\"isSelectable\">\n        <input type=\"checkbox\" aria-label=\"checkbox\" (change)=\"allSelected($event.target)\" />\n      </th>\n      <th scope=\"col\" *ngFor=\"let column of displayedColumns\">{{ column.value }}</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr *ngFor=\"let data of dataSource\">\n      <td *ngIf=\"isSelectable\">\n        <input #checkbox type=\"checkbox\" aria-label=\"checkbox\" (change)=\"selectedRow($event.target)\" />\n      </td>\n      <td *ngFor=\"let column of displayedColumns\" [innerHTML]=\"data[column.key]\"></td>\n    </tr>\n  </tbody>\n</table>\n","import { CommonModule } from '@angular/common';\nimport {\n  OnInit,\n  AfterViewInit,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  QueryList,\n  ViewChildren,\n  Renderer2\n} from '@angular/core';\nimport { Column } from '../../core/models/table.models';\n\n@Component({\n  selector: 'o-table',\n  templateUrl: './o-table.component.html',\n  styleUrls: ['./o-table.component.scss'],\n  standalone: true,\n  imports: [CommonModule]\n})\nexport class OTableComponent implements OnInit, AfterViewInit {\n  public isValidateComponent: boolean = false;\n\n  @Input() public displayedColumns: Column[] = [];\n  @Input() public dataSource: any[] = [];\n  @Input() public isBordered: boolean = false;\n  @Input() public isStriped: boolean = false;\n  @Input() public isHover: boolean = false;\n  @Input() public isSelectable: boolean = false;\n  @Output() public dataSelected = new EventEmitter<any>();\n\n  private inputCheckArr: ElementRef[] = [];\n  private DataSelectedArr: any[] = [];\n\n  @ViewChildren('checkbox') public checkbox!: QueryList<ElementRef>;\n\n  constructor(private readonly renderer: Renderer2) {}\n\n  public ngOnInit(): void {\n    this.componentValidations();\n  }\n\n  public ngAfterViewInit(): void {\n    this.checkbox.map((e) => {\n      this.inputCheckArr.push(e.nativeElement);\n    });\n  }\n\n  /**\n   * @description\n   * This method is used to validate the component\n   * For this component to work, the following conditions must be met:\n   * 1. The displayedColumns and displayedColumns property must be filled\n   * 2. The displayedColumns property must be has \"values\" and \"keys\" not null\n   * 3. The displayedColumns is trimmed for spaces\n   * 4. The displayedColumns is converted to capitalization\n   * 5. The displayedColumns is validated if \"value\" contains numbers or special characters and \"key\" contains numbers, special characters or accents\n   * @returns void\n   */\n  private componentValidations(): void {\n    this.isValidateComponent = this.displayedColumns.length > 0 && this.dataSource.length > 0;\n\n    if (!this.isValidateComponent) {\n      throw new Error('The displayedColumns and dataSource must not be empty');\n    }\n\n    this.displayedColumns.map((e) => {\n      if (e.key === '' || e.value === '') {\n        this.isValidateComponent = false;\n        throw new Error('The displayedColumns must not have null values');\n      }\n    });\n\n    this.displayedColumns.map((e) => (e.value = e.value.trim()));\n\n    this.displayedColumns = this.displayedColumns.map((e) => {\n      e.value = e.value.charAt(0).toUpperCase() + e.value.slice(1).toLowerCase();\n      return e;\n    });\n\n    this.displayedColumns.map((e) => {\n      if (e.value.match(/^[a-zA-ZáéíóúÁÉÍÓÚñÑ ]*$/) && e.key.match(/^[a-zA-Z ]*$/)) {\n        this.isValidateComponent = true;\n        return e;\n      } else {\n        this.isValidateComponent = false;\n        throw new Error(\n          'The displayedColumns value must not contain numbers or symbols and the key must not contain numbers, symbols or accents'\n        );\n      }\n    });\n  }\n\n  public allSelected($event: any): void {\n    if (!$event.checked) {\n      this.checkbox.map((e) => this.renderer.setProperty(e.nativeElement, 'checked', false));\n      this.DataSelectedArr = [];\n    } else {\n      this.checkbox.map((e) => this.renderer.setProperty(e.nativeElement, 'checked', true));\n      this.DataSelectedArr = this.dataSource;\n    }\n\n    this.dataSelected.emit(this.DataSelectedArr);\n  }\n\n  public selectedRow($event: any): void {\n    const index = this.inputCheckArr.indexOf($event);\n\n    if ($event.checked) {\n      this.DataSelectedArr.push(this.dataSource[index]);\n    } else {\n      this.DataSelectedArr = this.DataSelectedArr.filter((_, i) => i !== index);\n    }\n\n    this.dataSelected.emit(this.DataSelectedArr);\n  }\n}\n","<div class=\"section-bad-practices\">\n  <h3>Malas prácticas</h3>\n\n  <ul class=\"usability\">\n    <li class=\"dont\" *ngFor=\"let practice of practices\">\n      <p [innerHTML]=\"practice\"></p>\n    </li>\n  </ul>\n</div>\n","import { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-bad-practices',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './bad-practices.component.html',\n  styleUrls: ['./bad-practices.component.scss']\n})\nexport class BadPracticesComponent {\n  @Input() public practices: string[] = [];\n}\n","<div class=\"section-best-practices\">\n  <h3>Buenas prácticas</h3>\n\n  <ul class=\"usability\">\n    <li class=\"do\" *ngFor=\"let practice of practices\">\n      <p [innerHTML]=\"practice\"></p>\n    </li>\n  </ul>\n</div>\n","import { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-best-practices',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './best-practices.component.html',\n  styleUrls: ['./best-practices.component.scss']\n})\nexport class BestPracticesComponent {\n  @Input() public practices: string[] = [];\n}\n","<div class=\"example-wrapper\">\n  <div class=\"example-viewer\">\n    <p>{{ title }}</p>\n    <nav>\n      <ul class=\"nav flex-row nav-pills\">\n        <li class=\"nav-item d-flex\">\n          <a class=\"nav-link\" [class.active]=\"isOpenCode\" (click)=\"isOpenCode = !isOpenCode\">\n            <span>{{ linkCode }}</span>\n          </a>\n        </li>\n      </ul>\n    </nav>\n  </div>\n  <div class=\"wrapper\">\n    <nav *ngIf=\"isOpenCode && isNavCode\">\n      <ul class=\"nav flex-row nav-pills\">\n        <li class=\"nav-item d-flex\">\n          <a class=\"nav-link\" [class.active]=\"isWindowHTML\" (click)=\"isWindowHTML = true\">\n            <span>HTML</span>\n          </a>\n          <a class=\"nav-link\" [class.active]=\"!isWindowHTML\" (click)=\"isWindowHTML = false\">\n            <span>TS</span>\n          </a>\n        </li>\n      </ul>\n    </nav>\n    <ng-container *ngIf=\"!isOpenCode; else codeTemplate\">\n      <ng-content select=\"[component]\"></ng-content>\n    </ng-container>\n\n    <ng-template #codeTemplate>\n      <ng-container *ngIf=\"isWindowHTML; else windowTs\">\n        <ng-content select=\"[component-html]\"></ng-content>\n      </ng-container>\n    </ng-template>\n\n    <ng-template #windowTs>\n      <ng-content select=\"[component-ts]\"></ng-content>\n    </ng-template>\n  </div>\n</div>\n","import { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-viewer',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './viewer.component.html',\n  styleUrls: ['./viewer.component.scss']\n})\nexport class ViewerComponent {\n  @Input() public title!: string;\n  @Input() public isNavCode: boolean = false;\n\n  public isOpenCode: boolean = false;\n  public isWindowHTML: boolean = true;\n\n  get linkCode(): string {\n    return this.isOpenCode ? 'Esconder codigo' : 'Mostrar codigo';\n  }\n}\n","import { Component } from '@angular/core';\nimport { COLUMNS } from 'src/app/constants/components.constants';\nimport {\n  DATA_SOURCE_STEPS_FORM_INPUT,\n  DATA_SOURCE_STEPS_FORM_OUTPUT,\n  STEPS_FORM_INTERFACE\n} from 'src/app/constants/steps-form.constants';\n\n@Component({\n  selector: 'app-steps-form-api',\n  templateUrl: './steps-form-api.component.html',\n  styleUrls: ['./steps-form-api.component.scss']\n})\nexport class StepsFormApiComponent {\n  public columns = COLUMNS;\n  public dataSourceInputs = DATA_SOURCE_STEPS_FORM_INPUT;\n  public dataSourceOutput = DATA_SOURCE_STEPS_FORM_OUTPUT;\n  public interface = STEPS_FORM_INTERFACE;\n}\n","<section class=\"section-api\">\n  <div class=\"section-title\">\n    <h2>Referencia de API para el componente Pasos de un formulario de Obelisco</h2>\n    <pre class=\"code import\">\n      <code appPrism code=\"import { OStepsFormComponent } from '@ngx-obelisco';\"></code>\n    </pre>\n  </div>\n\n  <h3>Etiqueta</h3>\n  <hr />\n\n  <div class=\"section-selector\">\n    <h4>OStepsForm</h4>\n    <p>Selector: <strong>o-steps-form</strong></p>\n\n    <div class=\"section-properties\">\n      <h5>Como se usa</h5>\n\n      <p>\n        Se puede usar las directivas <strong>StepNextDirective</strong> y\n        <strong>StepPreviousDirective</strong> importado en el modulo donde se va a usar y agregarlo en botones\n      </p>\n      <pre class=\"code import\">\n        <code appPrism code=\"import { StepNextDirective } from 'ngx-obelisco';\"></code>\n      </pre>\n      <pre class=\"code import\">\n        <code appPrism code=\"import { StepPreviousDirective } from 'ngx-obelisco';\"></code>\n      </pre>\n\n      <p>\n        O de otra manera, se puede usar inyectando su servicio para inicializar los <strong>steps</strong> y luego darle\n        funcionalidad.\n      </p>\n\n      <pre class=\"code import\">\n        <code appPrism code=\"import { StepService } from 'ngx-obelisco';\"></code>\n      </pre>\n\n      <h5>Propiedades</h5>\n\n      <o-table\n        [displayedColumns]=\"columns\"\n        [dataSource]=\"dataSourceInputs\"\n        [isStriped]=\"true\"\n        [isBordered]=\"true\"\n      ></o-table>\n      <br />\n\n      <h5>Métodos</h5>\n      <o-table\n        [displayedColumns]=\"columns\"\n        [dataSource]=\"dataSourceOutput\"\n        [isStriped]=\"true\"\n        [isBordered]=\"true\"\n      ></o-table>\n    </div>\n  </div>\n\n  <h3>Tipos de datos</h3>\n  <hr />\n\n  <div class=\"section-type\">\n    <h4>StepForm</h4>\n    <p>Permite establecer los valores de la propiedad <strong>stepsForm</strong>.</p>\n\n    <div class=\"section-interface\">\n      <pre class=\"code import\">\n        <code appPrism>{{ interface }}</code>\n      </pre>\n    </div>\n  </div>\n</section>\n","<div class=\"stepper\">\n  <p class=\"step-title\">{{ actualStep.name }}</p>\n  <p class=\"step-next\" *ngIf=\"!isLastStep; else lastStep\">Paso siguiente: {{ nextStepName }}</p>\n  <ng-template #lastStep><p class=\"step-next\">Ultimo paso</p></ng-template>\n\n  <div class=\"steps\">\n    <div class=\"step\" [class.active]=\"step.active\" *ngFor=\"let step of stepsForm\"></div>\n  </div>\n  <span class=\"step-text\">Paso {{ currentStepNumber }} de {{ stepsForm.length }}</span>\n</div>\n","import { CommonModule } from '@angular/common';\nimport { Component, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { Subject, takeUntil } from 'rxjs';\nimport { AbstractStep } from '../../core/abstracts/step.abstracts';\nimport { StepForm } from '../../core/models/step-form.models';\nimport { StepService } from './../../core/services/step/step.service';\n\n@Component({\n  selector: 'o-steps-form',\n  templateUrl: './o-steps-form.component.html',\n  styleUrls: ['./o-steps-form.component.scss'],\n  standalone: true,\n  imports: [CommonModule]\n})\nexport class OStepsFormComponent extends AbstractStep implements OnInit, OnDestroy {\n  public actualStep!: StepForm;\n  public stepsForm: StepForm[] = [];\n\n  @Input() public steps: string[] = [];\n\n  @Output() public override stopSteps = new EventEmitter<boolean>();\n\n  private onDestroy$ = new Subject<void>();\n\n  get isLastStep(): boolean {\n    return this.stepsForm.indexOf(this.actualStep) === this.stepsForm.length - 1;\n  }\n\n  get nextStepName(): string {\n    const index = this.stepsForm.indexOf(this.actualStep);\n    return this.stepsForm[index + 1].name;\n  }\n\n  get currentStepNumber(): number {\n    return this.stepsForm.indexOf(this.actualStep) + 1;\n  }\n\n  constructor(protected override readonly setpsService: StepService) {\n    super(setpsService);\n  }\n\n  public ngOnInit(): void {\n    this.setpsService.getNext.pipe(takeUntil(this.onDestroy$)).subscribe(() => {\n      this.nextStep();\n    });\n\n    this.setpsService.getPrevious.pipe(takeUntil(this.onDestroy$)).subscribe(() => {\n      this.previousStep();\n    });\n\n    this.stepsForm = this.steps.map((step, index) => {\n      return {\n        name: step,\n        active: index === 0\n      };\n    });\n    this.actualStep = this.stepsForm[0];\n  }\n\n  public previousStep(): void {\n    this.setpsService.isFirstStep.emit(false);\n\n    this.actualStep = this.stepsForm[this.stepsForm.indexOf(this.actualStep) - 1];\n    this.stepsForm[this.currentStepNumber].active = false;\n\n    if (this.currentStepNumber === 1) {\n      this.setpsService.isFirstStep.emit(true);\n      return;\n    }\n  }\n\n  public nextStep(): void {\n    this.setpsService.isFirstStep.emit(false);\n\n    if (this.isLastStep) {\n      this.setpsService.stopEmmiter.emit(true);\n      this.stopSteps.emit(true);\n      this.setpsService.stop();\n      return;\n    }\n\n    this.actualStep = this.stepsForm[this.currentStepNumber];\n    this.actualStep.active = true;\n  }\n\n  public ngOnDestroy(): void {\n    this.onDestroy$.next();\n    this.onDestroy$.complete();\n  }\n}\n","<section class=\"section-example\">\n  <app-viewer title=\"Pasos de un formulario con botones y directiva\" [isNavCode]=\"true\">\n    <div component>\n      <o-steps-form [steps]=\"['Paso 1', 'Paso 2', 'Paso 3']\" (stopSteps)=\"stopProgress($event)\"></o-steps-form>\n      <br />\n      <button class=\"btn btn-sm btn-link mr-2\" (click)=\"previousStep()\">Anterior</button>\n      <button class=\"btn btn-sm btn-link\" (click)=\"nextStep()\">Siguiente</button>\n    </div>\n    <pre appClipboard component-html class=\"code\">\n      <button class=\"btn btn-clipboard\">Copiar</button>\n      <code appPrism language=\"html\">\n        {{ exmapleDirectiveHTML }}\n      </code>\n    </pre>\n\n    <pre appClipboard component-ts class=\"code\">\n      <button class=\"btn btn-clipboard\">Copiar</button>\n      <code appPrism>\n        {{ exmapleDirectiveTS }}\n      </code>\n    </pre>\n  </app-viewer>\n\n  <app-viewer title=\"Pasos de un formulario con botones y funcionalidad\" [isNavCode]=\"true\">\n    <div component>\n      <div class=\"stepper\">\n        <p class=\"step-title\">{{ actualStep.name }}</p>\n        <p class=\"step-next\" *ngIf=\"!isLastStep; else lastStep\">Paso siguiente: {{ nextStepName }}</p>\n        <ng-template #lastStep><p class=\"step-next\">Ultimo paso</p></ng-template>\n\n        <div class=\"steps\">\n          <div class=\"step\" [class.active]=\"step.active\" *ngFor=\"let step of stepsForm\"></div>\n        </div>\n        <span class=\"step-text\">Paso {{ currentStepNumber }} de {{ stepsForm.length }}</span>\n      </div>\n      <br />\n      <button class=\"btn btn-sm btn-link mr-2\" (click)=\"previousStepExample()\">Anterior</button>\n      <button class=\"btn btn-sm btn-link\" (click)=\"nextStepExample()\">Siguiente</button>\n    </div>\n    <pre appClipboard component-html class=\"code\">\n      <button class=\"btn btn-clipboard\">Copiar</button>\n      <code appPrism language=\"html\">\n        {{ exmapleFunctionalityHTML }}\n      </code>\n    </pre>\n\n    <pre appClipboard component-ts class=\"code\">\n      <button class=\"btn btn-clipboard\">Copiar</button>\n      <code appPrism>\n        {{ exmapleFunctionalityTS }}\n      </code>\n    </pre>\n  </app-viewer>\n</section>\n","import { Component, OnInit } from '@angular/core';\nimport { StepService } from 'projects/ngx-obelisco/src/public-api';\nimport {\n  STEPS_FORM_EXAMPLE_DIRECTIVE_HTML,\n  STEPS_FORM_EXAMPLE_DIRECTIVE_TS,\n  STEPS_FORM_EXAMPLE_FUNCTIONALITY_HTML,\n  STEPS_FORM_EXAMPLE_FUNCTIONALITY_TS\n} from 'src/app/constants/steps-form.constants';\n\n@Component({\n  selector: 'app-steps-form-examples',\n  templateUrl: './steps-form-examples.component.html',\n  styleUrls: ['./steps-form-examples.component.scss']\n})\nexport class StepsFormExamplesComponent implements OnInit {\n  public exmapleDirectiveHTML = STEPS_FORM_EXAMPLE_DIRECTIVE_HTML;\n  public exmapleDirectiveTS = STEPS_FORM_EXAMPLE_DIRECTIVE_TS;\n  public exmapleFunctionalityHTML = STEPS_FORM_EXAMPLE_FUNCTIONALITY_HTML;\n  public exmapleFunctionalityTS = STEPS_FORM_EXAMPLE_FUNCTIONALITY_TS;\n  public actualStep!: any;\n  public stepsForm: any[] = [];\n  public steps: string[] = ['Paso 1', 'Paso 2', 'Paso 3'];\n\n  get isLastStep(): boolean {\n    return this.stepsForm.indexOf(this.actualStep) === this.stepsForm.length - 1;\n  }\n\n  get nextStepName(): string {\n    const index = this.stepsForm.indexOf(this.actualStep);\n    return this.stepsForm[index + 1].name;\n  }\n\n  get currentStepNumber(): number {\n    return this.stepsForm.indexOf(this.actualStep) + 1;\n  }\n\n  constructor(private readonly stepsFormService: StepService) {}\n\n  public ngOnInit(): void {\n    this.stepsFormService.initialize();\n\n    this.stepsForm = this.steps.map((step, index) => {\n      return {\n        name: step,\n        active: index === 0\n      };\n    });\n    this.actualStep = this.stepsForm[0];\n  }\n\n  public nextStep(): void {\n    this.stepsFormService.next();\n  }\n\n  public previousStep(): void {\n    this.stepsFormService.previous();\n  }\n\n  public previousStepExample() {\n    this.actualStep = this.stepsForm[this.stepsForm.indexOf(this.actualStep) - 1];\n    this.stepsForm[this.currentStepNumber].active = false;\n\n    if (this.currentStepNumber === 1) {\n      return;\n    }\n  }\n  public nextStepExample() {\n    if (this.isLastStep) {\n      return;\n    }\n\n    this.actualStep = this.stepsForm[this.currentStepNumber];\n    this.actualStep.active = true;\n  }\n\n  public stopProgress(event: boolean): void {\n    if (event) {\n      console.log('Completado');\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { StepsFormApiComponent } from './pages/steps-form-api/steps-form-api.component';\nimport { StepsFormExamplesComponent } from './pages/steps-form-examples/steps-form-examples.component';\nimport { StepsFormOverviewComponent } from './pages/steps-form-overview/steps-form-overview.component';\n\nconst routes: Routes = [\n  { path: 'overview', component: StepsFormOverviewComponent },\n  { path: 'api', component: StepsFormApiComponent },\n  { path: 'examples', component: StepsFormExamplesComponent },\n  { path: '**', pathMatch: 'full', redirectTo: 'overview' }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class StepsFormRoutingModule {}\n","import { Component } from '@angular/core';\nimport { STEPS_FORM_BAD_PRACTICES, STEPS_FORM_BEST_PRACTICES } from 'src/app/constants/steps-form.constants';\n\n@Component({\n  selector: 'app-steps-form-overview',\n  templateUrl: './steps-form-overview.component.html',\n  styleUrls: ['./steps-form-overview.component.scss']\n})\nexport class StepsFormOverviewComponent {\n  public bestPractices = STEPS_FORM_BEST_PRACTICES;\n  public badPractices = STEPS_FORM_BAD_PRACTICES;\n}\n","<section class=\"section-overview\">\n  <p class=\"lead\">\n    Es un indicador de progreso que muestra visualmente los pasos de las acciones del usuario en un formulario. Los\n    ayuda a comprender la progresión de los formularios largos y reduce la incertidumbre a medida que completan cada\n    pantalla.\n  </p>\n\n  <h2>Tipos de pasos de un formulario</h2>\n  <p>\n    Los pasos de un formulario son guías visuales que muestran cuántos pasos llevará un proceso, en qué lugar se\n    encuentra la persona en este proceso y cuánto falta para completar una tarea.\n  </p>\n\n  <div class=\"section-design\">\n    <h2>Diseño y estructura (Contexto de uso)</h2>\n\n    <h3>En cuerpo de página</h3>\n\n    <p>Este componente se ubica siempre al principio del formulario, en la parte superior de la página.</p>\n  </div>\n\n  <img\n    class=\"card-img-top\"\n    src=\"https://gcba.github.io/estandares/componentes/paso-a-paso/formulario.svg\"\n    alt=\"imagen sobre carteles de alerta\"\n  />\n\n  <div class=\"section-usability\">\n    <h2>Usabilidad</h2>\n\n    <app-best-practices [practices]=\"bestPractices\"></app-best-practices>\n\n    <app-bad-practices [practices]=\"badPractices\"></app-bad-practices>\n  </div>\n</section>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { StepsFormRoutingModule } from './steps-form-routing.module';\nimport { StepsFormComponent } from './steps-form.component';\nimport { StepsFormOverviewComponent } from './pages/steps-form-overview/steps-form-overview.component';\nimport { StepsFormApiComponent } from './pages/steps-form-api/steps-form-api.component';\nimport { StepsFormExamplesComponent } from './pages/steps-form-examples/steps-form-examples.component';\nimport { ONavModule, OStepsFormComponent, OTableComponent } from 'projects/ngx-obelisco/src/public-api';\nimport { ViewerComponent } from 'src/app/components/viewer/viewer.component';\nimport { BestPracticesComponent } from 'src/app/components/best-practices/best-practices.component';\nimport { BadPracticesComponent } from 'src/app/components/bad-practices/bad-practices.component';\nimport { PrismDirective } from 'src/app/shared/directives/prism/prism.directive';\nimport { ClipboardDirective } from 'src/app/shared/directives/copy/clipboard.directive';\n\n@NgModule({\n  declarations: [StepsFormComponent, StepsFormOverviewComponent, StepsFormApiComponent, StepsFormExamplesComponent],\n  imports: [\n    CommonModule,\n    StepsFormRoutingModule,\n    ONavModule,\n    OTableComponent,\n    OStepsFormComponent,\n    ViewerComponent,\n    BestPracticesComponent,\n    BadPracticesComponent,\n    PrismDirective,\n    ClipboardDirective,\n    OStepsFormComponent\n  ]\n})\nexport class StepsFormModule {}\n","import { AfterViewInit, Directive, ElementRef, Renderer2 } from '@angular/core';\n\n@Directive({\n  selector: '[appClipboard]',\n  standalone: true\n})\nexport class ClipboardDirective implements AfterViewInit {\n  constructor(private readonly host: ElementRef, private readonly renderer: Renderer2) {}\n\n  ngAfterViewInit(): void {\n    if (navigator.clipboard) {\n      const button = this.host.nativeElement.closest('pre').querySelector('button');\n      this.renderer.listen(button, 'click', this.clipboard);\n    }\n  }\n\n  public clipboard(event: PointerEvent): void {\n    const button = event.target as HTMLButtonElement;\n    const pre = button?.parentElement;\n    const code = pre?.querySelector('code');\n    const text = code?.innerText;\n    navigator.clipboard.writeText(text!);\n    button.innerText = 'Codigo copiado!';\n\n    setTimeout(() => {\n      button.innerText = 'Copiar';\n    }, 1000);\n  }\n}\n"],"x_google_ignoreList":[]}