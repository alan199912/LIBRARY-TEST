{"version":3,"file":"203.cc7ec0b08a28ab65.js","mappings":"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","names":["i0","OTableComponent","constructor","renderer","this","EventEmitter","ngOnInit","componentValidations","ngAfterViewInit","checkbox","map","e","inputCheckArr","push","nativeElement","isValidateComponent","displayedColumns","length","dataSource","Error","key","value","trim","charAt","toUpperCase","slice","toLowerCase","match","allSelected","$event","checked","setProperty","DataSelectedArr","dataSelected","emit","selectedRow","index","indexOf","filter","_","i","selectors","CommonModule","i1","BadPracticesComponent","BestPracticesComponent","ViewerComponent","linkCode","isOpenCode","PaginationApiComponent","name","description","COLUMNS","PaginationItemComponent","PaginationNumberComponent","OPaginationComponent","getIsFirstPage","actualPage","getIsLastPage","pagesArr","Array","from","totalPages","keys","pagesToShow","lastIndex","isShowTopTrimmer","selectedPage","page","isBlockEvent","currentPage","isShowBottomTrimmer","onPrev","onNext","PaginationExamplesComponent","PAGINATION_EXAMPLE_HTML","PAGINATION_EXAMPLE_TS","event","console","log","ctx","routes","path","component","PaginationOverviewComponent","PAGINATION_BEST_PRACTICES","PAGINATION_BAD_PRACTICES","pathMatch","redirectTo","PaginationRoutingModule","RouterModule","OPaginationModule","PaginationModule","ONavModule","ClipboardDirective","host","navigator","clipboard","button","closest","querySelector","listen","target","pre","d","parentElement","code","m","writeText","h","innerText","setTimeout"],"sourceRoot":"webpack:///","sources":["./projects/ngx-obelisco/table/o-table.component.html","./projects/ngx-obelisco/table/o-table.component.ts","./src/app/components/bad-practices/bad-practices.component.html","./src/app/components/bad-practices/bad-practices.component.ts","./src/app/components/best-practices/best-practices.component.html","./src/app/components/best-practices/best-practices.component.ts","./src/app/components/viewer/viewer.component.html","./src/app/components/viewer/viewer.component.ts","./src/app/modules/section-components/pagination/pages/pagination-api/pagination-api.component.ts","./src/app/modules/section-components/pagination/pages/pagination-api/pagination-api.component.html","./projects/ngx-obelisco/pagination/components/pagination-item/pagination-item.component.ts","./projects/ngx-obelisco/pagination/components/pagination-item/pagination-item.component.html","./projects/ngx-obelisco/pagination/components/pagination-number/pagination-number.component.ts","./projects/ngx-obelisco/pagination/components/pagination-number/pagination-number.component.html","./projects/ngx-obelisco/pagination/o-pagination.component.html","./projects/ngx-obelisco/pagination/o-pagination.component.ts","./src/app/modules/section-components/pagination/pages/pagination-examples/pagination-examples.component.ts","./src/app/modules/section-components/pagination/pages/pagination-examples/pagination-examples.component.html","./src/app/modules/section-components/pagination/pagination-routing.module.ts","./src/app/modules/section-components/pagination/pages/pagination-overview/pagination-overview.component.ts","./src/app/modules/section-components/pagination/pages/pagination-overview/pagination-overview.component.html","./projects/ngx-obelisco/pagination/o-pagination.module.ts","./src/app/modules/section-components/pagination/pagination.module.ts","./src/app/shared/directives/copy/clipboard.directive.ts"],"sourcesContent":["<table\n  *ngIf=\"isValidateComponent\"\n  class=\"table\"\n  [ngClass]=\"{ 'table-bordered': isBordered, 'table-striped': isStriped, 'table-hover': isHover }\"\n>\n  <thead>\n    <tr>\n      <th scope=\"col\" *ngIf=\"isSelectable\">\n        <input type=\"checkbox\" aria-label=\"checkbox\" (change)=\"allSelected($event.target)\" />\n      </th>\n      <th scope=\"col\" *ngFor=\"let column of displayedColumns\">{{ column.value }}</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr *ngFor=\"let data of dataSource\">\n      <td *ngIf=\"isSelectable\">\n        <input #checkbox type=\"checkbox\" aria-label=\"checkbox\" (change)=\"selectedRow($event.target)\" />\n      </td>\n      <td *ngFor=\"let column of displayedColumns\" [innerHTML]=\"data[column.key]\"></td>\n    </tr>\n  </tbody>\n</table>\n","import { CommonModule } from '@angular/common';\nimport {\n  OnInit,\n  AfterViewInit,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  QueryList,\n  ViewChildren,\n  Renderer2\n} from '@angular/core';\nimport { Column } from 'ngx-obelisco/core/models';\n\n@Component({\n  selector: 'o-table',\n  templateUrl: './o-table.component.html',\n  styleUrls: ['./o-table.component.scss'],\n  standalone: true,\n  imports: [CommonModule]\n})\nexport class OTableComponent implements OnInit, AfterViewInit {\n  public isValidateComponent: boolean = false;\n\n  @Input() public displayedColumns: Column[] = [];\n  @Input() public dataSource: any[] = [];\n  @Input() public isBordered: boolean = false;\n  @Input() public isStriped: boolean = false;\n  @Input() public isHover: boolean = false;\n  @Input() public isSelectable: boolean = false;\n  @Output() public dataSelected = new EventEmitter<any>();\n\n  private inputCheckArr: ElementRef[] = [];\n  private DataSelectedArr: any[] = [];\n\n  @ViewChildren('checkbox') public checkbox!: QueryList<ElementRef>;\n\n  constructor(private readonly renderer: Renderer2) {}\n\n  public ngOnInit(): void {\n    this.componentValidations();\n  }\n\n  public ngAfterViewInit(): void {\n    this.checkbox.map((e) => {\n      this.inputCheckArr.push(e.nativeElement);\n    });\n  }\n\n  /**\n   * @description\n   * This method is used to validate the component\n   * For this component to work, the following conditions must be met:\n   * 1. The displayedColumns and displayedColumns property must be filled\n   * 2. The displayedColumns property must be has \"values\" and \"keys\" not null\n   * 3. The displayedColumns is trimmed for spaces\n   * 4. The displayedColumns is converted to capitalization\n   * 5. The displayedColumns is validated if \"value\" contains numbers or special characters and \"key\" contains numbers, special characters or accents\n   * @returns void\n   */\n  private componentValidations(): void {\n    this.isValidateComponent = this.displayedColumns.length > 0 && this.dataSource.length > 0;\n\n    if (!this.isValidateComponent) {\n      throw new Error('The displayedColumns and dataSource must not be empty');\n    }\n\n    this.displayedColumns.map((e) => {\n      if (e.key === '' || e.value === '') {\n        this.isValidateComponent = false;\n        throw new Error('The displayedColumns must not have null values');\n      }\n    });\n\n    this.displayedColumns.map((e) => (e.value = e.value.trim()));\n\n    this.displayedColumns = this.displayedColumns.map((e) => {\n      e.value = e.value.charAt(0).toUpperCase() + e.value.slice(1).toLowerCase();\n      return e;\n    });\n\n    this.displayedColumns.map((e) => {\n      if (e.value.match(/^[a-zA-ZáéíóúÁÉÍÓÚñÑ ]*$/) && e.key.match(/^[a-zA-Z ]*$/)) {\n        this.isValidateComponent = true;\n        return e;\n      } else {\n        this.isValidateComponent = false;\n        throw new Error(\n          'The displayedColumns value must not contain numbers or symbols and the key must not contain numbers, symbols or accents'\n        );\n      }\n    });\n  }\n\n  public allSelected($event: any): void {\n    if (!$event.checked) {\n      this.checkbox.map((e) => this.renderer.setProperty(e.nativeElement, 'checked', false));\n      this.DataSelectedArr = [];\n    } else {\n      this.checkbox.map((e) => this.renderer.setProperty(e.nativeElement, 'checked', true));\n      this.DataSelectedArr = this.dataSource;\n    }\n\n    this.dataSelected.emit(this.DataSelectedArr);\n  }\n\n  public selectedRow($event: any): void {\n    const index = this.inputCheckArr.indexOf($event);\n\n    if ($event.checked) {\n      this.DataSelectedArr.push(this.dataSource[index]);\n    } else {\n      this.DataSelectedArr = this.DataSelectedArr.filter((_, i) => i !== index);\n    }\n\n    this.dataSelected.emit(this.DataSelectedArr);\n  }\n}\n","<div class=\"section-bad-practices\">\n  <h3>Malas prácticas</h3>\n\n  <ul class=\"usability\">\n    <li class=\"dont\" *ngFor=\"let practice of practices\">\n      <p [innerHTML]=\"practice\"></p>\n    </li>\n  </ul>\n</div>\n","import { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-bad-practices',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './bad-practices.component.html',\n  styleUrls: ['./bad-practices.component.scss']\n})\nexport class BadPracticesComponent {\n  @Input() public practices: string[] = [];\n}\n","<div class=\"section-best-practices\">\n  <h3>Buenas prácticas</h3>\n\n  <ul class=\"usability\">\n    <li class=\"do\" *ngFor=\"let practice of practices\">\n      <p [innerHTML]=\"practice\"></p>\n    </li>\n  </ul>\n</div>\n","import { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-best-practices',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './best-practices.component.html',\n  styleUrls: ['./best-practices.component.scss']\n})\nexport class BestPracticesComponent {\n  @Input() public practices: string[] = [];\n}\n","<div class=\"example-wrapper\">\n  <div class=\"example-viewer\">\n    <p>{{ title }}</p>\n    <nav>\n      <ul class=\"nav flex-row nav-pills\">\n        <li class=\"nav-item d-flex\">\n          <a class=\"nav-link\" [class.active]=\"isOpenCode\" (click)=\"isOpenCode = !isOpenCode\">\n            <span>{{ linkCode }}</span>\n          </a>\n        </li>\n      </ul>\n    </nav>\n  </div>\n  <div class=\"wrapper\">\n    <nav *ngIf=\"isOpenCode && isNavCode\">\n      <ul class=\"nav flex-row nav-pills\">\n        <li class=\"nav-item d-flex\">\n          <a class=\"nav-link\" [class.active]=\"isWindowHTML\" (click)=\"isWindowHTML = true\">\n            <span>HTML</span>\n          </a>\n          <a class=\"nav-link\" [class.active]=\"!isWindowHTML\" (click)=\"isWindowHTML = false\">\n            <span>TS</span>\n          </a>\n        </li>\n      </ul>\n    </nav>\n    <ng-container *ngIf=\"!isOpenCode; else codeTemplate\">\n      <ng-content select=\"[component]\"></ng-content>\n    </ng-container>\n\n    <ng-template #codeTemplate>\n      <ng-container *ngIf=\"isWindowHTML; else windowTs\">\n        <ng-content select=\"[component-html]\"></ng-content>\n      </ng-container>\n    </ng-template>\n\n    <ng-template #windowTs>\n      <ng-content select=\"[component-ts]\"></ng-content>\n    </ng-template>\n  </div>\n</div>\n","import { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-viewer',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './viewer.component.html',\n  styleUrls: ['./viewer.component.scss']\n})\nexport class ViewerComponent {\n  @Input() public title!: string;\n  @Input() public isNavCode: boolean = false;\n\n  public isOpenCode: boolean = false;\n  public isWindowHTML: boolean = true;\n\n  get linkCode(): string {\n    return this.isOpenCode ? 'Esconder codigo' : 'Mostrar codigo';\n  }\n}\n","import { Component } from '@angular/core';\nimport { COLUMNS } from 'src/app/constants/components.constants';\n\n@Component({\n  selector: 'app-pagination-api',\n  templateUrl: './pagination-api.component.html',\n  styleUrls: ['./pagination-api.component.scss']\n})\nexport class PaginationApiComponent {\n  public dataSourcePaginationProperties = [\n    {\n      name: '@Input() <br/> totalPages: number',\n      description: 'Se utiliza para establecer el número total de páginas.'\n    },\n    {\n      name: '@Input() <br/> ariaLabel: string',\n      description: 'Se utiliza para establecer el texto de la etiqueta aria-label.'\n    },\n    {\n      name: '@Input() <br/> actualPage: number',\n      description: 'Se utiliza para establecer la página actual. Por defecto es 1.'\n    }\n  ];\n  public dataSourcePaginationMethods = [\n    {\n      name: '@Output() <br/> currentPage: EventEmitter&lt;number&gt;',\n      description: 'Se utiliza para obtener la página actual.'\n    }\n  ];\n\n  public columnsPagination = COLUMNS;\n}\n","<section class=\"section-api\">\n  <div class=\"section-title\">\n    <h2>Referencia de API para el componente Paginacion de Obelisco</h2>\n    <pre class=\"code import\">\n      <code appPrism language=\"javascript\" code=\"import { OPaginationModule } from 'ngx-obelisco';\"></code>\n    </pre>\n  </div>\n\n  <h3>Etiqueta</h3>\n  <hr />\n\n  <div class=\"section-selector\">\n    <h4>OPagination</h4>\n    <p>Selector: <strong>o-pagination</strong></p>\n    <div class=\"section-properties\">\n      <h5>Propiedades</h5>\n      <o-table\n        [displayedColumns]=\"columnsPagination\"\n        [dataSource]=\"dataSourcePaginationProperties\"\n        [isStriped]=\"true\"\n        [isBordered]=\"true\"\n      ></o-table>\n    </div>\n    <div class=\"section-properties\">\n      <h5>Métodos</h5>\n      <o-table\n        [displayedColumns]=\"columnsPagination\"\n        [dataSource]=\"dataSourcePaginationMethods\"\n        [isStriped]=\"true\"\n        [isBordered]=\"true\"\n      ></o-table>\n    </div>\n  </div>\n</section>\n","import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'o-pagination-item',\n  templateUrl: './pagination-item.component.html',\n  styleUrls: ['./pagination-item.component.scss']\n})\nexport class PaginationItemComponent {\n  @Input() public isActive!: boolean;\n  @Input() public isDisabled!: boolean;\n}\n","<li class=\"page-item\" [class.active]=\"isActive\" [class.disabled]=\"isDisabled\">\n  <a class=\"page-link\">\n    <ng-content></ng-content>\n  </a>\n</li>\n","import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'o-pagination-number',\n  templateUrl: './pagination-number.component.html',\n  styleUrls: ['./pagination-number.component.scss']\n})\nexport class PaginationNumberComponent {\n  @Input() public index!: number;\n  @Input() public current!: number;\n}\n","<o-pagination-item [isActive]=\"index === current\">\n  {{ index + 1 }}\n</o-pagination-item>\n","<nav [attr.aria-label]=\"ariaLabel\">\n  <ul class=\"pagination\">\n    <o-pagination-item *ngIf=\"!getIsFirstPage\" (click)=\"onPrev()\">\n      <span class=\"page-previous-icon\" [attr.aria-hidden]=\"true\"></span>\n      <span class=\"page-previous-text\">Anterior</span>\n    </o-pagination-item>\n\n    <div *ngIf=\"isShowBottomTrimmer\">\n      <o-pagination-number [index]=\"0\" [current]=\"actualPage\" (click)=\"selectedPage(0)\"> </o-pagination-number>\n      <o-pagination-item [isDisabled]=\"true\">...</o-pagination-item>\n    </div>\n\n    <o-pagination-number *ngFor=\"let i of pagesToShow\" [index]=\"i\" [current]=\"actualPage\" (click)=\"selectedPage(i)\">\n    </o-pagination-number>\n\n    <div *ngIf=\"isShowTopTrimmer\">\n      <o-pagination-item [isDisabled]=\"true\">...</o-pagination-item>\n      <o-pagination-number [index]=\"lastIndex\" [current]=\"actualPage\" (click)=\"selectedPage(lastIndex)\">\n      </o-pagination-number>\n    </div>\n\n    <o-pagination-item *ngIf=\"!getIsLastPage\" (click)=\"onNext()\">\n      <span class=\"page-next-text\">Siguiente</span>\n      <span class=\"page-next-icon\" [attr.aria-hidden]=\"true\"></span>\n    </o-pagination-item>\n  </ul>\n</nav>\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\n\n@Component({\n  selector: 'o-pagination',\n  templateUrl: './o-pagination.component.html',\n  styleUrls: ['./o-pagination.component.scss']\n})\nexport class OPaginationComponent implements OnInit {\n  @Input() public totalPages!: number;\n  @Input() public ariaLabel!: string;\n  @Input() public actualPage: number = 1;\n  @Output() public currentPage: EventEmitter<number> = new EventEmitter<number>();\n\n  public pagesArr: number[] = [];\n  public isShowTopTrimmer = false;\n  public isShowBottomTrimmer = false;\n  public pagesToShow: number[] = [];\n  public lastIndex!: number;\n  public isBlockEvent = false;\n\n  get getIsFirstPage(): boolean {\n    return this.actualPage === 0;\n  }\n\n  get getIsLastPage(): boolean {\n    return this.actualPage === this.pagesArr.length - 1;\n  }\n\n  ngOnInit(): void {\n    this.pagesArr = Array.from(Array(this.totalPages).keys());\n    this.pagesToShow = this.pagesArr;\n    this.lastIndex = this.pagesArr.length - 1;\n    this.isShowTopTrimmer = true;\n    this.selectedPage(this.actualPage - 1);\n  }\n\n  public selectedPage(page: number): void {\n    if (this.actualPage === page) return;\n    this.actualPage = page;\n\n    if (!this.isBlockEvent) {\n      this.currentPage.emit(page + 1);\n    }\n\n    if (this.pagesArr.length > 2) {\n      if (this.actualPage < 2) {\n        this.lastIndex = this.pagesArr.length - 1;\n        this.pagesToShow = [0, 1];\n        this.isShowTopTrimmer = true;\n        this.isShowBottomTrimmer = false;\n      } else if (this.actualPage > this.lastIndex - 2) {\n        this.pagesToShow = this.pagesArr.slice(-2);\n        this.isShowTopTrimmer = false;\n        this.isShowBottomTrimmer = true;\n      } else {\n        this.pagesToShow = this.pagesArr.slice(this.actualPage - 1, this.actualPage + 2);\n        this.isShowBottomTrimmer = true;\n        this.isShowTopTrimmer = true;\n      }\n    }\n  }\n\n  public onPrev(): void {\n    this.isBlockEvent = true;\n    this.currentPage.emit(this.actualPage);\n    if (this.actualPage > 0) this.selectedPage(this.actualPage - 1);\n    this.isBlockEvent = false;\n  }\n\n  public onNext(): void {\n    this.isBlockEvent = true;\n    if (this.actualPage < this.pagesArr.length - 1) this.selectedPage(this.actualPage + 1);\n    this.currentPage.emit(this.actualPage + 1);\n    this.isBlockEvent = false;\n  }\n}\n","import { Component } from '@angular/core';\nimport { PAGINATION_EXAMPLE_HTML, PAGINATION_EXAMPLE_TS } from 'src/app/constants/pagination.constants';\n\n@Component({\n  selector: 'app-pagination-examples',\n  templateUrl: './pagination-examples.component.html',\n  styleUrls: ['./pagination-examples.component.scss']\n})\nexport class PaginationExamplesComponent {\n  public exampleHTML = PAGINATION_EXAMPLE_HTML;\n  public exampleTS = PAGINATION_EXAMPLE_TS;\n\n  public actualPage(event: number): void {\n    console.log(event);\n  }\n}\n","<section class=\"section-example\">\n  <app-viewer title=\"Paginacion\" [isNavCode]=\"true\">\n    <o-pagination\n      component\n      [totalPages]=\"10\"\n      [actualPage]=\"5\"\n      ariaLabel=\"Primer ejemplo de paginación simple\"\n      (currentPage)=\"actualPage($event)\"\n    >\n    </o-pagination>\n    <pre appClipboard component-html class=\"code\">\n      <button class=\"btn btn-clipboard\">Copiar</button>\n      <code appPrism language=\"html\">\n        {{ exampleHTML }}\n      </code>\n    </pre>\n    <pre appClipboard component-ts class=\"code\">\n      <button class=\"btn btn-clipboard\">Copiar</button>\n      <code appPrism>\n        {{ exampleTS }}\n      </code>\n    </pre>\n  </app-viewer>\n</section>\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { PaginationApiComponent } from './pages/pagination-api/pagination-api.component';\nimport { PaginationExamplesComponent } from './pages/pagination-examples/pagination-examples.component';\nimport { PaginationOverviewComponent } from './pages/pagination-overview/pagination-overview.component';\n\nconst routes: Routes = [\n  { path: 'overview', component: PaginationOverviewComponent },\n  { path: 'api', component: PaginationApiComponent },\n  { path: 'examples', component: PaginationExamplesComponent },\n  { path: '**', pathMatch: 'full', redirectTo: 'overview' }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class PaginationRoutingModule {}\n","import { Component } from '@angular/core';\nimport { PAGINATION_BAD_PRACTICES, PAGINATION_BEST_PRACTICES } from 'src/app/constants/pagination.constants';\n\n@Component({\n  selector: 'app-pagination-overview',\n  templateUrl: './pagination-overview.component.html',\n  styleUrls: ['./pagination-overview.component.scss']\n})\nexport class PaginationOverviewComponent {\n  public bestPractices = PAGINATION_BEST_PRACTICES;\n  public badPractices = PAGINATION_BAD_PRACTICES;\n}\n","<section class=\"section-overview\">\n  <p class=\"lead\">\n    El paginado se usa en la parte inferior de la página cuando hay demasiados resultados de búsqueda para evitar que el\n    usuario se sienta abrumado por la cantidad de información.\n  </p>\n  <article>\n    <h2>Tipos de paginado</h2>\n    <h3>Paginado</h3>\n    <p>\n      Los paginados siempre van centrados con respecto a la página. La cantidad máxima de botones a mostrar es de 5\n      (incluidos los puntos suspensivos).\n    </p>\n    <p>Oculte el Anterior en la primera página del conjunto y oculte el Siguiente en la última página del conjunto.</p>\n    <p>\n      <strong>Truncamiento</strong>: cuando el número de páginas supera el límite máximo de visualización, se utiliza\n      una elipsis, puntos suspensivos (…), para truncar las páginas restantes.\n    </p>\n    <h2>Diseño y estructura (contexto de uso)</h2>\n    <h3>Paginado</h3>\n    <p>Oculte el ANTERIOR en la primera página del conjunto y oculte el PRÓXIMO en la última página del conjunto.</p>\n    <p>\n      <img\n        src=\"https://gcba.github.io/estandares/componentes/paginado/paginado-1.svg\"\n        alt=\"completar\"\n        class=\"img-fluid\"\n      />\n    </p>\n    <h3>Paginado en documentación</h3>\n    <p>Para documentación como la pagina actual puede utilizar solo los botones de Anterior y Siguiente.</p>\n    <p>\n      <img\n        src=\"https://gcba.github.io/estandares/componentes/paginado/paginado-2.svg\"\n        alt=\"completar\"\n        class=\"img-flui\"\n      />\n    </p>\n    <div class=\"section-usability\">\n      <h2>Usabilidad</h2>\n      <app-best-practices [practices]=\"bestPractices\"></app-best-practices>\n      <app-bad-practices [practices]=\"badPractices\"></app-bad-practices>\n    </div>\n  </article>\n</section>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { OPaginationComponent } from './o-pagination.component';\nimport { PaginationNumberComponent } from './components/pagination-number/pagination-number.component';\nimport { PaginationItemComponent } from './components/pagination-item/pagination-item.component';\n\n@NgModule({\n  declarations: [OPaginationComponent, PaginationNumberComponent, PaginationItemComponent],\n  imports: [CommonModule],\n  exports: [OPaginationComponent]\n})\nexport class OPaginationModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { PaginationRoutingModule } from './pagination-routing.module';\nimport { PaginationComponent } from './pagination.component';\nimport { PaginationApiComponent } from './pages/pagination-api/pagination-api.component';\nimport { PaginationOverviewComponent } from './pages/pagination-overview/pagination-overview.component';\nimport { PaginationExamplesComponent } from './pages/pagination-examples/pagination-examples.component';\nimport { OPaginationModule } from 'projects/ngx-obelisco/pagination';\nimport { ONavModule } from 'projects/ngx-obelisco/nav';\nimport { OTableComponent } from 'projects/ngx-obelisco/table';\nimport { BestPracticesComponent } from 'src/app/components/best-practices/best-practices.component';\nimport { BadPracticesComponent } from 'src/app/components/bad-practices/bad-practices.component';\nimport { ViewerComponent } from 'src/app/components/viewer/viewer.component';\nimport { ClipboardDirective } from 'src/app/shared/directives/copy/clipboard.directive';\nimport { PrismDirective } from 'src/app/shared/directives/prism/prism.directive';\n\n@NgModule({\n  declarations: [PaginationComponent, PaginationApiComponent, PaginationOverviewComponent, PaginationExamplesComponent],\n  imports: [\n    CommonModule,\n    PaginationRoutingModule,\n    ONavModule,\n    BestPracticesComponent,\n    BadPracticesComponent,\n    OTableComponent,\n    ViewerComponent,\n    OPaginationModule,\n    ClipboardDirective,\n    PrismDirective\n  ]\n})\nexport class PaginationModule {}\n","import { AfterViewInit, Directive, ElementRef, Renderer2 } from '@angular/core';\n\n@Directive({\n  selector: '[appClipboard]',\n  standalone: true\n})\nexport class ClipboardDirective implements AfterViewInit {\n  constructor(private readonly host: ElementRef, private readonly renderer: Renderer2) {}\n\n  ngAfterViewInit(): void {\n    if (navigator.clipboard) {\n      const button = this.host.nativeElement.closest('pre').querySelector('button');\n      this.renderer.listen(button, 'click', this.clipboard);\n    }\n  }\n\n  public clipboard(event: PointerEvent): void {\n    const button = event.target as HTMLButtonElement;\n    const pre = button?.parentElement;\n    const code = pre?.querySelector('code');\n    const text = code?.innerText;\n    navigator.clipboard.writeText(text!);\n    button.innerText = 'Codigo copiado!';\n\n    setTimeout(() => {\n      button.innerText = 'Copiar';\n    }, 1000);\n  }\n}\n"],"x_google_ignoreList":[]}