{"version":3,"file":"930.fd0804777e8adb26.js","mappings":"0NAOMA,gBAAqC,aACUA,4DAAUA,8BAA0B,GAAjFA,oCAEFA,gBAAwDA,SAAkBA,kCAAlBA,iEAKxDA,cAAyB,eACgCA,4DAAUA,8BAA0B,GAA3FA,mCAEFA,8DAA4CA,4DAJ9CA,cACEA,sBAGAA,sBACFA,+BAJOA,sCAGkBA,6JAlB7BA,mBAIC,UAJDA,CAIC,QAGKA,sBAGAA,sBACFA,UAEFA,iBACEA,sBAMFA,gCAjBAA,+DAIqBA,sCAGkBA,6CAIhBA,wCCQlB,IAAMC,EAAb,MAAM,MAAOA,EAgBXC,YAA6BC,mBAftBC,0BAA+B,EAEtBA,sBAA6B,GAC7BA,gBAAoB,GACpBA,iBAAsB,EACtBA,gBAAqB,EACrBA,cAAmB,EACnBA,mBAAwB,EACvBA,kBAAe,IAAIC,MAE5BD,mBAA8B,GAC9BA,qBAAyB,EAImB,CAE7CE,WACLF,KAAKG,sBACN,CAEMC,kBACLJ,KAAKK,SAASC,IAAKC,IACjBP,KAAKQ,cAAcC,KAAKF,EAAEG,cAA1B,EAEH,CAaOP,uBAGN,GAFAH,KAAKW,oBAAsBX,KAAKY,iBAAiBC,OAAS,GAAKb,KAAKc,WAAWD,OAAS,GAEnFb,KAAKW,oBACR,MAAM,IAAII,MAAM,yDAGlBf,KAAKY,iBAAiBN,IAAKC,IACzB,GAAc,KAAVA,EAAES,KAA0B,KAAZT,EAAEU,MACpB,WAAKN,qBAAsB,EACrB,IAAII,MAAM,iDAAV,GAIVf,KAAKY,iBAAiBN,IAAKC,GAAOA,EAAEU,MAAQV,EAAEU,MAAMC,QAEpDlB,KAAKY,iBAAmBZ,KAAKY,iBAAiBN,IAAKC,IACjDA,EAAEU,MAAQV,EAAEU,MAAME,OAAO,GAAGC,cAAgBb,EAAEU,MAAMI,MAAM,GAAGC,cACtDf,IAGTP,KAAKY,iBAAiBN,IAAKC,IACzB,GAAIA,EAAEU,MAAMM,MAAM,iEAA+BhB,EAAES,IAAIO,MAAM,gBAC3D,YAAKZ,qBAAsB,EACpBJ,EAEP,WAAKI,qBAAsB,EACrB,IAAII,MACR,0HADI,EAKX,CAEMS,YAAYC,GACZA,EAAOC,SAIV1B,KAAKK,SAASC,IAAKC,GAAMP,KAAKD,SAAS4B,YAAYpB,EAAEG,cAAe,WAAW,IAC/EV,KAAK4B,gBAAkB5B,KAAKc,aAJ5Bd,KAAKK,SAASC,IAAKC,GAAMP,KAAKD,SAAS4B,YAAYpB,EAAEG,cAAe,WAAW,IAC/EV,KAAK4B,gBAAkB,IAMzB5B,KAAK6B,aAAaC,KAAK9B,KAAK4B,gBAC7B,CAEMG,YAAYN,GACjB,MAAMO,EAAQhC,KAAKQ,cAAcyB,QAAQR,GAErCA,EAAOC,QACT1B,KAAK4B,gBAAgBnB,KAAKT,KAAKc,WAAWkB,IAE1ChC,KAAK4B,gBAAkB5B,KAAK4B,gBAAgBM,OAAO,CAACC,EAAGC,IAAMA,IAAMJ,GAGrEhC,KAAK6B,aAAaC,KAAK9B,KAAK4B,gBAC7B,+CA/FU/B,GAAeD,uCAAfC,EAAewC,krBDtB5BzC,8BACGA,mDCmBS0C,KAAYC,kBAEX1C,CAAb,sGCRID,eAAqC,SAArCA,CAAqC,SAArCA,CAAqC,SAGmBA,+EAAwB,EAAI,GAC5EA,gBAAMA,gBAAIA,UAEZA,eAAmDA,+EAAwB,EAAK,GAC9EA,gBAAMA,cAAEA,wCAJUA,wCAGAA,gEAM1BA,SACEA,SACFA,+BAGEA,SACEA,WACFA,iCAFAA,iEAAeA,6BAAoB,oCAMnCA,qJC3BC,IAAM4C,EAAb,MAAM,MAAOA,EAPb1C,cASkBE,gBAAqB,EAE9BA,iBAAsB,EACtBA,mBAAwB,CAKhC,CAHKyC,eACF,OAAOzC,KAAK0C,WAAa,kBAAoB,gBAC9C,+CATUF,EAAe,0BAAfA,EAAeH,8YDV5BzC,iBAA6B,UAA7BA,CAA6B,OAEtBA,SAAWA,QACdA,eAAK,SAALA,CAAK,SAALA,CAAK,SAGiDA,6DAC9CA,gBAAMA,SAAcA,kBAM9BA,kBACEA,wBAYAA,iCAIAA,2CAMAA,2CAGFA,kCArCKA,wBAIuBA,sCACZA,2BAORA,iDAYSA,qCAAmB,8BCpB1B0C,KAAYC,uwBAIXC,CAAb,oJCGO,IAAMG,EAAb,MAAM,MAAOA,EALb7C,cAMSE,gBAAa4C,KACb5C,aAAU6C,KACV7C,uBAAoB8C,KACpB9C,2BAAwB+C,IAChC,+CALYJ,EAAiB,0BAAjBA,EAAiBN,wYCb9BzC,qBAA6B,UAA7BA,CAA6B,QAErBA,kEAAsDA,QAC1DA,iBACEA,oCACFA,4BAGFA,cAAIA,oBAAQA,QACZA,eAEAA,kBAA8B,SACxBA,mBAAMA,QACVA,cAAGA,uBAAUA,mBAAQA,oBAAOA,UAE5BA,kBAAgC,SAC1BA,wBAAWA,QACfA,sBACFA,QAEAA,kBAAgC,SAC1BA,uBAAOA,QACXA,sBACFA,UAGFA,eAAIA,2BAAcA,QAClBA,eAEAA,kBAA0B,SACpBA,mBAAMA,QACVA,cAAGA,4DAA+CA,mBAAQA,6BAAgBA,QAASA,cAACA,QAEpFA,kBAA+B,YAE3BA,wCACFA,0CAnBSA,8CAA4B,0BAA5BA,CAA4B,eAA5BA,CAA4B,iBAK5BA,6CAA4B,0BAA5BA,CAA4B,eAA5BA,CAA4B,iBAapBA,2EDtBV+C,CAAb,mBEPA,MAAMK,EAAiB,CACrB,CAAEC,KAAM,WAAYC,UCAtB,MAAM,MAAOC,kDAAsB,0BAAtBA,EAAsBd,wKCPnCzC,qBAAkC,SAChBA,8FAAkFA,QAElGA,iBAA4B,QACtBA,oDAAqCA,QAEzCA,cAAIA,wBAAYA,QAChBA,aAAGA,qFAAsEA,QAEzEA,eAAIA,6BAAgBA,QACpBA,cAAGA,8BAAiBA,QAEpBA,eAAIA,8BAAiBA,QACrBA,cAAGA,yDAA4CA,QAE/CA,eAAIA,6BAAgBA,QACpBA,cAAGA,oFAAuEA,QAE1EA,eAAIA,mDAAmCA,QACvCA,cACEA,iIACFA,QAEAA,eAAIA,gCAAmBA,QACvBA,cAAGA,4DAA+CA,UAGpDA,kBAA+B,SACzBA,uBAAUA,QAEdA,cAAG,aACOA,oDAAuCA,QAAUA,6IAE3DA,QACAA,cAAG,aACOA,qDAAqCA,QAAUA,weAKzDA,QACAA,cAAG,aACOA,+CAA+BA,QAAUA,gIAEnDA,QACAA,cAAG,aACOA,6DAAgDA,QAAUA,kIAEpEA,gBDzCSuD,CAAb,MDCE,CAAEF,KAAM,MAAOC,UAAWP,GAC1B,CAAEM,KAAM,WAAYC,UGUtB,MAAM,MAAOE,EALbtD,cAMSE,4BAAyBqD,KACzBrD,yBAAsBsD,KACtBtD,uBAAoBuD,KACpBvD,qBAAkBwD,KAClBxD,yBAAsByD,KACtBzD,wBAAqB0D,KACrB1D,sBAAmB2D,KACnB3D,oBAAiB4D,KACjB5D,2BAAwB6D,KACxB7D,yBAAsB8D,IAK9B,CAHQjC,aAAakC,GAClBC,QAAQC,IAAIF,EACb,+CAdUX,EAAsB,0BAAtBA,EAAsBf,47BCnBnCzC,qBAAiC,kBAE7BA,qBACAA,iBACEA,sCAAkCA,kBAAMA,QACxCA,sCACFA,0BACAA,kBACEA,wCAAkCA,mBAAMA,QACxCA,wCAAeA,UAAqBA,QACtCA,6BAGFA,yBACEA,sBAMAA,kBACEA,wCAAkCA,mBAAMA,QACxCA,wCACFA,2BACAA,kBACEA,wCAAkCA,mBAAMA,QACxCA,wCAAeA,UAAqBA,QACtCA,6BAGFA,0BACEA,uBAMAA,kBACEA,wCAAkCA,mBAAMA,QACxCA,wCACFA,2BACAA,kBACEA,wCAAkCA,mBAAMA,QACxCA,wCAAeA,UAAqBA,QACtCA,6BAGFA,0BACEA,uBAMAA,kBACEA,wCAAkCA,mBAAMA,QACxCA,wCACFA,2BACAA,kBACEA,wCAAkCA,mBAAMA,QACxCA,wCAAeA,UAAqBA,QACtCA,6BAGFA,0BACEA,uBAQAA,kBACEA,wCAAkCA,mBAAMA,QACxCA,wCACFA,2BACAA,kBACEA,wCAAkCA,mBAAMA,QACxCA,wCAAeA,UAAqBA,QACtCA,6BAGFA,0BAAqD,iBAOjDA,wCAAgBsE,iBAAoB,GACrCtE,QACDA,kBACEA,wCAAkCA,mBAAMA,QACxCA,wCACFA,2BACAA,kBACEA,wCAAkCA,mBAAMA,QACxCA,yCAAeA,WAAyBA,QAC1CA,uCAlG+BA,+BACZA,yDAAwC,uCAG1BA,2CAIhBA,kCAIkBA,+BAGjCA,yDAAwC,sCAAxCA,CAAwC,iBAMTA,6CAIhBA,kCAImBA,+BAGlCA,yDAAwC,sCAAxCA,CAAwC,gBAMTA,4CAIhBA,kCAIkBA,+BAGjCA,yDAAwC,sCAAxCA,CAAwC,cAMTA,0CAIhBA,kCAIYA,+BAG3BA,yDAAwC,sCAAxCA,CAAwC,eAAxCA,CAAwC,gBAAxCA,CAAwC,cAQTA,wCAIhBA,kCAIeA,+BAG9BA,yDAAwC,sCAAxCA,CAAwC,aAAxCA,CAAwC,mBAQTA,+CAIhBA,yED/ERwD,CAAb,MHTE,CAAEH,KAAM,KAAMkB,UAAW,OAAQC,WAAY,aAOxC,IAAMC,EAAb,MAAM,MAAOA,kDAAkB,0BAAlBA,gCAHDC,cAAsBtB,GACtBsB,QAECD,CAAb,KKQaE,EAAb,MAAM,MAAOA,kDAAW,0BAAXA,gCATTjC,KACA+B,EACAG,IACA3E,IACA2C,OAKS+B,CAAb,oDCnBO,IAAME,EAAb,MAAM,MAAOA,EACX3E,YAA6B4E,EAAmC3E,GAAnCC,YAAmCA,eAAuB,CAEvFI,kBACE,GAAIuE,UAAUC,UAAW,CACvB,MAAMC,EAAS7E,KAAK0E,KAAKhE,cAAcoE,QAAQ,OAAOC,cAAc,UACpE/E,KAAKD,SAASiF,OAAOH,EAAQ,QAAS7E,KAAK4E,UAC5C,CACF,CAEMA,UAAUb,GACf,MAAMc,EAASd,EAAMkB,OACfC,EAAY,MAANL,OAAM,EAANM,EAAQC,cACdC,EAAU,MAAHH,OAAG,EAAHI,EAAKP,cAAc,QAEhCJ,UAAUC,UAAUW,UADH,MAAJF,OAAI,EAAJ9E,EAAMiF,WAEnBX,EAAOW,UAAY,kBAEnBC,WAAW,KACTZ,EAAOW,UAAY,UAClB,IACJ,+CArBUf,GAAkB7E,oDAAlB6E,EAAkBpC,mDAAlBoC,CAAb","names":["i0","OTableComponent","constructor","renderer","this","EventEmitter","ngOnInit","componentValidations","ngAfterViewInit","checkbox","map","e","inputCheckArr","push","nativeElement","isValidateComponent","displayedColumns","length","dataSource","Error","key","value","trim","charAt","toUpperCase","slice","toLowerCase","match","allSelected","$event","checked","setProperty","DataSelectedArr","dataSelected","emit","selectedRow","index","indexOf","filter","_","i","selectors","CommonModule","i1","ViewerComponent","linkCode","isOpenCode","TableApiComponent","TABLE_DATA_SOURCE","COLUMNS","TABLE_DATA_SOURCE_METHODS","TABLA_INTERFACE_COLUMN","routes","path","component","TableOverviewComponent","TableExamplesComponent","DATA_SOURCE_TABLE_EXAMPLE","COLUMNS_TABLE_EXAMPLE","TABLE_EXAMPLE_NORMAL_HTML","TABLE_EXAMPLE_NORMAL_TS","TABLE_EXAMPLE_BORDERED_HTML","TABLE_EXAMPLE_STRIPED_HTML","TABLE_EXAMPLE_HOVER_HTML","TABLE_EXAMPLE_ALL_HTML","TABLE_EXAMPLE_SELECTABLE_HTML","TABLE_EXAMPLE_SELECTABLE_TS","event","console","log","ctx","pathMatch","redirectTo","TableRoutingModule","RouterModule","TableModule","ONavModule","ClipboardDirective","host","navigator","clipboard","button","closest","querySelector","listen","target","pre","T","parentElement","code","p","writeText","innerText","setTimeout"],"sourceRoot":"webpack:///","sources":["./projects/ngx-obelisco/src/lib/components/o-table/o-table.component.html","./projects/ngx-obelisco/src/lib/components/o-table/o-table.component.ts","./src/app/components/viewer/viewer.component.html","./src/app/components/viewer/viewer.component.ts","./src/app/modules/section-components/table/pages/table-api/table-api.component.ts","./src/app/modules/section-components/table/pages/table-api/table-api.component.html","./src/app/modules/section-components/table/table-routing.module.ts","./src/app/modules/section-components/table/pages/table-overview/table-overview.component.ts","./src/app/modules/section-components/table/pages/table-overview/table-overview.component.html","./src/app/modules/section-components/table/pages/table-examples/table-examples.component.ts","./src/app/modules/section-components/table/pages/table-examples/table-examples.component.html","./src/app/modules/section-components/table/table.module.ts","./src/app/shared/directives/copy/clipboard.directive.ts"],"sourcesContent":["<table\n  *ngIf=\"isValidateComponent\"\n  class=\"table\"\n  [ngClass]=\"{ 'table-bordered': isBordered, 'table-striped': isStriped, 'table-hover': isHover }\"\n>\n  <thead>\n    <tr>\n      <th scope=\"col\" *ngIf=\"isSelectable\">\n        <input type=\"checkbox\" aria-label=\"checkbox\" (change)=\"allSelected($event.target)\" />\n      </th>\n      <th scope=\"col\" *ngFor=\"let column of displayedColumns\">{{ column.value }}</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr *ngFor=\"let data of dataSource\">\n      <td *ngIf=\"isSelectable\">\n        <input #checkbox type=\"checkbox\" aria-label=\"checkbox\" (change)=\"selectedRow($event.target)\" />\n      </td>\n      <td *ngFor=\"let column of displayedColumns\" [innerHTML]=\"data[column.key]\"></td>\n    </tr>\n  </tbody>\n</table>\n","import { CommonModule } from '@angular/common';\nimport {\n  OnInit,\n  AfterViewInit,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  QueryList,\n  ViewChildren,\n  Renderer2\n} from '@angular/core';\nimport { Column } from '../../core/models/table.models';\n\n@Component({\n  selector: 'o-table',\n  templateUrl: './o-table.component.html',\n  styleUrls: ['./o-table.component.scss'],\n  standalone: true,\n  imports: [CommonModule]\n})\nexport class OTableComponent implements OnInit, AfterViewInit {\n  public isValidateComponent: boolean = false;\n\n  @Input() public displayedColumns: Column[] = [];\n  @Input() public dataSource: any[] = [];\n  @Input() public isBordered: boolean = false;\n  @Input() public isStriped: boolean = false;\n  @Input() public isHover: boolean = false;\n  @Input() public isSelectable: boolean = false;\n  @Output() public dataSelected = new EventEmitter<any>();\n\n  private inputCheckArr: ElementRef[] = [];\n  private DataSelectedArr: any[] = [];\n\n  @ViewChildren('checkbox') public checkbox!: QueryList<ElementRef>;\n\n  constructor(private readonly renderer: Renderer2) {}\n\n  public ngOnInit(): void {\n    this.componentValidations();\n  }\n\n  public ngAfterViewInit(): void {\n    this.checkbox.map((e) => {\n      this.inputCheckArr.push(e.nativeElement);\n    });\n  }\n\n  /**\n   * @description\n   * This method is used to validate the component\n   * For this component to work, the following conditions must be met:\n   * 1. The displayedColumns and displayedColumns property must be filled\n   * 2. The displayedColumns property must be has \"values\" and \"keys\" not null\n   * 3. The displayedColumns is trimmed for spaces\n   * 4. The displayedColumns is converted to capitalization\n   * 5. The displayedColumns is validated if \"value\" contains numbers or special characters and \"key\" contains numbers, special characters or accents\n   * @returns void\n   */\n  private componentValidations(): void {\n    this.isValidateComponent = this.displayedColumns.length > 0 && this.dataSource.length > 0;\n\n    if (!this.isValidateComponent) {\n      throw new Error('The displayedColumns and dataSource must not be empty');\n    }\n\n    this.displayedColumns.map((e) => {\n      if (e.key === '' || e.value === '') {\n        this.isValidateComponent = false;\n        throw new Error('The displayedColumns must not have null values');\n      }\n    });\n\n    this.displayedColumns.map((e) => (e.value = e.value.trim()));\n\n    this.displayedColumns = this.displayedColumns.map((e) => {\n      e.value = e.value.charAt(0).toUpperCase() + e.value.slice(1).toLowerCase();\n      return e;\n    });\n\n    this.displayedColumns.map((e) => {\n      if (e.value.match(/^[a-zA-ZáéíóúÁÉÍÓÚñÑ ]*$/) && e.key.match(/^[a-zA-Z ]*$/)) {\n        this.isValidateComponent = true;\n        return e;\n      } else {\n        this.isValidateComponent = false;\n        throw new Error(\n          'The displayedColumns value must not contain numbers or symbols and the key must not contain numbers, symbols or accents'\n        );\n      }\n    });\n  }\n\n  public allSelected($event: any): void {\n    if (!$event.checked) {\n      this.checkbox.map((e) => this.renderer.setProperty(e.nativeElement, 'checked', false));\n      this.DataSelectedArr = [];\n    } else {\n      this.checkbox.map((e) => this.renderer.setProperty(e.nativeElement, 'checked', true));\n      this.DataSelectedArr = this.dataSource;\n    }\n\n    this.dataSelected.emit(this.DataSelectedArr);\n  }\n\n  public selectedRow($event: any): void {\n    const index = this.inputCheckArr.indexOf($event);\n\n    if ($event.checked) {\n      this.DataSelectedArr.push(this.dataSource[index]);\n    } else {\n      this.DataSelectedArr = this.DataSelectedArr.filter((_, i) => i !== index);\n    }\n\n    this.dataSelected.emit(this.DataSelectedArr);\n  }\n}\n","<div class=\"example-wrapper\">\n  <div class=\"example-viewer\">\n    <p>{{ title }}</p>\n    <nav>\n      <ul class=\"nav flex-row nav-pills\">\n        <li class=\"nav-item d-flex\">\n          <a class=\"nav-link\" [class.active]=\"isOpenCode\" (click)=\"isOpenCode = !isOpenCode\">\n            <span>{{ linkCode }}</span>\n          </a>\n        </li>\n      </ul>\n    </nav>\n  </div>\n  <div class=\"wrapper\">\n    <nav *ngIf=\"isOpenCode && isNavCode\">\n      <ul class=\"nav flex-row nav-pills\">\n        <li class=\"nav-item d-flex\">\n          <a class=\"nav-link\" [class.active]=\"isWindowHTML\" (click)=\"isWindowHTML = true\">\n            <span>HTML</span>\n          </a>\n          <a class=\"nav-link\" [class.active]=\"!isWindowHTML\" (click)=\"isWindowHTML = false\">\n            <span>TS</span>\n          </a>\n        </li>\n      </ul>\n    </nav>\n    <ng-container *ngIf=\"!isOpenCode; else codeTemplate\">\n      <ng-content select=\"[component]\"></ng-content>\n    </ng-container>\n\n    <ng-template #codeTemplate>\n      <ng-container *ngIf=\"isWindowHTML; else windowTs\">\n        <ng-content select=\"[component-html]\"></ng-content>\n      </ng-container>\n    </ng-template>\n\n    <ng-template #windowTs>\n      <ng-content select=\"[component-ts]\"></ng-content>\n    </ng-template>\n  </div>\n</div>\n","import { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-viewer',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './viewer.component.html',\n  styleUrls: ['./viewer.component.scss']\n})\nexport class ViewerComponent {\n  @Input() public title!: string;\n  @Input() public isNavCode: boolean = false;\n\n  public isOpenCode: boolean = false;\n  public isWindowHTML: boolean = true;\n\n  get linkCode(): string {\n    return this.isOpenCode ? 'Esconder codigo' : 'Mostrar codigo';\n  }\n}\n","import { Component } from '@angular/core';\nimport { COLUMNS } from 'src/app/constants/components.constants';\nimport {\n  TABLA_INTERFACE_COLUMN,\n  TABLE_DATA_SOURCE,\n  TABLE_DATA_SOURCE_METHODS\n} from 'src/app/constants/table.constants';\n\n@Component({\n  selector: 'app-table-api',\n  templateUrl: './table-api.component.html',\n  styleUrls: ['./table-api.component.scss']\n})\nexport class TableApiComponent {\n  public dataSource = TABLE_DATA_SOURCE;\n  public columns = COLUMNS;\n  public dataSourceMethods = TABLE_DATA_SOURCE_METHODS;\n  public exampleIterfaceColumn = TABLA_INTERFACE_COLUMN;\n}\n","<section class=\"section-api\">\n  <div class=\"section-title\">\n    <h2>Referencia de API para el componente Tabla de Obelisco</h2>\n    <pre class=\"code import\">\n      <code appPrism code=\"import { OTableComponent } from 'ngx-obelisco';\"></code>\n    </pre>\n  </div>\n\n  <h3>Etiqueta</h3>\n  <hr />\n\n  <div class=\"section-selector\">\n    <h4>OTable</h4>\n    <p>Selector: <strong>o-table</strong></p>\n\n    <div class=\"section-properties\">\n      <h5>Propiedades</h5>\n      <o-table [displayedColumns]=\"columns\" [dataSource]=\"dataSource\" [isStriped]=\"true\" [isBordered]=\"true\"></o-table>\n    </div>\n\n    <div class=\"section-properties\">\n      <h5>Métodos</h5>\n      <o-table [displayedColumns]=\"columns\" [dataSource]=\"dataSource\" [isStriped]=\"true\" [isBordered]=\"true\"></o-table>\n    </div>\n  </div>\n\n  <h3>Tipos de datos</h3>\n  <hr />\n\n  <div class=\"section-type\">\n    <h4>Column</h4>\n    <p>Permite establecer los valores de la propiedad <strong>displayedColumns</strong>.</p>\n\n    <div class=\"section-interface\">\n      <pre class=\"code import\">\n        <code appPrism code=\"{{exampleIterfaceColumn}}\"></code>\n      </pre>\n    </div>\n  </div>\n</section>\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { TableApiComponent } from './pages/table-api/table-api.component';\nimport { TableExamplesComponent } from './pages/table-examples/table-examples.component';\nimport { TableOverviewComponent } from './pages/table-overview/table-overview.component';\n\nconst routes: Routes = [\n  { path: 'overview', component: TableOverviewComponent },\n  { path: 'api', component: TableApiComponent },\n  { path: 'examples', component: TableExamplesComponent },\n  { path: '**', pathMatch: 'full', redirectTo: 'overview' }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class TableRoutingModule {}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-table-overview',\n  templateUrl: './table-overview.component.html',\n  styleUrls: ['./table-overview.component.scss']\n})\nexport class TableOverviewComponent {}\n","<section class=\"section-overview\">\n  <p class=\"lead\">El componente Tabla se utiliza para organizar y mostrar datos de manera eficiente.</p>\n\n  <div class=\"section-design\">\n    <h2>Diseño y estructura (Contexto de uso)</h2>\n\n    <h3>Tabla Normal</h3>\n    <p>Tabla que no presenta bordes ni intercalación de colores en cada fila.</p>\n\n    <h3>Tabla con Bordes</h3>\n    <p>Tabla con bordes.</p>\n\n    <h3>Tabla Intercalada</h3>\n    <p>Tabla con colores intercalados en cada fila.</p>\n\n    <h3>Tabla Resaltable</h3>\n    <p>Tabla donde al hacer hover en cada fila, se modifica el color de fondo.</p>\n\n    <h3>Tabla con distintas características</h3>\n    <p>\n      Tabla con bordes, colores intercalados en cada fila, y al hacer hover en cada fila, se modifica el color de fondo.\n    </p>\n\n    <h3>Tabla Seleccionable</h3>\n    <p>Tabla con inputs checks para seleccionar filas.</p>\n  </div>\n\n  <div class=\"section-usability\">\n    <h2>Usabilidad</h2>\n\n    <p>\n      <strong>Alinear a la izquierda datos textuales.</strong> Los datos textuales siempre están alineados a la\n      izquierda dentro de una tabla. La alineación central nunca debe usarse.\n    </p>\n    <p>\n      <strong>Alinear a la derecha datos numéricos.</strong> Los datos numéricos siempre están alineados a la derecha\n      dentro de una tabla. La alineación central nunca debe usarse. Solo debe alinearse a la izquierda cuando los\n      números son identificadores arbitrarios, conocidos como \"números nominales\", lo que significa que no se pueden\n      comparar o combinar aritméticamente (por ejemplo, códigos postales, direcciones IP, números de teléfono). Los\n      encabezados de columna siguen la alineación de los datos.\n    </p>\n    <p>\n      <strong>Respete la alineación vertical.</strong> Todo el contenido debe estar centrado verticalmente dentro de la\n      fila para ofrecer el equilibrio visual adecuado.\n    </p>\n    <p>\n      <strong>Utilice un guion (-) para los valores faltantes.</strong> Cuando haya brechas en los datos, use un guión\n      corto (-) para representar valores nulos o no aplicables (N / A).\n    </p>\n  </div>\n</section>\n","import { Component } from '@angular/core';\nimport {\n  COLUMNS_TABLE_EXAMPLE,\n  DATA_SOURCE_TABLE_EXAMPLE,\n  TABLE_EXAMPLE_ALL_HTML,\n  TABLE_EXAMPLE_BORDERED_HTML,\n  TABLE_EXAMPLE_HOVER_HTML,\n  TABLE_EXAMPLE_NORMAL_HTML,\n  TABLE_EXAMPLE_NORMAL_TS,\n  TABLE_EXAMPLE_SELECTABLE_HTML,\n  TABLE_EXAMPLE_SELECTABLE_TS,\n  TABLE_EXAMPLE_STRIPED_HTML\n} from 'src/app/constants/table.constants';\n\n@Component({\n  selector: 'app-table-examples',\n  templateUrl: './table-examples.component.html',\n  styleUrls: ['./table-examples.component.scss']\n})\nexport class TableExamplesComponent {\n  public dataSourceTableExample = DATA_SOURCE_TABLE_EXAMPLE;\n  public columnsTableExample = COLUMNS_TABLE_EXAMPLE;\n  public exampleNormalHTML = TABLE_EXAMPLE_NORMAL_HTML;\n  public exampleNormalTS = TABLE_EXAMPLE_NORMAL_TS;\n  public exampleBorderedHTML = TABLE_EXAMPLE_BORDERED_HTML;\n  public exampleStripedHTML = TABLE_EXAMPLE_STRIPED_HTML;\n  public exampleHoverHTML = TABLE_EXAMPLE_HOVER_HTML;\n  public exampleAllHTML = TABLE_EXAMPLE_ALL_HTML;\n  public exampleSelectableHTML = TABLE_EXAMPLE_SELECTABLE_HTML;\n  public exampleSelectableTS = TABLE_EXAMPLE_SELECTABLE_TS;\n\n  public dataSelected(event: any[]): void {\n    console.log(event);\n  }\n}\n","<section class=\"section-example\">\n  <app-viewer title=\"Tabla Normal\" [isNavCode]=\"true\">\n    <o-table component [displayedColumns]=\"columnsTableExample\" [dataSource]=\"dataSourceTableExample\"></o-table>\n    <pre appClipboard component-html class=\"code\">\n      <button class=\"btn btn-clipboard\">Copiar</button>\n      <code appPrism language=\"html\" code=\"{{ exampleNormalHTML }}\"></code>\n    </pre>\n    <pre appClipboard component-ts class=\"code\">\n      <button class=\"btn btn-clipboard\">Copiar</button>\n      <code appPrism>{{ exampleNormalTS }}</code>\n    </pre>\n  </app-viewer>\n\n  <app-viewer title=\"Tabla con Bordes\" [isNavCode]=\"true\">\n    <o-table\n      component\n      [displayedColumns]=\"columnsTableExample\"\n      [dataSource]=\"dataSourceTableExample\"\n      [isBordered]=\"true\"\n    ></o-table>\n    <pre appClipboard component-html class=\"code\">\n      <button class=\"btn btn-clipboard\">Copiar</button>\n      <code appPrism language=\"html\" code=\"{{ exampleBorderedHTML }}\"></code>\n    </pre>\n    <pre appClipboard component-ts class=\"code\">\n      <button class=\"btn btn-clipboard\">Copiar</button>\n      <code appPrism>{{ exampleNormalTS }}</code>\n    </pre>\n  </app-viewer>\n\n  <app-viewer title=\"Tabla Intercalada\" [isNavCode]=\"true\">\n    <o-table\n      component\n      [displayedColumns]=\"columnsTableExample\"\n      [dataSource]=\"dataSourceTableExample\"\n      [isStriped]=\"true\"\n    ></o-table>\n    <pre appClipboard component-html class=\"code\">\n      <button class=\"btn btn-clipboard\">Copiar</button>\n      <code appPrism language=\"html\" code=\"{{ exampleStripedHTML }}\"></code>\n    </pre>\n    <pre appClipboard component-ts class=\"code\">\n      <button class=\"btn btn-clipboard\">Copiar</button>\n      <code appPrism>{{ exampleNormalTS }}</code>\n    </pre>\n  </app-viewer>\n\n  <app-viewer title=\"Tabla Resaltable\" [isNavCode]=\"true\">\n    <o-table\n      component\n      [displayedColumns]=\"columnsTableExample\"\n      [dataSource]=\"dataSourceTableExample\"\n      [isHover]=\"true\"\n    ></o-table>\n    <pre appClipboard component-html class=\"code\">\n      <button class=\"btn btn-clipboard\">Copiar</button>\n      <code appPrism language=\"html\" code=\"{{ exampleHoverHTML }}\"></code>\n    </pre>\n    <pre appClipboard component-ts class=\"code\">\n      <button class=\"btn btn-clipboard\">Copiar</button>\n      <code appPrism>{{ exampleNormalTS }}</code>\n    </pre>\n  </app-viewer>\n\n  <app-viewer title=\"Todo Junto\" [isNavCode]=\"true\">\n    <o-table\n      component\n      [displayedColumns]=\"columnsTableExample\"\n      [dataSource]=\"dataSourceTableExample\"\n      [isStriped]=\"true\"\n      [isBordered]=\"true\"\n      [isHover]=\"true\"\n    ></o-table>\n    <pre appClipboard component-html class=\"code\">\n      <button class=\"btn btn-clipboard\">Copiar</button>\n      <code appPrism language=\"html\" code=\"{{ exampleAllHTML }}\"></code>\n    </pre>\n    <pre appClipboard component-ts class=\"code\">\n      <button class=\"btn btn-clipboard\">Copiar</button>\n      <code appPrism>{{ exampleNormalTS }}</code>\n    </pre>\n  </app-viewer>\n\n  <app-viewer title=\"Seleccionable\" [isNavCode]=\"true\">\n    <o-table\n      component\n      [displayedColumns]=\"columnsTableExample\"\n      [dataSource]=\"dataSourceTableExample\"\n      [isHover]=\"true\"\n      [isSelectable]=\"true\"\n      (dataSelected)=\"dataSelected($event)\"\n    ></o-table>\n    <pre appClipboard component-html class=\"code\">\n      <button class=\"btn btn-clipboard\">Copiar</button>\n      <code appPrism language=\"html\" code=\"{{ exampleSelectableHTML }}\"></code>\n    </pre>\n    <pre appClipboard component-ts class=\"code\">\n      <button class=\"btn btn-clipboard\">Copiar</button>\n      <code appPrism>{{ exampleSelectableTS }}</code>\n    </pre>\n  </app-viewer>\n</section>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { ONavModule, OTableComponent } from 'projects/ngx-obelisco/src/public-api';\nimport { ViewerComponent } from 'src/app/components/viewer/viewer.component';\nimport { ClipboardDirective } from 'src/app/shared/directives/copy/clipboard.directive';\nimport { PrismDirective } from 'src/app/shared/directives/prism/prism.directive';\nimport { TableApiComponent } from './pages/table-api/table-api.component';\nimport { TableExamplesComponent } from './pages/table-examples/table-examples.component';\nimport { TableOverviewComponent } from './pages/table-overview/table-overview.component';\nimport { TableRoutingModule } from './table-routing.module';\nimport { TableComponent } from './table.component';\n\n@NgModule({\n  declarations: [TableComponent, TableOverviewComponent, TableApiComponent, TableExamplesComponent],\n  imports: [\n    CommonModule,\n    TableRoutingModule,\n    ONavModule,\n    OTableComponent,\n    ViewerComponent,\n    ClipboardDirective,\n    PrismDirective\n  ]\n})\nexport class TableModule {}\n","import { AfterViewInit, Directive, ElementRef, Renderer2 } from '@angular/core';\n\n@Directive({\n  selector: '[appClipboard]',\n  standalone: true\n})\nexport class ClipboardDirective implements AfterViewInit {\n  constructor(private readonly host: ElementRef, private readonly renderer: Renderer2) {}\n\n  ngAfterViewInit(): void {\n    if (navigator.clipboard) {\n      const button = this.host.nativeElement.closest('pre').querySelector('button');\n      this.renderer.listen(button, 'click', this.clipboard);\n    }\n  }\n\n  public clipboard(event: PointerEvent): void {\n    const button = event.target as HTMLButtonElement;\n    const pre = button?.parentElement;\n    const code = pre?.querySelector('code');\n    const text = code?.innerText;\n    navigator.clipboard.writeText(text!);\n    button.innerText = 'Codigo copiado!';\n\n    setTimeout(() => {\n      button.innerText = 'Copiar';\n    }, 1000);\n  }\n}\n"],"x_google_ignoreList":[]}