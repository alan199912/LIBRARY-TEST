{"version":3,"file":"976.d9851658d54742a0.js","mappings":"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","names":["i0","OTableComponent","constructor","renderer","this","EventEmitter","ngOnInit","componentValidations","ngAfterViewInit","checkbox","map","e","inputCheckArr","push","nativeElement","isValidateComponent","displayedColumns","length","dataSource","Error","key","value","trim","charAt","toUpperCase","slice","toLowerCase","match","allSelected","$event","checked","setAttribute","DataSelectedArr","dataSelected","emit","selectedRow","index","indexOf","filter","_","i","selectors","CommonModule","i1","BadPracticesComponent","BestPracticesComponent","ViewerComponent","linkCode","isOpenCode","DropdownToggleApiComponent","COLUMNS","DROPDOWN_TOGGLE_DATA_SOURCE","DROPDOWN_DATA_SOURCE_METHODS","SIZES","ODropdownToggleComponent","getIsSelectedOption","selectedOptionsArr","getNumberSelectedOptions","selectedOption","option","includes","splice","DropdownToggleExamplesComponent","DROPDOWN_TOGGLE_EXAMPLE","DROPDOWN_TOGGLE_BORDER_EXAMPLE","DROPDOWN_TOGGLE_SIZE_LG_EXAMPLE","DROPDOWN_TOGGLE_SIZE_MD_EXAMPLE","DROPDOWN_TOGGLE_SIZE_SM_EXAMPLE","DROPDOWN_TOGGLE_EXAMPLE_TS","getData","event","console","log","ctx","routes","path","component","DropdownToggleOverviewComponent","DROPDOWN_BEST_PRACTICES","DROPDOWN_BAD_PRACTICES","redirectTo","pathMatch","DropdownToggleRoutingModule","RouterModule","DropdownToggleModule","ONavModule","ODropdownModule","ClipboardDirective","host","navigator","clipboard","button","closest","querySelector","listen","target","pre","c","parentElement","code","d","writeText","h","innerText","setTimeout"],"sourceRoot":"webpack:///","sources":["./projects/ngx-obelisco/src/lib/components/o-table/o-table.component.html","./projects/ngx-obelisco/src/lib/components/o-table/o-table.component.ts","./src/app/components/bad-practices/bad-practices.component.html","./src/app/components/bad-practices/bad-practices.component.ts","./src/app/components/best-practices/best-practices.component.html","./src/app/components/best-practices/best-practices.component.ts","./src/app/components/viewer/viewer.component.html","./src/app/components/viewer/viewer.component.ts","./src/app/modules/section-components/dropdown/dropdown-toggle/pages/dropdown-toggle-api/dropdown-toggle-api.component.ts","./src/app/modules/section-components/dropdown/dropdown-toggle/pages/dropdown-toggle-api/dropdown-toggle-api.component.html","./projects/ngx-obelisco/src/lib/components/o-dropdown/o-dropdown-toggle/o-dropdown-toggle.component.html","./projects/ngx-obelisco/src/lib/components/o-dropdown/o-dropdown-toggle/o-dropdown-toggle.component.ts","./src/app/modules/section-components/dropdown/dropdown-toggle/pages/dropdown-toggle-examples/dropdown-toggle-examples.component.html","./src/app/modules/section-components/dropdown/dropdown-toggle/pages/dropdown-toggle-examples/dropdown-toggle-examples.component.ts","./src/app/modules/section-components/dropdown/dropdown-toggle/dropdown-toggle-routing.module.ts","./src/app/modules/section-components/dropdown/dropdown-toggle/pages/dropdown-toggle-overview/dropdown-toggle-overview.component.ts","./src/app/modules/section-components/dropdown/dropdown-toggle/pages/dropdown-toggle-overview/dropdown-toggle-overview.component.html","./src/app/modules/section-components/dropdown/dropdown-toggle/dropdown-toggle.module.ts","./src/app/shared/directives/copy/clipboard.directive.ts"],"sourcesContent":["<table\n  *ngIf=\"isValidateComponent\"\n  class=\"table\"\n  [ngClass]=\"{ 'table-bordered': isBordered, 'table-striped': isStriped, 'table-hover': isHover }\"\n>\n  <thead>\n    <tr>\n      <th scope=\"col\" *ngIf=\"isSelectable\">\n        <input type=\"checkbox\" aria-label=\"checkbox\" (change)=\"allSelected($event.target)\" />\n      </th>\n      <th scope=\"col\" *ngFor=\"let column of displayedColumns\">{{ column.value }}</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr *ngFor=\"let data of dataSource\">\n      <td *ngIf=\"isSelectable\">\n        <input #checkbox type=\"checkbox\" aria-label=\"checkbox\" (change)=\"selectedRow($event.target)\" />\n      </td>\n      <td *ngFor=\"let column of displayedColumns\" [innerHTML]=\"data[column.key]\"></td>\n    </tr>\n  </tbody>\n</table>\n","import { CommonModule } from '@angular/common';\nimport {\n  OnInit,\n  AfterViewInit,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  QueryList,\n  ViewChildren,\n  Renderer2\n} from '@angular/core';\nimport { Column } from '../../core/models/table.models';\n\n@Component({\n  selector: 'o-table',\n  templateUrl: './o-table.component.html',\n  styleUrls: ['./o-table.component.scss'],\n  standalone: true,\n  imports: [CommonModule]\n})\nexport class OTableComponent implements OnInit, AfterViewInit {\n  public isValidateComponent: boolean = false;\n\n  @Input() public displayedColumns: Column[] = [];\n  @Input() public dataSource: any[] = [];\n  @Input() public isBordered: boolean = false;\n  @Input() public isStriped: boolean = false;\n  @Input() public isHover: boolean = false;\n  @Input() public isSelectable: boolean = false;\n  @Output() public dataSelected = new EventEmitter<any>();\n\n  private inputCheckArr: ElementRef[] = [];\n  private DataSelectedArr: any[] = [];\n\n  @ViewChildren('checkbox') public checkbox!: QueryList<ElementRef>;\n\n  constructor(private readonly renderer: Renderer2) {}\n\n  public ngOnInit(): void {\n    this.componentValidations();\n  }\n\n  public ngAfterViewInit(): void {\n    this.checkbox.map((e) => {\n      this.inputCheckArr.push(e.nativeElement);\n    });\n  }\n\n  /**\n   * @description\n   * This method is used to validate the component\n   * For this component to work, the following conditions must be met:\n   * 1. The displayedColumns and displayedColumns property must be filled\n   * 2. The displayedColumns property must be has \"values\" and \"keys\" not null\n   * 3. The displayedColumns is trimmed for spaces\n   * 4. The displayedColumns is converted to capitalization\n   * 5. The displayedColumns is validated if \"value\" contains numbers or special characters and \"key\" contains numbers, special characters or accents\n   * @returns void\n   */\n  private componentValidations(): void {\n    this.isValidateComponent = this.displayedColumns.length > 0 && this.dataSource.length > 0;\n\n    if (!this.isValidateComponent) {\n      throw new Error('The displayedColumns and dataSource must not be empty');\n    }\n\n    this.displayedColumns.map((e) => {\n      if (e.key === '' || e.value === '') {\n        this.isValidateComponent = false;\n        throw new Error('The displayedColumns must not have null values');\n      }\n    });\n\n    this.displayedColumns.map((e) => (e.value = e.value.trim()));\n\n    this.displayedColumns = this.displayedColumns.map((e) => {\n      e.value = e.value.charAt(0).toUpperCase() + e.value.slice(1).toLowerCase();\n      return e;\n    });\n\n    this.displayedColumns.map((e) => {\n      if (e.value.match(/^[a-zA-ZáéíóúÁÉÍÓÚñÑ ]*$/) && e.key.match(/^[a-zA-Z ]*$/)) {\n        this.isValidateComponent = true;\n        return e;\n      } else {\n        this.isValidateComponent = false;\n        throw new Error(\n          'The displayedColumns value must not contain numbers or symbols and the key must not contain numbers, symbols or accents'\n        );\n      }\n    });\n  }\n\n  public allSelected($event: any): void {\n    if (!$event.checked) {\n      this.checkbox.map((e) => this.renderer.setAttribute(e.nativeElement, 'checked', 'false'));\n      this.DataSelectedArr = [];\n    } else {\n      this.checkbox.map((e) => this.renderer.setAttribute(e.nativeElement, 'checked', 'true'));\n      this.DataSelectedArr = this.dataSource;\n    }\n\n    this.dataSelected.emit(this.DataSelectedArr);\n  }\n\n  public selectedRow($event: any): void {\n    const index = this.inputCheckArr.indexOf($event);\n\n    if ($event.checked) {\n      this.DataSelectedArr.push(this.dataSource[index]);\n    } else {\n      this.DataSelectedArr = this.DataSelectedArr.filter((_, i) => i !== index);\n    }\n\n    this.dataSelected.emit(this.DataSelectedArr);\n  }\n}\n","<div class=\"section-bad-practices\">\n  <h3>Malas prácticas</h3>\n\n  <ul class=\"usability\">\n    <li class=\"dont\" *ngFor=\"let practice of practices\">\n      <p [innerHTML]=\"practice\"></p>\n    </li>\n  </ul>\n</div>\n","import { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-bad-practices',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './bad-practices.component.html',\n  styleUrls: ['./bad-practices.component.scss']\n})\nexport class BadPracticesComponent {\n  @Input() public practices: string[] = [];\n}\n","<div class=\"section-best-practices\">\n  <h3>Buenas prácticas</h3>\n\n  <ul class=\"usability\">\n    <li class=\"do\" *ngFor=\"let practice of practices\">\n      <p [innerHTML]=\"practice\"></p>\n    </li>\n  </ul>\n</div>\n","import { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-best-practices',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './best-practices.component.html',\n  styleUrls: ['./best-practices.component.scss']\n})\nexport class BestPracticesComponent {\n  @Input() public practices: string[] = [];\n}\n","<div class=\"example-wrapper\">\n  <div class=\"example-viewer\">\n    <p>{{ title }}</p>\n    <nav>\n      <ul class=\"nav flex-row nav-pills\">\n        <li class=\"nav-item d-flex\">\n          <a class=\"nav-link\" [class.active]=\"isOpenCode\" (click)=\"isOpenCode = !isOpenCode\">\n            <span>{{ linkCode }}</span>\n          </a>\n        </li>\n      </ul>\n    </nav>\n  </div>\n  <div class=\"wrapper\">\n    <nav *ngIf=\"isOpenCode && isNavCode\">\n      <ul class=\"nav flex-row nav-pills\">\n        <li class=\"nav-item d-flex\">\n          <a class=\"nav-link\" [class.active]=\"isWindowHTML\" (click)=\"isWindowHTML = true\">\n            <span>HTML</span>\n          </a>\n          <a class=\"nav-link\" [class.active]=\"!isWindowHTML\" (click)=\"isWindowHTML = false\">\n            <span>TS</span>\n          </a>\n        </li>\n      </ul>\n    </nav>\n    <ng-container *ngIf=\"!isOpenCode; else codeTemplate\">\n      <ng-content select=\"[component]\"></ng-content>\n    </ng-container>\n\n    <ng-template #codeTemplate>\n      <ng-container *ngIf=\"isWindowHTML; else windowTs\">\n        <ng-content select=\"[component-html]\"></ng-content>\n      </ng-container>\n    </ng-template>\n\n    <ng-template #windowTs>\n      <ng-content select=\"[component-ts]\"></ng-content>\n    </ng-template>\n  </div>\n</div>\n","import { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-viewer',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './viewer.component.html',\n  styleUrls: ['./viewer.component.scss']\n})\nexport class ViewerComponent {\n  @Input() public title!: string;\n  @Input() public isNavCode: boolean = false;\n\n  public isOpenCode: boolean = false;\n  public isWindowHTML: boolean = true;\n\n  get linkCode(): string {\n    return this.isOpenCode ? 'Esconder codigo' : 'Mostrar codigo';\n  }\n}\n","import { Component } from '@angular/core';\nimport { COLUMNS, SIZES } from 'src/app/constants/components.constants';\nimport { DROPDOWN_TOGGLE_DATA_SOURCE, DROPDOWN_DATA_SOURCE_METHODS } from 'src/app/constants/dropdown.constants';\n\n@Component({\n  selector: 'app-dropdown-toggle-api',\n  templateUrl: './dropdown-toggle-api.component.html',\n  styleUrls: ['./dropdown-toggle-api.component.scss']\n})\nexport class DropdownToggleApiComponent {\n  public columnsDropdown = COLUMNS;\n  public dataSourceDropdown = DROPDOWN_TOGGLE_DATA_SOURCE;\n  public dataSourceMethodsDropdown = DROPDOWN_DATA_SOURCE_METHODS;\n  public sizes = SIZES;\n}\n","<section class=\"section-api\">\n  <div class=\"section-title\">\n    <h2>Referencia de API para el componente Desplegable de Obelisco</h2>\n    <pre class=\"code import\">\n      <code appPrism code=\"import { ODropdownModule } from '@ngx-obelisco';\"></code>\n    </pre>\n  </div>\n\n  <h3>Etiqueta</h3>\n  <hr />\n\n  <div class=\"section-selector\">\n    <h4>ODropdownToggle</h4>\n    <p>Selector: <strong>o-dropdown-toggle</strong></p>\n    <div class=\"section-properties\">\n      <h5>Propiedades</h5>\n      <o-table\n        [displayedColumns]=\"columnsDropdown\"\n        [dataSource]=\"dataSourceDropdown\"\n        [isStriped]=\"true\"\n        [isBordered]=\"true\"\n      ></o-table>\n    </div>\n    <div class=\"section-properties\">\n      <h5>Métodos</h5>\n      <o-table\n        [displayedColumns]=\"columnsDropdown\"\n        [dataSource]=\"dataSourceMethodsDropdown\"\n        [isStriped]=\"true\"\n        [isBordered]=\"true\"\n      ></o-table>\n    </div>\n  </div>\n\n  <h3>Tipos de datos</h3>\n  <hr />\n\n  <div class=\"section-type\">\n    <h4>Sizes</h4>\n    <p>Permite establecer el tamaño del componente <strong>ODropdownToggle</strong>.</p>\n\n    <div class=\"section-interface\">\n      <pre class=\"code import\">\n        <code appPrism>{{ sizes }}</code>\n      </pre>\n    </div>\n  </div>\n</section>\n","<div class=\"dropdown\">\n  <button\n    type=\"button\"\n    class=\"btn btn-dropdown dropdown-toggle\"\n    [class.btn-dropdown-border]=\"isBordered\"\n    [class.active]=\"getIsSelectedOption\"\n    [ngClass]=\"[size !== 'md' ? 'btn-dropdown-' + size : '']\"\n    data-toggle=\"dropdown\"\n    aria-haspopup=\"true\"\n    aria-expanded=\"false\"\n  >\n    {{ filterName }}\n    {{ getNumberSelectedOptions }}\n  </button>\n  <div class=\"dropdown-menu\">\n    <button\n      (click)=\"selectedOption(option)\"\n      *ngFor=\"let option of options\"\n      class=\"dropdown-item\"\n      [class.active]=\"selectedOptionsArr.includes(option)\"\n      type=\"button\"\n    >\n      {{ option }}\n    </button>\n  </div>\n</div>\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { Sizes } from './../../../core/models/sizes.models';\n\n@Component({\n  selector: 'o-dropdown-toggle',\n  templateUrl: './o-dropdown-toggle.component.html',\n  styleUrls: ['./o-dropdown-toggle.component.scss']\n})\nexport class ODropdownToggleComponent {\n  public selectedOptionsArr: string[] = [];\n\n  @Input() public filterName!: string;\n  @Input() public options: string[] = [];\n  @Input() public size: Sizes = 'md';\n  @Input() public isBordered: boolean = false;\n\n  @Output() public dataSelected = new EventEmitter<string[]>();\n\n  get getIsSelectedOption(): boolean {\n    return this.selectedOptionsArr.length > 0;\n  }\n\n  get getNumberSelectedOptions(): string {\n    return this.selectedOptionsArr.length !== 0 ? `(${this.selectedOptionsArr.length})` : '';\n  }\n\n  public selectedOption(option: string): void {\n    if (this.selectedOptionsArr.includes(option)) {\n      this.selectedOptionsArr.splice(this.selectedOptionsArr.indexOf(option), 1);\n      this.dataSelected.emit(this.selectedOptionsArr);\n      return;\n    }\n\n    this.selectedOptionsArr.push(option);\n    this.dataSelected.emit(this.selectedOptionsArr);\n  }\n}\n","<section class=\"section-example\">\n  <app-viewer title=\"Sin borde\" [isNavCode]=\"true\">\n    <div component class=\"dropdown-container\">\n      <o-dropdown-toggle component filterName=\"Filtro\" [options]=\"options\" (dataSelected)=\"getData($event)\">\n      </o-dropdown-toggle>\n    </div>\n    <pre appClipboard component-html class=\"code\">\n        <button class=\"btn btn-clipboard\">Copiar</button>\n        <code appPrism language=\"html\">\n          {{ exampleDropdownToggle }}\n        </code>\n    </pre>\n    <pre appClipboard component-ts class=\"code\">\n        <button class=\"btn btn-clipboard\">Copiar</button>\n        <code appPrism>\n          {{ exampeDropdownToggleTs }}\n        </code>\n    </pre>\n  </app-viewer>\n\n  <app-viewer title=\"Con borde\" [isNavCode]=\"true\">\n    <div component class=\"dropdown-container\">\n      <o-dropdown-toggle\n        component\n        filterName=\"Filtro\"\n        [options]=\"options\"\n        [isBordered]=\"true\"\n        (dataSelected)=\"getData($event)\"\n      >\n      </o-dropdown-toggle>\n    </div>\n    <pre appClipboard component-html class=\"code\">\n        <button class=\"btn btn-clipboard\">Copiar</button>\n        <code appPrism language=\"html\">\n          {{ exampleDropdownToggleBorder }}\n        </code>\n    </pre>\n    <pre appClipboard component-ts class=\"code\">\n        <button class=\"btn btn-clipboard\">Copiar</button>\n        <code appPrism>\n          {{ exampeDropdownToggleTs }}\n        </code>\n    </pre>\n  </app-viewer>\n\n  <app-viewer title=\"Tamaños\" [isNavCode]=\"true\">\n    <div component class=\"dropdown-container\">\n      <div component class=\"d-flex align-items-center dropdown-gap\">\n        <o-dropdown-toggle\n          component\n          filterName=\"Filtro\"\n          [options]=\"options\"\n          size=\"lg\"\n          [isBordered]=\"true\"\n          (dataSelected)=\"getData($event)\"\n        >\n        </o-dropdown-toggle>\n        <o-dropdown-toggle\n          component\n          filterName=\"Filtro\"\n          [options]=\"options\"\n          [isBordered]=\"true\"\n          (dataSelected)=\"getData($event)\"\n        >\n        </o-dropdown-toggle>\n        <o-dropdown-toggle\n          component\n          filterName=\"Filtro\"\n          [options]=\"options\"\n          size=\"sm\"\n          [isBordered]=\"true\"\n          (dataSelected)=\"getData($event)\"\n        >\n        </o-dropdown-toggle>\n      </div>\n    </div>\n    <pre appClipboard component-html class=\"code\" *ngFor=\"let example of exampleDropdownSizes\">\n        <button class=\"btn btn-clipboard\">Copiar</button>\n        <code appPrism language=\"html\">\n            {{ example }}\n        </code>\n    </pre>\n    <pre appClipboard component-ts class=\"code\">\n        <button class=\"btn btn-clipboard\">Copiar</button>\n        <code appPrism>\n          {{ exampeDropdownToggleTs }}\n        </code>\n    </pre>\n  </app-viewer>\n</section>\n","import { Component } from '@angular/core';\nimport {\n  DROPDOWN_TOGGLE_EXAMPLE,\n  DROPDOWN_TOGGLE_BORDER_EXAMPLE,\n  DROPDOWN_TOGGLE_SIZE_LG_EXAMPLE,\n  DROPDOWN_TOGGLE_SIZE_MD_EXAMPLE,\n  DROPDOWN_TOGGLE_SIZE_SM_EXAMPLE,\n  DROPDOWN_TOGGLE_EXAMPLE_TS\n} from 'src/app/constants/dropdown.constants';\n\n@Component({\n  selector: 'app-dropdown-toggle-examples',\n  templateUrl: './dropdown-toggle-examples.component.html',\n  styleUrls: ['./dropdown-toggle-examples.component.scss']\n})\nexport class DropdownToggleExamplesComponent {\n  public exampleDropdownToggle = DROPDOWN_TOGGLE_EXAMPLE;\n  public exampleDropdownToggleBorder = DROPDOWN_TOGGLE_BORDER_EXAMPLE;\n  public exampleDropdownSizes = [\n    DROPDOWN_TOGGLE_SIZE_LG_EXAMPLE,\n    DROPDOWN_TOGGLE_SIZE_MD_EXAMPLE,\n    DROPDOWN_TOGGLE_SIZE_SM_EXAMPLE\n  ];\n  public exampeDropdownToggleTs = DROPDOWN_TOGGLE_EXAMPLE_TS;\n  public options = ['Opción 1', 'Opción 2', 'Opción 3'];\n\n  public getData(event: string[]): void {\n    console.log(event);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { DropdownToggleApiComponent } from './pages/dropdown-toggle-api/dropdown-toggle-api.component';\nimport { DropdownToggleExamplesComponent } from './pages/dropdown-toggle-examples/dropdown-toggle-examples.component';\nimport { DropdownToggleOverviewComponent } from './pages/dropdown-toggle-overview/dropdown-toggle-overview.component';\n\nconst routes: Routes = [\n  { path: 'overview', component: DropdownToggleOverviewComponent },\n  { path: 'api', component: DropdownToggleApiComponent },\n  { path: 'examples', component: DropdownToggleExamplesComponent },\n  { path: '**', redirectTo: 'overview', pathMatch: 'full' }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class DropdownToggleRoutingModule {}\n","import { Component } from '@angular/core';\nimport { DROPDOWN_BEST_PRACTICES, DROPDOWN_BAD_PRACTICES } from 'src/app/constants/dropdown.constants';\n\n@Component({\n  selector: 'app-dropdown-toggle-overview',\n  templateUrl: './dropdown-toggle-overview.component.html',\n  styleUrls: ['./dropdown-toggle-overview.component.scss']\n})\nexport class DropdownToggleOverviewComponent {\n  public bestPractices = DROPDOWN_BEST_PRACTICES;\n  public badPractices = DROPDOWN_BAD_PRACTICES;\n}\n","<section class=\"section-overview\">\n  <p class=\"lead\">\n    Los desplegables tienen la apariencia de un botón pero al interactuar con ellos permiten seleccionar una opción\n    dentro de un menú.\n  </p>\n\n  <div class=\"section-design\">\n    <h2>Diseño y estructura (Contexto de uso)</h2>\n\n    <p>Se agrupan de forma horizontal.</p>\n\n    <img\n      class=\"card-img-top\"\n      src=\"https://gcba.github.io/estandares/componentes/desplegable/dise%C3%B1o-estructura-1.svg\"\n      alt=\"imagen sobre desplegables en forma horizontal\"\n    />\n\n    <p class=\"section-design-text\">Combinables con Botones y con Navegación horizontal.</p>\n  </div>\n\n  <img\n    class=\"card-img-top\"\n    src=\"https://gcba.github.io/estandares/componentes/desplegable/dise%C3%B1o-estructura-2.svg\"\n    alt=\"imagen sobre desplegables combinados con botones y con navegación horizontal\"\n  />\n\n  <div class=\"section-usability\">\n    <h2>Usabilidad</h2>\n\n    <app-best-practices [practices]=\"bestPractices\"></app-best-practices>\n\n    <app-bad-practices [practices]=\"badPractices\"></app-bad-practices>\n  </div>\n</section>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { DropdownToggleRoutingModule } from './dropdown-toggle-routing.module';\nimport { ONavModule, OTableComponent, ODropdownModule } from 'projects/ngx-obelisco/src/public-api';\n\nimport { DropdownToggleComponent } from './dropdown-toggle.component';\nimport { BadPracticesComponent } from 'src/app/components/bad-practices/bad-practices.component';\nimport { BestPracticesComponent } from 'src/app/components/best-practices/best-practices.component';\nimport { ViewerComponent } from 'src/app/components/viewer/viewer.component';\nimport { ClipboardDirective } from 'src/app/shared/directives/copy/clipboard.directive';\nimport { PrismDirective } from 'src/app/shared/directives/prism/prism.directive';\nimport { DropdownToggleApiComponent } from './pages/dropdown-toggle-api/dropdown-toggle-api.component';\nimport { DropdownToggleOverviewComponent } from './pages/dropdown-toggle-overview/dropdown-toggle-overview.component';\nimport { DropdownToggleExamplesComponent } from './pages/dropdown-toggle-examples/dropdown-toggle-examples.component';\n\n@NgModule({\n  declarations: [\n    DropdownToggleComponent,\n    DropdownToggleApiComponent,\n    DropdownToggleOverviewComponent,\n    DropdownToggleExamplesComponent\n  ],\n  imports: [\n    CommonModule,\n    DropdownToggleRoutingModule,\n    ONavModule,\n    BestPracticesComponent,\n    BadPracticesComponent,\n    OTableComponent,\n    ODropdownModule,\n    ViewerComponent,\n    ClipboardDirective,\n    PrismDirective\n  ]\n})\nexport class DropdownToggleModule {}\n","import { AfterViewInit, Directive, ElementRef, Renderer2 } from '@angular/core';\n\n@Directive({\n  selector: '[appClipboard]',\n  standalone: true\n})\nexport class ClipboardDirective implements AfterViewInit {\n  constructor(private readonly host: ElementRef, private readonly renderer: Renderer2) {}\n\n  ngAfterViewInit(): void {\n    if (navigator.clipboard) {\n      const button = this.host.nativeElement.closest('pre').querySelector('button');\n      this.renderer.listen(button, 'click', this.clipboard);\n    }\n  }\n\n  public clipboard(event: PointerEvent): void {\n    const button = event.target as HTMLButtonElement;\n    const pre = button?.parentElement;\n    const code = pre?.querySelector('code');\n    const text = code?.innerText;\n    navigator.clipboard.writeText(text!);\n    button.innerText = 'Codigo copiado!';\n\n    setTimeout(() => {\n      button.innerText = 'Copiar';\n    }, 1000);\n  }\n}\n"],"x_google_ignoreList":[]}