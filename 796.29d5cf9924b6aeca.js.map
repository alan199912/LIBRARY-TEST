{"version":3,"file":"796.29d5cf9924b6aeca.js","mappings":"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","names":["i0","OTableComponent","constructor","renderer","this","EventEmitter","ngOnInit","componentValidations","ngAfterViewInit","checkbox","map","e","inputCheckArr","push","nativeElement","isValidateComponent","displayedColumns","length","dataSource","Error","key","value","trim","charAt","toUpperCase","slice","toLowerCase","match","allSelected","$event","checked","setProperty","DataSelectedArr","dataSelected","emit","selectedRow","index","indexOf","filter","_","i","selectors","CommonModule","i1","BadPracticesComponent","BestPracticesComponent","ViewerComponent","linkCode","isOpenCode","OProgressBarComponent","AbstractStep","progressBarService","super","Subject","getNext","pipe","takeUntil","onDestroy$","subscribe","nextStep","getPrevious","previousStep","aux","totalSteps","currentStep","percentage","setpsService","isFirstStep","stopSteps","stopEmmiter","stop","ngOnDestroy","next","complete","i2","ProgressBarApiComponent","DATA_SOURCE_PROGRESS_BAR_INPUT","DATA_SOURCE_PROGRESS_BAR_OUTPUT","COLUMNS","ProgressBarDemoComponent","clickPrev","clickNext","ctx","routes","path","component","ProgressBarOverviewComponent","PROGRESS_BAR_BEST_PRACTICES","ProgressBarExamplesComponent","PROGRESS_BAR_EXAMPLE_DIRECTIVE","PROGRESS_BAR_EXAMPLE_FUNCIONALITY_HTML","PROGRESS_BAR_EXAMPLE_FUNCIONALITY_TS","PROGRESS_BAR_EXAMPLE_NO_STEPS","PROGRESS_BAR_EXAMPLE_COLORS","initialize","previous","stopProgress","event","console","log","pathMatch","redirectTo","ProgressBarRoutingModule","RouterModule","ProgressBarModule","ONavModule","ClipboardDirective","host","navigator","clipboard","button","closest","querySelector","listen","target","pre","l","parentElement","code","d","writeText","h","innerText","setTimeout"],"sourceRoot":"webpack:///","sources":["./projects/ngx-obelisco/src/lib/components/o-table/o-table.component.html","./projects/ngx-obelisco/src/lib/components/o-table/o-table.component.ts","./src/app/components/bad-practices/bad-practices.component.html","./src/app/components/bad-practices/bad-practices.component.ts","./src/app/components/best-practices/best-practices.component.html","./src/app/components/best-practices/best-practices.component.ts","./src/app/components/viewer/viewer.component.html","./src/app/components/viewer/viewer.component.ts","./projects/ngx-obelisco/src/lib/components/o-progress-bar/o-progress-bar.component.html","./projects/ngx-obelisco/src/lib/components/o-progress-bar/o-progress-bar.component.ts","./src/app/modules/section-components/progress-bar/pages/progress-bar-api/progress-bar-api.component.ts","./src/app/modules/section-components/progress-bar/pages/progress-bar-api/progress-bar-api.component.html","./src/app/modules/section-components/progress-bar/pages/progress-bar-examples/demo/progress-bar-demo.component.ts","./src/app/modules/section-components/progress-bar/pages/progress-bar-examples/demo/progress-bar-demo.component.html","./src/app/modules/section-components/progress-bar/progress-bar-routing.module.ts","./src/app/modules/section-components/progress-bar/pages/progress-bar-overview/progress-bar-overview.component.ts","./src/app/modules/section-components/progress-bar/pages/progress-bar-overview/progress-bar-overview.component.html","./src/app/modules/section-components/progress-bar/pages/progress-bar-examples/progress-bar-examples.component.ts","./src/app/modules/section-components/progress-bar/pages/progress-bar-examples/progress-bar-examples.component.html","./src/app/modules/section-components/progress-bar/progress-bar.module.ts","./src/app/shared/directives/copy/clipboard.directive.ts"],"sourcesContent":["<table\n  *ngIf=\"isValidateComponent\"\n  class=\"table\"\n  [ngClass]=\"{ 'table-bordered': isBordered, 'table-striped': isStriped, 'table-hover': isHover }\"\n>\n  <thead>\n    <tr>\n      <th scope=\"col\" *ngIf=\"isSelectable\">\n        <input type=\"checkbox\" aria-label=\"checkbox\" (change)=\"allSelected($event.target)\" />\n      </th>\n      <th scope=\"col\" *ngFor=\"let column of displayedColumns\">{{ column.value }}</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr *ngFor=\"let data of dataSource\">\n      <td *ngIf=\"isSelectable\">\n        <input #checkbox type=\"checkbox\" aria-label=\"checkbox\" (change)=\"selectedRow($event.target)\" />\n      </td>\n      <td *ngFor=\"let column of displayedColumns\" [innerHTML]=\"data[column.key]\"></td>\n    </tr>\n  </tbody>\n</table>\n","import { CommonModule } from '@angular/common';\nimport {\n  OnInit,\n  AfterViewInit,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  QueryList,\n  ViewChildren,\n  Renderer2\n} from '@angular/core';\nimport { Column } from '../../core/models/table.models';\n\n@Component({\n  selector: 'o-table',\n  templateUrl: './o-table.component.html',\n  styleUrls: ['./o-table.component.scss'],\n  standalone: true,\n  imports: [CommonModule]\n})\nexport class OTableComponent implements OnInit, AfterViewInit {\n  public isValidateComponent: boolean = false;\n\n  @Input() public displayedColumns: Column[] = [];\n  @Input() public dataSource: any[] = [];\n  @Input() public isBordered: boolean = false;\n  @Input() public isStriped: boolean = false;\n  @Input() public isHover: boolean = false;\n  @Input() public isSelectable: boolean = false;\n  @Output() public dataSelected = new EventEmitter<any>();\n\n  private inputCheckArr: ElementRef[] = [];\n  private DataSelectedArr: any[] = [];\n\n  @ViewChildren('checkbox') public checkbox!: QueryList<ElementRef>;\n\n  constructor(private readonly renderer: Renderer2) {}\n\n  public ngOnInit(): void {\n    this.componentValidations();\n  }\n\n  public ngAfterViewInit(): void {\n    this.checkbox.map((e) => {\n      this.inputCheckArr.push(e.nativeElement);\n    });\n  }\n\n  /**\n   * @description\n   * This method is used to validate the component\n   * For this component to work, the following conditions must be met:\n   * 1. The displayedColumns and displayedColumns property must be filled\n   * 2. The displayedColumns property must be has \"values\" and \"keys\" not null\n   * 3. The displayedColumns is trimmed for spaces\n   * 4. The displayedColumns is converted to capitalization\n   * 5. The displayedColumns is validated if \"value\" contains numbers or special characters and \"key\" contains numbers, special characters or accents\n   * @returns void\n   */\n  private componentValidations(): void {\n    this.isValidateComponent = this.displayedColumns.length > 0 && this.dataSource.length > 0;\n\n    if (!this.isValidateComponent) {\n      throw new Error('The displayedColumns and dataSource must not be empty');\n    }\n\n    this.displayedColumns.map((e) => {\n      if (e.key === '' || e.value === '') {\n        this.isValidateComponent = false;\n        throw new Error('The displayedColumns must not have null values');\n      }\n    });\n\n    this.displayedColumns.map((e) => (e.value = e.value.trim()));\n\n    this.displayedColumns = this.displayedColumns.map((e) => {\n      e.value = e.value.charAt(0).toUpperCase() + e.value.slice(1).toLowerCase();\n      return e;\n    });\n\n    this.displayedColumns.map((e) => {\n      if (e.value.match(/^[a-zA-ZáéíóúÁÉÍÓÚñÑ ]*$/) && e.key.match(/^[a-zA-Z ]*$/)) {\n        this.isValidateComponent = true;\n        return e;\n      } else {\n        this.isValidateComponent = false;\n        throw new Error(\n          'The displayedColumns value must not contain numbers or symbols and the key must not contain numbers, symbols or accents'\n        );\n      }\n    });\n  }\n\n  public allSelected($event: any): void {\n    if (!$event.checked) {\n      this.checkbox.map((e) => this.renderer.setProperty(e.nativeElement, 'checked', false));\n      this.DataSelectedArr = [];\n    } else {\n      this.checkbox.map((e) => this.renderer.setProperty(e.nativeElement, 'checked', true));\n      this.DataSelectedArr = this.dataSource;\n    }\n\n    this.dataSelected.emit(this.DataSelectedArr);\n  }\n\n  public selectedRow($event: any): void {\n    const index = this.inputCheckArr.indexOf($event);\n\n    if ($event.checked) {\n      this.DataSelectedArr.push(this.dataSource[index]);\n    } else {\n      this.DataSelectedArr = this.DataSelectedArr.filter((_, i) => i !== index);\n    }\n\n    this.dataSelected.emit(this.DataSelectedArr);\n  }\n}\n","<div class=\"section-bad-practices\">\n  <h3>Malas prácticas</h3>\n\n  <ul class=\"usability\">\n    <li class=\"dont\" *ngFor=\"let practice of practices\">\n      <p [innerHTML]=\"practice\"></p>\n    </li>\n  </ul>\n</div>\n","import { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-bad-practices',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './bad-practices.component.html',\n  styleUrls: ['./bad-practices.component.scss']\n})\nexport class BadPracticesComponent {\n  @Input() public practices: string[] = [];\n}\n","<div class=\"section-best-practices\">\n  <h3>Buenas prácticas</h3>\n\n  <ul class=\"usability\">\n    <li class=\"do\" *ngFor=\"let practice of practices\">\n      <p [innerHTML]=\"practice\"></p>\n    </li>\n  </ul>\n</div>\n","import { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-best-practices',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './best-practices.component.html',\n  styleUrls: ['./best-practices.component.scss']\n})\nexport class BestPracticesComponent {\n  @Input() public practices: string[] = [];\n}\n","<div class=\"example-wrapper\">\n  <div class=\"example-viewer\">\n    <p>{{ title }}</p>\n    <nav>\n      <ul class=\"nav flex-row nav-pills\">\n        <li class=\"nav-item d-flex\">\n          <a class=\"nav-link\" [class.active]=\"isOpenCode\" (click)=\"isOpenCode = !isOpenCode\">\n            <span>{{ linkCode }}</span>\n          </a>\n        </li>\n      </ul>\n    </nav>\n  </div>\n  <div class=\"wrapper\">\n    <nav *ngIf=\"isOpenCode && isNavCode\">\n      <ul class=\"nav flex-row nav-pills\">\n        <li class=\"nav-item d-flex\">\n          <a class=\"nav-link\" [class.active]=\"isWindowHTML\" (click)=\"isWindowHTML = true\">\n            <span>HTML</span>\n          </a>\n          <a class=\"nav-link\" [class.active]=\"!isWindowHTML\" (click)=\"isWindowHTML = false\">\n            <span>TS</span>\n          </a>\n        </li>\n      </ul>\n    </nav>\n    <ng-container *ngIf=\"!isOpenCode; else codeTemplate\">\n      <ng-content select=\"[component]\"></ng-content>\n    </ng-container>\n\n    <ng-template #codeTemplate>\n      <ng-container *ngIf=\"isWindowHTML; else windowTs\">\n        <ng-content select=\"[component-html]\"></ng-content>\n      </ng-container>\n    </ng-template>\n\n    <ng-template #windowTs>\n      <ng-content select=\"[component-ts]\"></ng-content>\n    </ng-template>\n  </div>\n</div>\n","import { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-viewer',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './viewer.component.html',\n  styleUrls: ['./viewer.component.scss']\n})\nexport class ViewerComponent {\n  @Input() public title!: string;\n  @Input() public isNavCode: boolean = false;\n\n  public isOpenCode: boolean = false;\n  public isWindowHTML: boolean = true;\n\n  get linkCode(): string {\n    return this.isOpenCode ? 'Esconder codigo' : 'Mostrar codigo';\n  }\n}\n","<p class=\"steps\" *ngIf=\"isSteps\">{{ currentStep }} de {{ totalSteps }} pasos</p>\n<div class=\"progress\">\n  <div\n    class=\"progress-bar\"\n    role=\"progressbar\"\n    [ngClass]=\"'bg-' + color\"\n    [attr.aria-valuenow]=\"percentage | number\"\n    [style.width.%]=\"percentage | number\"\n  ></div>\n</div>\n","import { CommonModule } from '@angular/common';\nimport { Component, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { Subject, takeUntil } from 'rxjs';\nimport { AbstractStep } from '../../core/abstracts/step.abstracts';\nimport { Colors } from '../../core/models/colors.models';\nimport { StepService } from '../../core/services/step/step.service';\n\nconst MAX_WIDTH: number = 100;\nconst INICIAL_STEP: number = 0;\n\n@Component({\n  selector: 'o-progress-bar',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './o-progress-bar.component.html',\n  styleUrls: ['./o-progress-bar.component.scss']\n})\nexport class OProgressBarComponent extends AbstractStep implements OnInit, OnDestroy {\n  public percentage: number = 0;\n  public aux: number = 0;\n\n  @Input() public isSteps: boolean = false;\n  @Input() public color: Colors = 'primary';\n  @Input() public currentStep: number = 0;\n  @Input() public totalSteps: number = 10;\n\n  @Output() public override stopSteps = new EventEmitter<boolean>();\n\n  private onDestroy$ = new Subject<void>();\n\n  constructor(private readonly progressBarService: StepService) {\n    super(progressBarService);\n  }\n\n  public ngOnInit(): void {\n    this.progressBarService.getNext.pipe(takeUntil(this.onDestroy$)).subscribe(() => {\n      this.nextStep();\n    });\n    this.progressBarService.getPrevious.pipe(takeUntil(this.onDestroy$)).subscribe(() => {\n      this.previousStep();\n    });\n    this.aux = MAX_WIDTH / this.totalSteps;\n    for (let i = 0; i < this.currentStep; i++) {\n      this.percentage += this.aux;\n    }\n  }\n\n  public previousStep(): void {\n    this.setpsService.isFirstStep.emit(false);\n\n    if (this.currentStep > INICIAL_STEP) {\n      this.percentage -= this.aux;\n      this.currentStep--;\n    }\n\n    if (this.currentStep === 0) {\n      this.setpsService.isFirstStep.emit(true);\n      return;\n    }\n  }\n\n  public nextStep(): void {\n    this.setpsService.isFirstStep.emit(false);\n    if (this.currentStep < this.totalSteps) {\n      this.percentage += this.aux;\n      this.currentStep++;\n    }\n    if (this.currentStep === this.totalSteps) {\n      this.stopSteps.emit(true);\n      this.setpsService.stopEmmiter.emit(true);\n      this.progressBarService.stop();\n    }\n  }\n\n  public ngOnDestroy(): void {\n    this.onDestroy$.next();\n    this.onDestroy$.complete();\n  }\n}\n","import { Component } from '@angular/core';\nimport { COLUMNS } from 'src/app/constants/components.constants';\nimport {\n  DATA_SOURCE_PROGRESS_BAR_INPUT,\n  DATA_SOURCE_PROGRESS_BAR_OUTPUT\n} from 'src/app/constants/progress-bar.constants';\n\n@Component({\n  selector: 'app-progress-bar-api',\n  templateUrl: './progress-bar-api.component.html',\n  styleUrls: ['./progress-bar-api.component.scss']\n})\nexport class ProgressBarApiComponent {\n  public dataSourceProgressBarInput = DATA_SOURCE_PROGRESS_BAR_INPUT;\n\n  public dataSourceProgressBarOutput = DATA_SOURCE_PROGRESS_BAR_OUTPUT;\n\n  public columns = COLUMNS;\n}\n","<section class=\"section-api\">\n  <div class=\"section-title\">\n    <h2>Referencia de API para el componente Barra de progreso de Obelisco</h2>\n    <pre class=\"code import\">\n      <code appPrism code=\"import { OProgressBarComponent } from '@ngx-obelisco';\"></code>\n    </pre>\n  </div>\n\n  <h3>Etiqueta</h3>\n  <hr />\n\n  <div class=\"section-selector\">\n    <h4>OProgressBar</h4>\n    <p>Selector: <strong>o-progress-bar</strong></p>\n\n    <div class=\"section-properties\">\n      <h5>Como se usa</h5>\n\n      <p>\n        Se puede usar las directivas <strong>StepNextDirective</strong> y\n        <strong>StepPreviousDirective</strong> importado en el modulo donde se va a usar y agregarlo en botones\n      </p>\n      <pre class=\"code import\">\n        <code appPrism language=\"javascript\" code=\"import { StepNextDirective } from 'ngx-obelisco';\"></code>\n      </pre>\n      <pre class=\"code import\">\n        <code appPrism language=\"javascript\" code=\"import { StepPreviousDirective } from 'ngx-obelisco';\"></code>\n      </pre>\n\n      <p>\n        O de otra manera, se puede usar inyectando su servicio para inicializar los <strong>steps</strong> y luego darle\n        funcionalidad.\n      </p>\n\n      <pre class=\"code import\">\n        <code appPrism language=\"javascript\" code=\"import { StepService } from 'ngx-obelisco';\"></code>\n      </pre>\n\n      <h5>Propiedades</h5>\n\n      <o-table\n        [displayedColumns]=\"columns\"\n        [dataSource]=\"dataSourceProgressBarInput\"\n        [isStriped]=\"true\"\n        [isBordered]=\"true\"\n      ></o-table>\n      <br />\n\n      <h5>Métodos</h5>\n      <o-table\n        [displayedColumns]=\"columns\"\n        [dataSource]=\"dataSourceProgressBarOutput\"\n        [isStriped]=\"true\"\n        [isBordered]=\"true\"\n      ></o-table>\n    </div>\n  </div>\n</section>\n","import { Component, OnInit } from '@angular/core';\n\nconst MAX_WIDTH: number = 100;\nconst INICIAL_STEP: number = 0;\n\n@Component({\n  selector: 'app-progress-bar-demo',\n  templateUrl: './progress-bar-demo.component.html',\n  styleUrls: ['./progress-bar-demo.component.scss']\n})\nexport class ProgressBarDemoComponent implements OnInit {\n  public percentage: number = 0;\n  public aux: number = 0;\n  public currentStep: number = 4;\n  public totalSteps: number = 8;\n\n  public ngOnInit(): void {\n    this.aux = MAX_WIDTH / this.totalSteps;\n    for (let i = 0; i < this.currentStep; i++) {\n      this.percentage += this.aux;\n    }\n  }\n  public clickPrev(): void {\n    if (this.currentStep > INICIAL_STEP) {\n      this.percentage -= this.aux;\n      this.currentStep--;\n    }\n  }\n  public clickNext(): void {\n    if (this.currentStep < this.totalSteps) {\n      this.percentage += this.aux;\n      this.currentStep++;\n    }\n  }\n}\n","<p class=\"steps\">{{ currentStep }} de {{ totalSteps }} pasos</p>\n<div class=\"progress\">\n  <div class=\"progress-bar bg-primary\" role=\"progressbar\" [style.width.%]=\"percentage | number\"></div>\n</div>\n\n<button class=\"btn btn-sm btn-link mr-2\" (click)=\"clickPrev()\">Anterior</button>\n<button class=\"btn btn-sm btn-link\" (click)=\"clickNext()\">Siguiente</button>\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { ProgressBarApiComponent } from './pages/progress-bar-api/progress-bar-api.component';\nimport { ProgressBarExamplesComponent } from './pages/progress-bar-examples/progress-bar-examples.component';\nimport { ProgressBarOverviewComponent } from './pages/progress-bar-overview/progress-bar-overview.component';\n\nconst routes: Routes = [\n  { path: 'overview', component: ProgressBarOverviewComponent },\n  { path: 'api', component: ProgressBarApiComponent },\n  { path: 'examples', component: ProgressBarExamplesComponent },\n  { path: '**', pathMatch: 'full', redirectTo: 'overview' }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class ProgressBarRoutingModule {}\n","import { Component } from '@angular/core';\nimport { PROGRESS_BAR_BEST_PRACTICES } from 'src/app/constants/progress-bar.constants';\n\n@Component({\n  selector: 'app-progress-bar-overview',\n  templateUrl: './progress-bar-overview.component.html',\n  styleUrls: ['./progress-bar-overview.component.scss']\n})\nexport class ProgressBarOverviewComponent {\n  public bestPractices = PROGRESS_BAR_BEST_PRACTICES;\n}\n","<section class=\"section-overview\">\n  <p class=\"lead\">\n    Las barras de progreso muestran la progresión del sistema sobre el estado de una operación. Pueden representar un\n    progreso determinado o indeterminado.\n  </p>\n\n  <h2>Tipos de barra de progreso</h2>\n\n  <h3>Con pasos</h3>\n\n  <p>Utilice este componente cuando pueda determinar los pasos de la tarea completada.</p>\n\n  <h3>Sin pasos</h3>\n\n  <p>\n    Este tipo de barra muestra visualmente el progreso de una operación del sistema. Se utiliza cuando se desconoce los\n    pasos para completar la misma.\n  </p>\n\n  <div class=\"section-design\">\n    <h2>Diseño y estructura (contexto de uso)</h2>\n\n    <p>Se ubican en la parte superior de la página y muestran el estado de una tarea.</p>\n  </div>\n\n  <img src=\"https://gcba.github.io/estandares/componentes/barradeprogreso/barra-progreso.svg\" alt=\"\" />\n\n  <div class=\"section-usability\">\n    <h2>Usabilidad</h2>\n\n    <ul class=\"usability\">\n      <app-best-practices [practices]=\"bestPractices\"></app-best-practices>\n    </ul>\n  </div>\n</section>\n","import { Component, OnInit } from '@angular/core';\nimport { StepService } from 'projects/ngx-obelisco/src/public-api';\nimport {\n  PROGRESS_BAR_EXAMPLE_DIRECTIVE,\n  PROGRESS_BAR_EXAMPLE_FUNCIONALITY_HTML,\n  PROGRESS_BAR_EXAMPLE_COLORS,\n  PROGRESS_BAR_EXAMPLE_NO_STEPS,\n  PROGRESS_BAR_EXAMPLE_FUNCIONALITY_TS\n} from 'src/app/constants/progress-bar.constants';\n\n@Component({\n  selector: 'app-progress-bar-examples',\n  templateUrl: './progress-bar-examples.component.html',\n  styleUrls: ['./progress-bar-examples.component.scss']\n})\nexport class ProgressBarExamplesComponent implements OnInit {\n  public exampleButtons = PROGRESS_BAR_EXAMPLE_DIRECTIVE;\n  public exampleFuncionalityHTML = PROGRESS_BAR_EXAMPLE_FUNCIONALITY_HTML;\n  public exampleFuncionalityTS = PROGRESS_BAR_EXAMPLE_FUNCIONALITY_TS;\n  public exampleNoSteps = PROGRESS_BAR_EXAMPLE_NO_STEPS;\n  public exampleColors = PROGRESS_BAR_EXAMPLE_COLORS;\n\n  constructor(private readonly progressBarService: StepService) {}\n\n  public ngOnInit(): void {\n    this.progressBarService.initialize();\n  }\n\n  public nextStep(): void {\n    this.progressBarService.next();\n  }\n\n  public previousStep(): void {\n    this.progressBarService.previous();\n  }\n\n  public stopProgress(event: boolean): void {\n    if (event) {\n      console.log('Completado');\n    }\n  }\n}\n","<section class=\"section-example\">\n  <app-viewer title=\"Barra de Progreso con botones y directiva\">\n    <app-progress-bar-demo component></app-progress-bar-demo>\n    <pre appClipboard component-html class=\"code\">\n      <button class=\"btn btn-clipboard\">Copiar</button>\n      <code appPrism language=\"html\">\n        {{ exampleButtons }}\n      </code>\n    </pre>\n  </app-viewer>\n\n  <app-viewer title=\"Barra de Progreso con botones y funcionalidad\" [isNavCode]=\"true\">\n    <div component>\n      <o-progress-bar [isSteps]=\"true\" [currentStep]=\"2\" color=\"success\"></o-progress-bar>\n      <button class=\"btn btn-sm btn-link mr-2\" (click)=\"previousStep()\">Anterior</button>\n      <button class=\"btn btn-sm btn-link\" (click)=\"nextStep()\">Siguiente</button>\n    </div>\n    <pre appClipboard component-html class=\"code\">\n      <button class=\"btn btn-clipboard\">Copiar</button>\n      <code appPrism language=\"html\">\n        {{ exampleFuncionalityHTML }}\n      </code>\n    </pre>\n\n    <pre appClipboard component-ts class=\"code\">\n      <button class=\"btn btn-clipboard\">Copiar</button>\n      <code appPrism>\n        {{ exampleFuncionalityTS }}\n      </code>\n    </pre>\n  </app-viewer>\n\n  <app-viewer title=\"Barra de Progreso sin pasos\">\n    <div component class=\"progress\">\n      <div class=\"progress-bar bg-info\" role=\"progressbar\" [style.width.%]=\"45 | number\"></div>\n    </div>\n    <pre appClipboard component-html class=\"code\">\n      <button class=\"btn btn-clipboard\">Copiar</button>\n      <code appPrism language=\"html\">\n        {{ exampleNoSteps }}\n      </code>\n    </pre>\n  </app-viewer>\n\n  <app-viewer class=\"viewer\" title=\"Colores\">\n    <div component>\n      <div class=\"progress\">\n        <div class=\"progress-bar bg-primary\" role=\"progressbar\" [style.width.%]=\"50 | number\"></div>\n      </div>\n      <div class=\"progress\">\n        <div class=\"progress-bar bg-success\" role=\"progressbar\" [style.width.%]=\"40 | number\"></div>\n      </div>\n      <div class=\"progress\">\n        <div class=\"progress-bar bg-info\" role=\"progressbar\" [style.width.%]=\"30 | number\"></div>\n      </div>\n      <div class=\"progress\">\n        <div class=\"progress-bar bg-danger\" role=\"progressbar\" [style.width.%]=\"20 | number\"></div>\n      </div>\n    </div>\n    <pre appClipboard component-html class=\"code\">\n      <button class=\"btn btn-clipboard\">Copiar</button>\n      <code appPrism language=\"html\">\n        {{ exampleColors }}\n      </code>\n    </pre>\n  </app-viewer>\n</section>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ONavModule, OProgressBarComponent, OTableComponent } from 'projects/ngx-obelisco/src/public-api';\nimport { BadPracticesComponent } from 'src/app/components/bad-practices/bad-practices.component';\nimport { BestPracticesComponent } from 'src/app/components/best-practices/best-practices.component';\nimport { ViewerComponent } from 'src/app/components/viewer/viewer.component';\nimport { ClipboardDirective } from 'src/app/shared/directives/copy/clipboard.directive';\nimport { PrismDirective } from 'src/app/shared/directives/prism/prism.directive';\n\nimport { ProgressBarApiComponent } from './pages/progress-bar-api/progress-bar-api.component';\nimport { ProgressBarDemoComponent } from './pages/progress-bar-examples/demo/progress-bar-demo.component';\nimport { ProgressBarExamplesComponent } from './pages/progress-bar-examples/progress-bar-examples.component';\nimport { ProgressBarOverviewComponent } from './pages/progress-bar-overview/progress-bar-overview.component';\nimport { ProgressBarRoutingModule } from './progress-bar-routing.module';\nimport { ProgressBarComponent } from './progress-bar.component';\n\n@NgModule({\n  declarations: [\n    ProgressBarComponent,\n    ProgressBarApiComponent,\n    ProgressBarExamplesComponent,\n    ProgressBarOverviewComponent,\n    ProgressBarDemoComponent\n  ],\n  imports: [\n    CommonModule,\n    ProgressBarRoutingModule,\n    ONavModule,\n    OTableComponent,\n    OProgressBarComponent,\n    ViewerComponent,\n    BestPracticesComponent,\n    BadPracticesComponent,\n    PrismDirective,\n    ClipboardDirective\n  ]\n})\nexport class ProgressBarModule {}\n","import { AfterViewInit, Directive, ElementRef, Renderer2 } from '@angular/core';\n\n@Directive({\n  selector: '[appClipboard]',\n  standalone: true\n})\nexport class ClipboardDirective implements AfterViewInit {\n  constructor(private readonly host: ElementRef, private readonly renderer: Renderer2) {}\n\n  ngAfterViewInit(): void {\n    if (navigator.clipboard) {\n      const button = this.host.nativeElement.closest('pre').querySelector('button');\n      this.renderer.listen(button, 'click', this.clipboard);\n    }\n  }\n\n  public clipboard(event: PointerEvent): void {\n    const button = event.target as HTMLButtonElement;\n    const pre = button?.parentElement;\n    const code = pre?.querySelector('code');\n    const text = code?.innerText;\n    navigator.clipboard.writeText(text!);\n    button.innerText = 'Codigo copiado!';\n\n    setTimeout(() => {\n      button.innerText = 'Copiar';\n    }, 1000);\n  }\n}\n"],"x_google_ignoreList":[]}